
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08005c68  08005c68  00015c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  080060e8  080060e8  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060e8  080060e8  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000228  08006318  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08006318  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdb5  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd0  00000000  00000000  0002d00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035c7  00000000  00000000  0002fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb98  00000000  00000000  0003344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2614  00000000  00000000  0003efe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001315fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  00131650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00134f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00134f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c50 	.word	0x08005c50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08005c50 	.word	0x08005c50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_GPIO_EXTI_Callback>:
	}
}


HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb8:	d144      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bc0:	f001 fa74 	bl	80020ac <HAL_GPIO_TogglePin>
				printf("\t Blue button is pressed. \n");
 8000bc4:	4822      	ldr	r0, [pc, #136]	; (8000c50 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bc6:	f003 f929 	bl	8003e1c <puts>
		if (count ==1){
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d105      	bne.n	8000bde <HAL_GPIO_EXTI_Callback+0x36>
			count ++;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x6c>
		}
		else if(count ==2) {
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10a      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x54>
			tickstart = HAL_GetTick();
 8000be6:	f000 fe8d 	bl	8001904 <HAL_GetTick>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000bee:	6013      	str	r3, [r2, #0]
			count++;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x6c>
		} else if(count ==3){
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d107      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x6c>
			tickstart2 = HAL_GetTick();
 8000c04:	f000 fe7e 	bl	8001904 <HAL_GetTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c0c:	6013      	str	r3, [r2, #0]
			count = 1;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
		}

		if(flag == 1){
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d103      	bne.n	8000c24 <HAL_GPIO_EXTI_Callback+0x7c>
			flag =0;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
		else if((flag ==0) && ((tickstart2 - tickstart)<5000)){
			flag = 1;
		}

	}
}
 8000c22:	e00f      	b.n	8000c44 <HAL_GPIO_EXTI_Callback+0x9c>
		else if((flag ==0) && ((tickstart2 - tickstart)<5000)){
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10b      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x9c>
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d802      	bhi.n	8000c44 <HAL_GPIO_EXTI_Callback+0x9c>
			flag = 1;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	08005c68 	.word	0x08005c68
 8000c54:	2000030c 	.word	0x2000030c
 8000c58:	20000310 	.word	0x20000310
 8000c5c:	20000304 	.word	0x20000304
 8000c60:	20000308 	.word	0x20000308

08000c64 <main>:


int main(void)
{
 8000c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c68:	b08e      	sub	sp, #56	; 0x38
 8000c6a:	af06      	add	r7, sp, #24
	//creating delays using another method.
	initialise_monitor_handles(); // for semi-hosting support (printf)
 8000c6c:	f002 f9d8 	bl	8003020 <initialise_monitor_handles>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c70:	f000 fde4 	bl	800183c <HAL_Init>

	//initialise the HAL
int currentticktimer;
	/* Peripheral initializations using BSP functions */
		// read temperature sensor
	printf("Initialise");
 8000c74:	4849      	ldr	r0, [pc, #292]	; (8000d9c <main+0x138>)
 8000c76:	f003 f84b 	bl	8003d10 <iprintf>
//
//
//
//		}

		if(flag ==0){
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <main+0x13c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1fb      	bne.n	8000c7a <main+0x16>
		 MX_GPIO_Init();
 8000c82:	f000 f899 	bl	8000db8 <MX_GPIO_Init>
			BSP_ACCELERO_Init();
 8000c86:	f000 fb89 	bl	800139c <BSP_ACCELERO_Init>
			BSP_TSENSOR_Init();
 8000c8a:	f000 fbdd 	bl	8001448 <BSP_TSENSOR_Init>
			float accel_data[3];
					int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	809a      	strh	r2, [r3, #4]
					BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fbbd 	bl	8001418 <BSP_ACCELERO_AccGetXYZ>
					float temp_data;// read temp
					temp_data = BSP_TSENSOR_ReadTemp();
 8000c9e:	f000 fbef 	bl	8001480 <BSP_TSENSOR_ReadTemp>
 8000ca2:	ed87 0a06 	vstr	s0, [r7, #24]
		 for(int x =0 ; x<1000; x++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e072      	b.n	8000d92 <main+0x12e>

			 if(x ==250){
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2bfa      	cmp	r3, #250	; 0xfa
 8000cb0:	d14d      	bne.n	8000d4e <main+0xea>

				 // the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
				 		accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8000cb2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cbe:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000da4 <main+0x140>
 8000cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc6:	edc7 7a02 	vstr	s15, [r7, #8]
				 		accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8000cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000da4 <main+0x140>
 8000cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cde:	edc7 7a03 	vstr	s15, [r7, #12]
				 		accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8000ce2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cee:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000da4 <main+0x140>
 8000cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf6:	edc7 7a04 	vstr	s15, [r7, #16]
				 		printf("Accel X : %f; Accel Y : %f; Accel Z : %f; Temperature : %f\n", accel_data[0], accel_data[1], accel_data[2], temp_data);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc23 	bl	8000548 <__aeabi_f2d>
 8000d02:	4682      	mov	sl, r0
 8000d04:	468b      	mov	fp, r1
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fc1d 	bl	8000548 <__aeabi_f2d>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc17 	bl	8000548 <__aeabi_f2d>
 8000d1a:	4680      	mov	r8, r0
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	69b8      	ldr	r0, [r7, #24]
 8000d20:	f7ff fc12 	bl	8000548 <__aeabi_f2d>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d30:	e9cd 4500 	strd	r4, r5, [sp]
 8000d34:	4652      	mov	r2, sl
 8000d36:	465b      	mov	r3, fp
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <main+0x144>)
 8000d3a:	f002 ffe9 	bl	8003d10 <iprintf>
				 		x++;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3301      	adds	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
						 printf("%d\n",x);
 8000d44:	69f9      	ldr	r1, [r7, #28]
 8000d46:	4819      	ldr	r0, [pc, #100]	; (8000dac <main+0x148>)
 8000d48:	f002 ffe2 	bl	8003d10 <iprintf>
						 break;
 8000d4c:	e025      	b.n	8000d9a <main+0x136>
			 }
			 else if(x == 500){
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d54:	d105      	bne.n	8000d62 <main+0xfe>
				 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <main+0x14c>)
 8000d5c:	f001 f9a6 	bl	80020ac <HAL_GPIO_TogglePin>
 8000d60:	e014      	b.n	8000d8c <main+0x128>
			 }
			 else if(x == 750){
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d108      	bne.n	8000d7e <main+0x11a>
				 currentticktimer = HAL_GetTick();
 8000d6c:	f000 fdca 	bl	8001904 <HAL_GetTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	617b      	str	r3, [r7, #20]
				 		printf("The current timing is : %d\n", currentticktimer );
 8000d74:	6979      	ldr	r1, [r7, #20]
 8000d76:	480f      	ldr	r0, [pc, #60]	; (8000db4 <main+0x150>)
 8000d78:	f002 ffca 	bl	8003d10 <iprintf>
 8000d7c:	e006      	b.n	8000d8c <main+0x128>
			 }
			 else if(x>750){
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000d84:	4293      	cmp	r3, r2
 8000d86:	dd01      	ble.n	8000d8c <main+0x128>
				 x =0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
		 for(int x =0 ; x<1000; x++){
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d98:	db88      	blt.n	8000cac <main+0x48>
		if(flag ==0){
 8000d9a:	e76e      	b.n	8000c7a <main+0x16>
 8000d9c:	08005c84 	.word	0x08005c84
 8000da0:	20000308 	.word	0x20000308
 8000da4:	42c80000 	.word	0x42c80000
 8000da8:	08005c90 	.word	0x08005c90
 8000dac:	08005ccc 	.word	0x08005ccc
 8000db0:	48000400 	.word	0x48000400
 8000db4:	08005cd0 	.word	0x08005cd0

08000db8 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_GPIO_Init+0x5c>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_GPIO_Init+0x5c>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_GPIO_Init+0x5c>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <MX_GPIO_Init+0x60>)
 8000dec:	f001 f946 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_GPIO_Init+0x60>)
 8000e08:	f000 fe9a 	bl	8001b40 <HAL_GPIO_Init>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_I2C_MspInit+0x7c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d128      	bne.n	8000ed8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000ebc:	f000 fe40 	bl	8001b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000400 	.word	0x48000400

08000eec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_I2C_MspDeInit+0x30>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10a      	bne.n	8000f14 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_I2C_MspDeInit+0x34>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_I2C_MspDeInit+0x34>)
 8000f04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8000f0a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_I2C_MspDeInit+0x38>)
 8000f10:	f000 ffc0 	bl	8001e94 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 fcb0 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f88:	2020      	movs	r0, #32
 8000f8a:	f001 f8a9 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f8e:	2040      	movs	r0, #64	; 0x40
 8000f90:	f001 f8a6 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f94:	2080      	movs	r0, #128	; 0x80
 8000f96:	f001 f8a3 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f9e:	f001 f89f 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000faa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fae:	f001 f897 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000fb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fb6:	f001 f893 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fbe:	f001 f88f 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fc6:	f001 f88b 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000fca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fce:	f001 f887 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI1_IRQHandler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f001 f880 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x50>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x16>
		heap_end = &end;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <_sbrk+0x50>)
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <_sbrk+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <_sbrk+0x50>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <_sbrk+0x50>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	466a      	mov	r2, sp
 800100a:	4293      	cmp	r3, r2
 800100c:	d907      	bls.n	800101e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800100e:	f002 f881 	bl	8003114 <__errno>
 8001012:	4603      	mov	r3, r0
 8001014:	220c      	movs	r2, #12
 8001016:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	e006      	b.n	800102c <_sbrk+0x48>
	}

	heap_end += incr;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <_sbrk+0x50>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a03      	ldr	r2, [pc, #12]	; (8001034 <_sbrk+0x50>)
 8001028:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000244 	.word	0x20000244
 8001038:	200003f8 	.word	0x200003f8

0800103c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <SystemInit+0x64>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <SystemInit+0x64>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <SystemInit+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <SystemInit+0x68>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <SystemInit+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SystemInit+0x68>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <SystemInit+0x68>)
 8001068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800106c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <SystemInit+0x68>)
 8001074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <SystemInit+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <SystemInit+0x68>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <SystemInit+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SystemInit+0x64>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	40021000 	.word	0x40021000

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ae:	e003      	b.n	80010b8 <LoopCopyDataInit>

080010b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010b6:	3104      	adds	r1, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80010bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c0:	d3f6      	bcc.n	80010b0 <CopyDataInit>
	ldr	r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c4:	e002      	b.n	80010cc <LoopFillZerobss>

080010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c8:	f842 3b04 	str.w	r3, [r2], #4

080010cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <LoopForever+0x16>)
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d0:	d3f9      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d2:	f7ff ffb3 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 f919 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f7ff fdc3 	bl	8000c64 <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010e4:	080060f0 	.word	0x080060f0
	ldr	r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010ec:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 80010f0:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 80010f4:	200003f4 	.word	0x200003f4

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>
	...

080010fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <I2Cx_MspInit+0xa8>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800111c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001120:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	481b      	ldr	r0, [pc, #108]	; (80011a8 <I2Cx_MspInit+0xac>)
 800113a:	f000 fd01 	bl	8001b40 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <I2Cx_MspInit+0xac>)
 8001146:	f000 fcfb 	bl	8001b40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <I2Cx_MspInit+0xa8>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <I2Cx_MspInit+0xa8>)
 8001174:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001178:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	2021      	movs	r0, #33	; 0x21
 8001180:	f000 fca7 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001184:	2021      	movs	r0, #33	; 0x21
 8001186:	f000 fcc0 	bl	8001b0a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	210f      	movs	r1, #15
 800118e:	2022      	movs	r0, #34	; 0x22
 8001190:	f000 fc9f 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001194:	2022      	movs	r0, #34	; 0x22
 8001196:	f000 fcb8 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <I2Cx_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a11      	ldr	r2, [pc, #68]	; (8001204 <I2Cx_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff89 	bl	80010fc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 ff90 	bl	8002110 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80011f0:	2100      	movs	r1, #0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f001 fc94 	bl	8002b20 <HAL_I2CEx_ConfigAnalogFilter>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005800 	.word	0x40005800
 8001204:	00702681 	.word	0x00702681

08001208 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af04      	add	r7, sp, #16
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4603      	mov	r3, r0
 8001218:	72fb      	strb	r3, [r7, #11]
 800121a:	460b      	mov	r3, r1
 800121c:	813b      	strh	r3, [r7, #8]
 800121e:	4613      	mov	r3, r2
 8001220:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	b299      	uxth	r1, r3
 800122a:	88f8      	ldrh	r0, [r7, #6]
 800122c:	893a      	ldrh	r2, [r7, #8]
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f001 f938 	bl	80024b4 <HAL_I2C_Mem_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	4619      	mov	r1, r3
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f832 	bl	80012bc <I2Cx_Error>
  }
  return status;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b08a      	sub	sp, #40	; 0x28
 8001266:	af04      	add	r7, sp, #16
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	4608      	mov	r0, r1
 800126c:	4611      	mov	r1, r2
 800126e:	461a      	mov	r2, r3
 8001270:	4603      	mov	r3, r0
 8001272:	72fb      	strb	r3, [r7, #11]
 8001274:	460b      	mov	r3, r1
 8001276:	813b      	strh	r3, [r7, #8]
 8001278:	4613      	mov	r3, r2
 800127a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b299      	uxth	r1, r3
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	893a      	ldrh	r2, [r7, #8]
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fff7 	bl	800228c <HAL_I2C_Mem_Write>
 800129e:	4603      	mov	r3, r0
 80012a0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	4619      	mov	r1, r3
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f805 	bl	80012bc <I2Cx_Error>
  }
  return status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 ffb0 	bl	800222e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff6c 	bl	80011ac <I2Cx_Init>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <SENSOR_IO_Init+0x10>)
 80012e2:	f7ff ff63 	bl	80011ac <I2Cx_Init>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000394 	.word	0x20000394

080012f0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	b29a      	uxth	r2, r3
 8001306:	79f9      	ldrb	r1, [r7, #7]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	1d7b      	adds	r3, r7, #5
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <SENSOR_IO_Write+0x30>)
 8001314:	f7ff ffa5 	bl	8001262 <I2Cx_WriteMultiple>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000394 	.word	0x20000394

08001324 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	460a      	mov	r2, r1
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	b29a      	uxth	r2, r3
 800133c:	79f9      	ldrb	r1, [r7, #7]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	f107 030f 	add.w	r3, r7, #15
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <SENSOR_IO_Read+0x38>)
 800134c:	f7ff ff5c 	bl	8001208 <I2Cx_ReadMultiple>

  return read_value;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000394 	.word	0x20000394

08001360 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	603a      	str	r2, [r7, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	460b      	mov	r3, r1
 8001370:	71bb      	strb	r3, [r7, #6]
 8001372:	4613      	mov	r3, r2
 8001374:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	b29a      	uxth	r2, r3
 800137a:	79f9      	ldrb	r1, [r7, #7]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <SENSOR_IO_ReadMultiple+0x38>)
 8001388:	f7ff ff3e 	bl	8001208 <I2Cx_ReadMultiple>
 800138c:	4603      	mov	r3, r0
 800138e:	b29b      	uxth	r3, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000394 	.word	0x20000394

0800139c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80013a6:	2300      	movs	r3, #0
 80013a8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <BSP_ACCELERO_Init+0x74>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4798      	blx	r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b6a      	cmp	r3, #106	; 0x6a
 80013b4:	d002      	beq.n	80013bc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e024      	b.n	8001406 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <BSP_ACCELERO_Init+0x78>)
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <BSP_ACCELERO_Init+0x74>)
 80013c0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80013c2:	2330      	movs	r3, #48	; 0x30
 80013c4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80013ca:	2300      	movs	r3, #0
 80013cc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80013da:	797a      	ldrb	r2, [r7, #5]
 80013dc:	7abb      	ldrb	r3, [r7, #10]
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80013e4:	7a3b      	ldrb	r3, [r7, #8]
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <BSP_ACCELERO_Init+0x78>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	89ba      	ldrh	r2, [r7, #12]
 8001402:	4610      	mov	r0, r2
 8001404:	4798      	blx	r3
  }  

  return ret;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000014 	.word	0x20000014
 8001414:	20000248 	.word	0x20000248

08001418 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
    }
  }
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000248 	.word	0x20000248

08001448 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <BSP_TSENSOR_Init+0x30>)
 8001454:	4a09      	ldr	r2, [pc, #36]	; (800147c <BSP_TSENSOR_Init+0x34>)
 8001456:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001458:	f7ff ff40 	bl	80012dc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <BSP_TSENSOR_Init+0x30>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2100      	movs	r1, #0
 8001464:	20be      	movs	r0, #190	; 0xbe
 8001466:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000024c 	.word	0x2000024c
 800147c:	20000004 	.word	0x20000004

08001480 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <BSP_TSENSOR_ReadTemp+0x18>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	20be      	movs	r0, #190	; 0xbe
 800148c:	4798      	blx	r3
 800148e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000024c 	.word	0x2000024c

0800149c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2120      	movs	r1, #32
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff38 	bl	8001324 <SENSOR_IO_Read>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f023 0304 	bic.w	r3, r3, #4
 80014be:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2120      	movs	r1, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff01 	bl	80012f0 <SENSOR_IO_Write>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b088      	sub	sp, #32
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2d8      	uxtb	r0, r3
 8001504:	f107 0208 	add.w	r2, r7, #8
 8001508:	2302      	movs	r3, #2
 800150a:	21b2      	movs	r1, #178	; 0xb2
 800150c:	f7ff ff28 	bl	8001360 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2135      	movs	r1, #53	; 0x35
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff04 	bl	8001324 <SENSOR_IO_Read>
 800151c:	4603      	mov	r3, r0
 800151e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800152a:	b21a      	sxth	r2, r3
 800152c:	7a3b      	ldrb	r3, [r7, #8]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	019b      	lsls	r3, r3, #6
 8001538:	b21b      	sxth	r3, r3
 800153a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153e:	b21a      	sxth	r2, r3
 8001540:	7a7b      	ldrb	r3, [r7, #9]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001548:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800154c:	10db      	asrs	r3, r3, #3
 800154e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001550:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001554:	10db      	asrs	r3, r3, #3
 8001556:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	b2d8      	uxtb	r0, r3
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	2304      	movs	r3, #4
 8001562:	21bc      	movs	r1, #188	; 0xbc
 8001564:	f7ff fefc 	bl	8001360 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001568:	7a7b      	ldrb	r3, [r7, #9]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	7a3b      	ldrb	r3, [r7, #8]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7abb      	ldrb	r3, [r7, #10]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	b2d8      	uxtb	r0, r3
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	2302      	movs	r3, #2
 800158e:	21aa      	movs	r1, #170	; 0xaa
 8001590:	f7ff fee6 	bl	8001360 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7a3b      	ldrb	r3, [r7, #8]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80015a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80015ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	ee07 3a90 	vmov	s15, r3
}
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001612:	2110      	movs	r1, #16
 8001614:	20d4      	movs	r0, #212	; 0xd4
 8001616:	f7ff fe85 	bl	8001324 <SENSOR_IO_Read>
 800161a:	4603      	mov	r3, r0
 800161c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800162a:	7bba      	ldrb	r2, [r7, #14]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4313      	orrs	r3, r2
 8001630:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	461a      	mov	r2, r3
 8001636:	2110      	movs	r1, #16
 8001638:	20d4      	movs	r0, #212	; 0xd4
 800163a:	f7ff fe59 	bl	80012f0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800163e:	2112      	movs	r1, #18
 8001640:	20d4      	movs	r0, #212	; 0xd4
 8001642:	f7ff fe6f 	bl	8001324 <SENSOR_IO_Read>
 8001646:	4603      	mov	r3, r0
 8001648:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b29b      	uxth	r3, r3
 8001650:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001658:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800165a:	7bba      	ldrb	r2, [r7, #14]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4313      	orrs	r3, r2
 8001660:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	461a      	mov	r2, r3
 8001666:	2112      	movs	r1, #18
 8001668:	20d4      	movs	r0, #212	; 0xd4
 800166a:	f7ff fe41 	bl	80012f0 <SENSOR_IO_Write>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001680:	2110      	movs	r1, #16
 8001682:	20d4      	movs	r0, #212	; 0xd4
 8001684:	f7ff fe4e 	bl	8001324 <SENSOR_IO_Read>
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	461a      	mov	r2, r3
 8001698:	2110      	movs	r1, #16
 800169a:	20d4      	movs	r0, #212	; 0xd4
 800169c:	f7ff fe28 	bl	80012f0 <SENSOR_IO_Write>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80016ac:	f7ff fe16 	bl	80012dc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80016b0:	210f      	movs	r1, #15
 80016b2:	20d4      	movs	r0, #212	; 0xd4
 80016b4:	f7ff fe36 	bl	8001324 <SENSOR_IO_Read>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}

080016be <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80016cc:	2115      	movs	r1, #21
 80016ce:	20d4      	movs	r0, #212	; 0xd4
 80016d0:	f7ff fe28 	bl	8001324 <SENSOR_IO_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f023 0310 	bic.w	r3, r3, #16
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2115      	movs	r1, #21
 80016f4:	20d4      	movs	r0, #212	; 0xd4
 80016f6:	f7ff fdfb 	bl	80012f0 <SENSOR_IO_Write>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800170c:	2300      	movs	r3, #0
 800170e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800171a:	2110      	movs	r1, #16
 800171c:	20d4      	movs	r0, #212	; 0xd4
 800171e:	f7ff fe01 	bl	8001324 <SENSOR_IO_Read>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001726:	f107 0208 	add.w	r2, r7, #8
 800172a:	2306      	movs	r3, #6
 800172c:	2128      	movs	r1, #40	; 0x28
 800172e:	20d4      	movs	r0, #212	; 0xd4
 8001730:	f7ff fe16 	bl	8001360 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	77fb      	strb	r3, [r7, #31]
 8001738:	e01f      	b.n	800177a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3301      	adds	r3, #1
 8001740:	f107 0220 	add.w	r2, r7, #32
 8001744:	4413      	add	r3, r2
 8001746:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	7ffb      	ldrb	r3, [r7, #31]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	f107 0120 	add.w	r1, r7, #32
 8001758:	440b      	add	r3, r1
 800175a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	b212      	sxth	r2, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	f107 0120 	add.w	r1, r7, #32
 800176e:	440b      	add	r3, r1
 8001770:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	3301      	adds	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d9dc      	bls.n	800173a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d828      	bhi.n	80017dc <LSM6DSL_AccReadXYZ+0xd8>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <LSM6DSL_AccReadXYZ+0x8c>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017c5 	.word	0x080017c5
 8001794:	080017dd 	.word	0x080017dd
 8001798:	080017dd 	.word	0x080017dd
 800179c:	080017dd 	.word	0x080017dd
 80017a0:	080017d7 	.word	0x080017d7
 80017a4:	080017dd 	.word	0x080017dd
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	080017dd 	.word	0x080017dd
 80017b0:	080017cb 	.word	0x080017cb
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	080017dd 	.word	0x080017dd
 80017bc:	080017dd 	.word	0x080017dd
 80017c0:	080017d1 	.word	0x080017d1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <LSM6DSL_AccReadXYZ+0x128>)
 80017c6:	61bb      	str	r3, [r7, #24]
    break;
 80017c8:	e008      	b.n	80017dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <LSM6DSL_AccReadXYZ+0x12c>)
 80017cc:	61bb      	str	r3, [r7, #24]
    break;
 80017ce:	e005      	b.n	80017dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <LSM6DSL_AccReadXYZ+0x130>)
 80017d2:	61bb      	str	r3, [r7, #24]
    break;
 80017d4:	e002      	b.n	80017dc <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <LSM6DSL_AccReadXYZ+0x134>)
 80017d8:	61bb      	str	r3, [r7, #24]
    break;    
 80017da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	77fb      	strb	r3, [r7, #31]
 80017e0:	e01b      	b.n	800181a <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	f107 0220 	add.w	r2, r7, #32
 80017ea:	4413      	add	r3, r2
 80017ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180c:	ee17 2a90 	vmov	r2, s15
 8001810:	b212      	sxth	r2, r2
 8001812:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001814:	7ffb      	ldrb	r3, [r7, #31]
 8001816:	3301      	adds	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d9e0      	bls.n	80017e2 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	3d79db23 	.word	0x3d79db23
 8001830:	3df9db23 	.word	0x3df9db23
 8001834:	3e79db23 	.word	0x3e79db23
 8001838:	3ef9db23 	.word	0x3ef9db23

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001846:	2003      	movs	r0, #3
 8001848:	f000 f938 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f80d 	bl	800186c <HAL_InitTick>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	e001      	b.n	8001862 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185e:	f7ff fadd 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001862:	79fb      	ldrb	r3, [r7, #7]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_InitTick+0x68>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_InitTick+0x6c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_InitTick+0x68>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800188c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f946 	bl	8001b26 <HAL_SYSTICK_Config>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d809      	bhi.n	80018ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a6:	2200      	movs	r2, #0
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ae:	f000 f910 	bl	8001ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x70>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e007      	b.n	80018ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e004      	b.n	80018ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e001      	b.n	80018ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000004c 	.word	0x2000004c
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000048 	.word	0x20000048

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_IncTick+0x1c>)
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	200003e0 	.word	0x200003e0
 8001900:	2000004c 	.word	0x2000004c

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200003e0 	.word	0x200003e0

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e17f      	b.n	8001e50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8171 	beq.w	8001e4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d00b      	beq.n	8001b88 <HAL_GPIO_Init+0x48>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d118      	bne.n	8001c28 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x128>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d123      	bne.n	8001cb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	6939      	ldr	r1, [r7, #16]
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80ac 	beq.w	8001e4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	4a5e      	ldr	r2, [pc, #376]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_GPIO_Init+0x330>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d0a:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_GPIO_Init+0x334>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x242>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_GPIO_Init+0x338>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x23e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <HAL_GPIO_Init+0x33c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x23a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x340>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x236>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_GPIO_Init+0x344>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x232>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_GPIO_Init+0x348>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x22e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x34c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x22a>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e00c      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00a      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x244>
 8001d82:	2300      	movs	r3, #0
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d94:	4937      	ldr	r1, [pc, #220]	; (8001e74 <HAL_GPIO_Init+0x334>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc6:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_GPIO_Init+0x350>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f47f ae78 	bne.w	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	48000c00 	.word	0x48000c00
 8001e84:	48001000 	.word	0x48001000
 8001e88:	48001400 	.word	0x48001400
 8001e8c:	48001800 	.word	0x48001800
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ea2:	e0cd      	b.n	8002040 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80c0 	beq.w	800203a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001eba:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_GPIO_DeInit+0x1c8>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ee2:	d025      	beq.n	8001f30 <HAL_GPIO_DeInit+0x9c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_GPIO_DeInit+0x1cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d01f      	beq.n	8001f2c <HAL_GPIO_DeInit+0x98>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a5d      	ldr	r2, [pc, #372]	; (8002064 <HAL_GPIO_DeInit+0x1d0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d019      	beq.n	8001f28 <HAL_GPIO_DeInit+0x94>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <HAL_GPIO_DeInit+0x1d4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_DeInit+0x90>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <HAL_GPIO_DeInit+0x1d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_DeInit+0x8c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_GPIO_DeInit+0x1dc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_DeInit+0x88>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a59      	ldr	r2, [pc, #356]	; (8002074 <HAL_GPIO_DeInit+0x1e0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_DeInit+0x84>
 8001f14:	2306      	movs	r3, #6
 8001f16:	e00c      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f18:	2307      	movs	r3, #7
 8001f1a:	e00a      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e008      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_DeInit+0x9e>
 8001f30:	2300      	movs	r3, #0
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d132      	bne.n	8001fa8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	494b      	ldr	r1, [pc, #300]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f50:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4947      	ldr	r1, [pc, #284]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4944      	ldr	r1, [pc, #272]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4940      	ldr	r1, [pc, #256]	; (8002078 <HAL_GPIO_DeInit+0x1e4>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001f8a:	4a34      	ldr	r2, [pc, #208]	; (800205c <HAL_GPIO_DeInit+0x1c8>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	4830      	ldr	r0, [pc, #192]	; (800205c <HAL_GPIO_DeInit+0x1c8>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	08d2      	lsrs	r2, r2, #3
 8001fdc:	4019      	ands	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2103      	movs	r1, #3
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2103      	movs	r1, #3
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202a:	2101      	movs	r1, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f af2b 	bne.w	8001ea4 <HAL_GPIO_DeInit+0x10>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	48001000 	.word	0x48001000
 8002070:	48001400 	.word	0x48001400
 8002074:	48001800 	.word	0x48001800
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fd52 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e081      	b.n	8002226 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fe94 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002160:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002170:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e006      	b.n	8002198 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002196:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d104      	bne.n	80021aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69d9      	ldr	r1, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e021      	b.n	8002284 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7fe fe47 	bl	8000eec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 80f9 	bne.w	80024a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x34>
 80022ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0ed      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Write+0x4e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0e6      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e2:	f7ff fb0f 	bl	8001904 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2319      	movs	r3, #25
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fac3 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d1      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232c:	88f8      	ldrh	r0, [r7, #6]
 800232e:	893a      	ldrh	r2, [r7, #8]
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4603      	mov	r3, r0
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f9d3 	bl	80026e8 <I2C_RequestMemoryWrite>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0a9      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d90e      	bls.n	800237c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	b2da      	uxtb	r2, r3
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fba5 	bl	8002ac4 <I2C_TransferConfig>
 800237a:	e00f      	b.n	800239c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	b2da      	uxtb	r2, r3
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fb94 	bl	8002ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 faad 	bl	8002900 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e07b      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d034      	beq.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d130      	bne.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	2200      	movs	r2, #0
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa3f 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04d      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d90e      	bls.n	8002434 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fb49 	bl	8002ac4 <I2C_TransferConfig>
 8002432:	e00f      	b.n	8002454 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb38 	bl	8002ac4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d19e      	bne.n	800239c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fa8c 	bl	8002980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01a      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_I2C_Mem_Write+0x224>)
 8002486:	400b      	ands	r3, r1
 8002488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fe00e800 	.word	0xfe00e800

080024b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f040 80fd 	bne.w	80026d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x34>
 80024e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0f1      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Mem_Read+0x4e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e0ea      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800250a:	f7ff f9fb 	bl	8001904 <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f9af 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0d5      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2222      	movs	r2, #34	; 0x22
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002554:	88f8      	ldrh	r0, [r7, #6]
 8002556:	893a      	ldrh	r2, [r7, #8]
 8002558:	8979      	ldrh	r1, [r7, #10]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4603      	mov	r3, r0
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f913 	bl	8002790 <I2C_RequestMemoryRead>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0ad      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2bff      	cmp	r3, #255	; 0xff
 8002584:	d90e      	bls.n	80025a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	22ff      	movs	r2, #255	; 0xff
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	4b52      	ldr	r3, [pc, #328]	; (80026e0 <HAL_I2C_Mem_Read+0x22c>)
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fa91 	bl	8002ac4 <I2C_TransferConfig>
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_I2C_Mem_Read+0x22c>)
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa80 	bl	8002ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2200      	movs	r2, #0
 80025cc:	2104      	movs	r1, #4
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f956 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07c      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d034      	beq.n	8002684 <HAL_I2C_Mem_Read+0x1d0>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	2b00      	cmp	r3, #0
 8002620:	d130      	bne.n	8002684 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f927 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e04d      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	d90e      	bls.n	8002664 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	b2da      	uxtb	r2, r3
 8002652:	8979      	ldrh	r1, [r7, #10]
 8002654:	2300      	movs	r3, #0
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fa31 	bl	8002ac4 <I2C_TransferConfig>
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa20 	bl	8002ac4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d19a      	bne.n	80025c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f974 	bl	8002980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01a      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2220      	movs	r2, #32
 80026a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_I2C_Mem_Read+0x230>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	80002400 	.word	0x80002400
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <I2C_RequestMemoryWrite+0xa4>)
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f9d7 	bl	8002ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8f0 	bl	8002900 <I2C_WaitOnTXISFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e02c      	b.n	8002784 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
 800273a:	e015      	b.n	8002768 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	69b9      	ldr	r1, [r7, #24]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8d6 	bl	8002900 <I2C_WaitOnTXISFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e012      	b.n	8002784 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800275e:	893b      	ldrh	r3, [r7, #8]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2200      	movs	r2, #0
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f884 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	80002000 	.word	0x80002000

08002790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <I2C_RequestMemoryRead+0xa4>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f984 	bl	8002ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f89d 	bl	8002900 <I2C_WaitOnTXISFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e02c      	b.n	800282a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d6:	893b      	ldrh	r3, [r7, #8]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
 80027e0:	e015      	b.n	800280e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f883 	bl	8002900 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e012      	b.n	800282a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002804:	893b      	ldrh	r3, [r7, #8]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2200      	movs	r2, #0
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f831 	bl	8002880 <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	80002000 	.word	0x80002000

08002838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d103      	bne.n	8002856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d007      	beq.n	8002874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	619a      	str	r2, [r3, #24]
  }
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002890:	e022      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002898:	d01e      	beq.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289a:	f7ff f833 	bl	8001904 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d113      	bne.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e00f      	b.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d0cd      	beq.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800290c:	e02c      	b.n	8002968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f870 	bl	80029f8 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02a      	b.n	8002978 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d01e      	beq.n	8002968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe ffeb 	bl	8001904 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e007      	b.n	8002978 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d1cb      	bne.n	800290e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800298c:	e028      	b.n	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f830 	bl	80029f8 <I2C_IsAcknowledgeFailed>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e026      	b.n	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7fe ffaf 	bl	8001904 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e007      	b.n	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d1cf      	bne.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d151      	bne.n	8002ab6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a12:	e022      	b.n	8002a5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1a:	d01e      	beq.n	8002a5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7fe ff72 	bl	8001904 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <I2C_IsAcknowledgeFailed+0x3a>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d113      	bne.n	8002a5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02e      	b.n	8002ab8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d1d5      	bne.n	8002a14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2220      	movs	r2, #32
 8002a76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fedd 	bl	8002838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fe00e800 	.word	0xfe00e800

08002ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	0d5b      	lsrs	r3, r3, #21
 8002ae0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <I2C_TransferConfig+0x58>)
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	ea02 0103 	and.w	r1, r2, r3
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002af4:	7a7b      	ldrb	r3, [r7, #9]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	03ff63ff 	.word	0x03ff63ff

08002b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d138      	bne.n	8002ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e032      	b.n	8002baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <findslot>:
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <findslot+0x2c>)
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	b118      	cbz	r0, 8002bca <findslot+0x12>
 8002bc2:	6983      	ldr	r3, [r0, #24]
 8002bc4:	b90b      	cbnz	r3, 8002bca <findslot+0x12>
 8002bc6:	f000 fb03 	bl	80031d0 <__sinit>
 8002bca:	2c13      	cmp	r4, #19
 8002bcc:	d807      	bhi.n	8002bde <findslot+0x26>
 8002bce:	4806      	ldr	r0, [pc, #24]	; (8002be8 <findslot+0x30>)
 8002bd0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002bd4:	3201      	adds	r2, #1
 8002bd6:	d002      	beq.n	8002bde <findslot+0x26>
 8002bd8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	2000      	movs	r0, #0
 8002be0:	e7fc      	b.n	8002bdc <findslot+0x24>
 8002be2:	bf00      	nop
 8002be4:	20000058 	.word	0x20000058
 8002be8:	2000025c 	.word	0x2000025c

08002bec <checkerror>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	d109      	bne.n	8002c08 <checkerror+0x1c>
 8002bf4:	f000 fa8e 	bl	8003114 <__errno>
 8002bf8:	2613      	movs	r6, #19
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	2700      	movs	r7, #0
 8002bfe:	4630      	mov	r0, r6
 8002c00:	4639      	mov	r1, r7
 8002c02:	beab      	bkpt	0x00ab
 8002c04:	4606      	mov	r6, r0
 8002c06:	602e      	str	r6, [r5, #0]
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c0c <error>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	4604      	mov	r4, r0
 8002c10:	f000 fa80 	bl	8003114 <__errno>
 8002c14:	2613      	movs	r6, #19
 8002c16:	4605      	mov	r5, r0
 8002c18:	2700      	movs	r7, #0
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	beab      	bkpt	0x00ab
 8002c20:	4606      	mov	r6, r0
 8002c22:	602e      	str	r6, [r5, #0]
 8002c24:	4620      	mov	r0, r4
 8002c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c28 <_swiread>:
 8002c28:	b530      	push	{r4, r5, lr}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c30:	9203      	str	r2, [sp, #12]
 8002c32:	2406      	movs	r4, #6
 8002c34:	ad01      	add	r5, sp, #4
 8002c36:	4620      	mov	r0, r4
 8002c38:	4629      	mov	r1, r5
 8002c3a:	beab      	bkpt	0x00ab
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ffd4 	bl	8002bec <checkerror>
 8002c44:	b005      	add	sp, #20
 8002c46:	bd30      	pop	{r4, r5, pc}

08002c48 <_read>:
 8002c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c4a:	4615      	mov	r5, r2
 8002c4c:	9101      	str	r1, [sp, #4]
 8002c4e:	f7ff ffb3 	bl	8002bb8 <findslot>
 8002c52:	9901      	ldr	r1, [sp, #4]
 8002c54:	4604      	mov	r4, r0
 8002c56:	b938      	cbnz	r0, 8002c68 <_read+0x20>
 8002c58:	f000 fa5c 	bl	8003114 <__errno>
 8002c5c:	2309      	movs	r3, #9
 8002c5e:	6003      	str	r3, [r0, #0]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c64:	b003      	add	sp, #12
 8002c66:	bd30      	pop	{r4, r5, pc}
 8002c68:	6800      	ldr	r0, [r0, #0]
 8002c6a:	462a      	mov	r2, r5
 8002c6c:	f7ff ffdc 	bl	8002c28 <_swiread>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d0f7      	beq.n	8002c64 <_read+0x1c>
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	1a2a      	subs	r2, r5, r0
 8002c78:	4413      	add	r3, r2
 8002c7a:	6063      	str	r3, [r4, #4]
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	e7f1      	b.n	8002c64 <_read+0x1c>

08002c80 <_swilseek>:
 8002c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c82:	460c      	mov	r4, r1
 8002c84:	4616      	mov	r6, r2
 8002c86:	f7ff ff97 	bl	8002bb8 <findslot>
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	b940      	cbnz	r0, 8002ca0 <_swilseek+0x20>
 8002c8e:	f000 fa41 	bl	8003114 <__errno>
 8002c92:	2309      	movs	r3, #9
 8002c94:	6003      	str	r3, [r0, #0]
 8002c96:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	b003      	add	sp, #12
 8002c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca0:	2e02      	cmp	r6, #2
 8002ca2:	d903      	bls.n	8002cac <_swilseek+0x2c>
 8002ca4:	f000 fa36 	bl	8003114 <__errno>
 8002ca8:	2316      	movs	r3, #22
 8002caa:	e7f3      	b.n	8002c94 <_swilseek+0x14>
 8002cac:	2e01      	cmp	r6, #1
 8002cae:	d112      	bne.n	8002cd6 <_swilseek+0x56>
 8002cb0:	6843      	ldr	r3, [r0, #4]
 8002cb2:	18e4      	adds	r4, r4, r3
 8002cb4:	d4f6      	bmi.n	8002ca4 <_swilseek+0x24>
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	260a      	movs	r6, #10
 8002cba:	e9cd 3400 	strd	r3, r4, [sp]
 8002cbe:	466f      	mov	r7, sp
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	4639      	mov	r1, r7
 8002cc4:	beab      	bkpt	0x00ab
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f7ff ff8f 	bl	8002bec <checkerror>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	dbe1      	blt.n	8002c96 <_swilseek+0x16>
 8002cd2:	606c      	str	r4, [r5, #4]
 8002cd4:	e7e1      	b.n	8002c9a <_swilseek+0x1a>
 8002cd6:	2e02      	cmp	r6, #2
 8002cd8:	d1ed      	bne.n	8002cb6 <_swilseek+0x36>
 8002cda:	6803      	ldr	r3, [r0, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	260c      	movs	r6, #12
 8002ce0:	466f      	mov	r7, sp
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	beab      	bkpt	0x00ab
 8002ce8:	4606      	mov	r6, r0
 8002cea:	4630      	mov	r0, r6
 8002cec:	f7ff ff7e 	bl	8002bec <checkerror>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d0d0      	beq.n	8002c96 <_swilseek+0x16>
 8002cf4:	4404      	add	r4, r0
 8002cf6:	e7de      	b.n	8002cb6 <_swilseek+0x36>

08002cf8 <_lseek>:
 8002cf8:	f7ff bfc2 	b.w	8002c80 <_swilseek>

08002cfc <_swiwrite>:
 8002cfc:	b530      	push	{r4, r5, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002d04:	9203      	str	r2, [sp, #12]
 8002d06:	2405      	movs	r4, #5
 8002d08:	ad01      	add	r5, sp, #4
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	beab      	bkpt	0x00ab
 8002d10:	4604      	mov	r4, r0
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff ff6a 	bl	8002bec <checkerror>
 8002d18:	b005      	add	sp, #20
 8002d1a:	bd30      	pop	{r4, r5, pc}

08002d1c <_write>:
 8002d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d1e:	4615      	mov	r5, r2
 8002d20:	9101      	str	r1, [sp, #4]
 8002d22:	f7ff ff49 	bl	8002bb8 <findslot>
 8002d26:	9901      	ldr	r1, [sp, #4]
 8002d28:	4604      	mov	r4, r0
 8002d2a:	b930      	cbnz	r0, 8002d3a <_write+0x1e>
 8002d2c:	f000 f9f2 	bl	8003114 <__errno>
 8002d30:	2309      	movs	r3, #9
 8002d32:	6003      	str	r3, [r0, #0]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d38:	e012      	b.n	8002d60 <_write+0x44>
 8002d3a:	6800      	ldr	r0, [r0, #0]
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	f7ff ffdd 	bl	8002cfc <_swiwrite>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	dbf6      	blt.n	8002d34 <_write+0x18>
 8002d46:	6862      	ldr	r2, [r4, #4]
 8002d48:	1a2b      	subs	r3, r5, r0
 8002d4a:	441a      	add	r2, r3
 8002d4c:	42a8      	cmp	r0, r5
 8002d4e:	6062      	str	r2, [r4, #4]
 8002d50:	d105      	bne.n	8002d5e <_write+0x42>
 8002d52:	2000      	movs	r0, #0
 8002d54:	b003      	add	sp, #12
 8002d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d5a:	f7ff bf57 	b.w	8002c0c <error>
 8002d5e:	4618      	mov	r0, r3
 8002d60:	b003      	add	sp, #12
 8002d62:	bd30      	pop	{r4, r5, pc}

08002d64 <_swiclose>:
 8002d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d66:	2402      	movs	r4, #2
 8002d68:	9001      	str	r0, [sp, #4]
 8002d6a:	ad01      	add	r5, sp, #4
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	beab      	bkpt	0x00ab
 8002d72:	4604      	mov	r4, r0
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff ff39 	bl	8002bec <checkerror>
 8002d7a:	b003      	add	sp, #12
 8002d7c:	bd30      	pop	{r4, r5, pc}
	...

08002d80 <_close>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4605      	mov	r5, r0
 8002d84:	f7ff ff18 	bl	8002bb8 <findslot>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	b930      	cbnz	r0, 8002d9a <_close+0x1a>
 8002d8c:	f000 f9c2 	bl	8003114 <__errno>
 8002d90:	2309      	movs	r3, #9
 8002d92:	6003      	str	r3, [r0, #0]
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	3d01      	subs	r5, #1
 8002d9c:	2d01      	cmp	r5, #1
 8002d9e:	d809      	bhi.n	8002db4 <_close+0x34>
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <_close+0x48>)
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d104      	bne.n	8002db4 <_close+0x34>
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dae:	6003      	str	r3, [r0, #0]
 8002db0:	2000      	movs	r0, #0
 8002db2:	e7f1      	b.n	8002d98 <_close+0x18>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	f7ff ffd5 	bl	8002d64 <_swiclose>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1ec      	bne.n	8002d98 <_close+0x18>
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc2:	6023      	str	r3, [r4, #0]
 8002dc4:	e7e8      	b.n	8002d98 <_close+0x18>
 8002dc6:	bf00      	nop
 8002dc8:	2000025c 	.word	0x2000025c

08002dcc <_getpid>:
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4770      	bx	lr

08002dd0 <_swistat>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	f7ff fef0 	bl	8002bb8 <findslot>
 8002dd8:	4605      	mov	r5, r0
 8002dda:	b930      	cbnz	r0, 8002dea <_swistat+0x1a>
 8002ddc:	f000 f99a 	bl	8003114 <__errno>
 8002de0:	2309      	movs	r3, #9
 8002de2:	6003      	str	r3, [r0, #0]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	6863      	ldr	r3, [r4, #4]
 8002dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df6:	64a3      	str	r3, [r4, #72]	; 0x48
 8002df8:	260c      	movs	r6, #12
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	beab      	bkpt	0x00ab
 8002e00:	4605      	mov	r5, r0
 8002e02:	4628      	mov	r0, r5
 8002e04:	f7ff fef2 	bl	8002bec <checkerror>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	bf1c      	itt	ne
 8002e0c:	6120      	strne	r0, [r4, #16]
 8002e0e:	2000      	movne	r0, #0
 8002e10:	e7ea      	b.n	8002de8 <_swistat+0x18>

08002e12 <_fstat>:
 8002e12:	460b      	mov	r3, r1
 8002e14:	b510      	push	{r4, lr}
 8002e16:	2100      	movs	r1, #0
 8002e18:	4604      	mov	r4, r0
 8002e1a:	2258      	movs	r2, #88	; 0x58
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 faaa 	bl	8003376 <memset>
 8002e22:	4601      	mov	r1, r0
 8002e24:	4620      	mov	r0, r4
 8002e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2a:	f7ff bfd1 	b.w	8002dd0 <_swistat>

08002e2e <_stat>:
 8002e2e:	b538      	push	{r3, r4, r5, lr}
 8002e30:	460d      	mov	r5, r1
 8002e32:	4604      	mov	r4, r0
 8002e34:	2258      	movs	r2, #88	; 0x58
 8002e36:	2100      	movs	r1, #0
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f000 fa9c 	bl	8003376 <memset>
 8002e3e:	4620      	mov	r0, r4
 8002e40:	2100      	movs	r1, #0
 8002e42:	f000 f811 	bl	8002e68 <_swiopen>
 8002e46:	1c43      	adds	r3, r0, #1
 8002e48:	4604      	mov	r4, r0
 8002e4a:	d00b      	beq.n	8002e64 <_stat+0x36>
 8002e4c:	686b      	ldr	r3, [r5, #4]
 8002e4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e52:	606b      	str	r3, [r5, #4]
 8002e54:	4629      	mov	r1, r5
 8002e56:	f7ff ffbb 	bl	8002dd0 <_swistat>
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff8f 	bl	8002d80 <_close>
 8002e62:	462c      	mov	r4, r5
 8002e64:	4620      	mov	r0, r4
 8002e66:	bd38      	pop	{r3, r4, r5, pc}

08002e68 <_swiopen>:
 8002e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <_swiopen+0xb0>)
 8002e6e:	b097      	sub	sp, #92	; 0x5c
 8002e70:	4681      	mov	r9, r0
 8002e72:	460f      	mov	r7, r1
 8002e74:	2500      	movs	r5, #0
 8002e76:	461e      	mov	r6, r3
 8002e78:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002e7c:	1c61      	adds	r1, r4, #1
 8002e7e:	d037      	beq.n	8002ef0 <_swiopen+0x88>
 8002e80:	3501      	adds	r5, #1
 8002e82:	2d14      	cmp	r5, #20
 8002e84:	d1f8      	bne.n	8002e78 <_swiopen+0x10>
 8002e86:	f000 f945 	bl	8003114 <__errno>
 8002e8a:	2318      	movs	r3, #24
 8002e8c:	6003      	str	r3, [r0, #0]
 8002e8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e92:	e03d      	b.n	8002f10 <_swiopen+0xa8>
 8002e94:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8002e98:	f240 6301 	movw	r3, #1537	; 0x601
 8002e9c:	07ba      	lsls	r2, r7, #30
 8002e9e:	bf48      	it	mi
 8002ea0:	f044 0402 	orrmi.w	r4, r4, #2
 8002ea4:	421f      	tst	r7, r3
 8002ea6:	bf18      	it	ne
 8002ea8:	f044 0404 	orrne.w	r4, r4, #4
 8002eac:	073b      	lsls	r3, r7, #28
 8002eae:	bf48      	it	mi
 8002eb0:	f024 0404 	bicmi.w	r4, r4, #4
 8002eb4:	4648      	mov	r0, r9
 8002eb6:	bf48      	it	mi
 8002eb8:	f044 0408 	orrmi.w	r4, r4, #8
 8002ebc:	f8cd 9000 	str.w	r9, [sp]
 8002ec0:	f7fd f986 	bl	80001d0 <strlen>
 8002ec4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002ec8:	2401      	movs	r4, #1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4641      	mov	r1, r8
 8002ece:	beab      	bkpt	0x00ab
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	db07      	blt.n	8002ee6 <_swiopen+0x7e>
 8002ed6:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8002eda:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6073      	str	r3, [r6, #4]
 8002ee2:	462c      	mov	r4, r5
 8002ee4:	e014      	b.n	8002f10 <_swiopen+0xa8>
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7ff fe90 	bl	8002c0c <error>
 8002eec:	4604      	mov	r4, r0
 8002eee:	e00f      	b.n	8002f10 <_swiopen+0xa8>
 8002ef0:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8002ef4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ef8:	46e8      	mov	r8, sp
 8002efa:	d1cb      	bne.n	8002e94 <_swiopen+0x2c>
 8002efc:	4641      	mov	r1, r8
 8002efe:	4648      	mov	r0, r9
 8002f00:	f7ff ff95 	bl	8002e2e <_stat>
 8002f04:	3001      	adds	r0, #1
 8002f06:	d0c5      	beq.n	8002e94 <_swiopen+0x2c>
 8002f08:	f000 f904 	bl	8003114 <__errno>
 8002f0c:	2311      	movs	r3, #17
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	4620      	mov	r0, r4
 8002f12:	b017      	add	sp, #92	; 0x5c
 8002f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f18:	2000025c 	.word	0x2000025c

08002f1c <_get_semihosting_exts>:
 8002f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f20:	4606      	mov	r6, r0
 8002f22:	460f      	mov	r7, r1
 8002f24:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <_get_semihosting_exts+0xb4>)
 8002f26:	2100      	movs	r1, #0
 8002f28:	4615      	mov	r5, r2
 8002f2a:	f7ff ff9d 	bl	8002e68 <_swiopen>
 8002f2e:	462a      	mov	r2, r5
 8002f30:	4604      	mov	r4, r0
 8002f32:	2100      	movs	r1, #0
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 fa1e 	bl	8003376 <memset>
 8002f3a:	1c63      	adds	r3, r4, #1
 8002f3c:	d016      	beq.n	8002f6c <_get_semihosting_exts+0x50>
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fe3a 	bl	8002bb8 <findslot>
 8002f44:	f04f 090c 	mov.w	r9, #12
 8002f48:	4680      	mov	r8, r0
 8002f4a:	4648      	mov	r0, r9
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	beab      	bkpt	0x00ab
 8002f50:	4680      	mov	r8, r0
 8002f52:	4640      	mov	r0, r8
 8002f54:	f7ff fe4a 	bl	8002bec <checkerror>
 8002f58:	2803      	cmp	r0, #3
 8002f5a:	dd02      	ble.n	8002f62 <_get_semihosting_exts+0x46>
 8002f5c:	1ec3      	subs	r3, r0, #3
 8002f5e:	42ab      	cmp	r3, r5
 8002f60:	dc08      	bgt.n	8002f74 <_get_semihosting_exts+0x58>
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff0c 	bl	8002d80 <_close>
 8002f68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	b003      	add	sp, #12
 8002f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f74:	2204      	movs	r2, #4
 8002f76:	eb0d 0102 	add.w	r1, sp, r2
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f7ff fe64 	bl	8002c48 <_read>
 8002f80:	2803      	cmp	r0, #3
 8002f82:	ddee      	ble.n	8002f62 <_get_semihosting_exts+0x46>
 8002f84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f88:	2b53      	cmp	r3, #83	; 0x53
 8002f8a:	d1ea      	bne.n	8002f62 <_get_semihosting_exts+0x46>
 8002f8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f90:	2b48      	cmp	r3, #72	; 0x48
 8002f92:	d1e6      	bne.n	8002f62 <_get_semihosting_exts+0x46>
 8002f94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002f98:	2b46      	cmp	r3, #70	; 0x46
 8002f9a:	d1e2      	bne.n	8002f62 <_get_semihosting_exts+0x46>
 8002f9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002fa0:	2b42      	cmp	r3, #66	; 0x42
 8002fa2:	d1de      	bne.n	8002f62 <_get_semihosting_exts+0x46>
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4639      	mov	r1, r7
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff fe69 	bl	8002c80 <_swilseek>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	dbd7      	blt.n	8002f62 <_get_semihosting_exts+0x46>
 8002fb2:	462a      	mov	r2, r5
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff fe46 	bl	8002c48 <_read>
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff fede 	bl	8002d80 <_close>
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f7ff fe11 	bl	8002bec <checkerror>
 8002fca:	4604      	mov	r4, r0
 8002fcc:	e7ce      	b.n	8002f6c <_get_semihosting_exts+0x50>
 8002fce:	bf00      	nop
 8002fd0:	08005cec 	.word	0x08005cec

08002fd4 <initialise_semihosting_exts>:
 8002fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fd6:	4d0a      	ldr	r5, [pc, #40]	; (8003000 <initialise_semihosting_exts+0x2c>)
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <initialise_semihosting_exts+0x30>)
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2201      	movs	r2, #1
 8002fde:	a801      	add	r0, sp, #4
 8002fe0:	6029      	str	r1, [r5, #0]
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	f7ff ff9a 	bl	8002f1c <_get_semihosting_exts>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	dd07      	ble.n	8002ffc <initialise_semihosting_exts+0x28>
 8002fec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ff0:	f003 0201 	and.w	r2, r3, #1
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	b003      	add	sp, #12
 8002ffe:	bd30      	pop	{r4, r5, pc}
 8003000:	20000050 	.word	0x20000050
 8003004:	20000054 	.word	0x20000054

08003008 <_has_ext_stdout_stderr>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4c04      	ldr	r4, [pc, #16]	; (800301c <_has_ext_stdout_stderr+0x14>)
 800300c:	6822      	ldr	r2, [r4, #0]
 800300e:	2a00      	cmp	r2, #0
 8003010:	da01      	bge.n	8003016 <_has_ext_stdout_stderr+0xe>
 8003012:	f7ff ffdf 	bl	8002fd4 <initialise_semihosting_exts>
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	bd10      	pop	{r4, pc}
 800301a:	bf00      	nop
 800301c:	20000054 	.word	0x20000054

08003020 <initialise_monitor_handles>:
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	b085      	sub	sp, #20
 8003026:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80030d8 <initialise_monitor_handles+0xb8>
 800302a:	f8cd 9004 	str.w	r9, [sp, #4]
 800302e:	2303      	movs	r3, #3
 8003030:	2400      	movs	r4, #0
 8003032:	9303      	str	r3, [sp, #12]
 8003034:	f10d 0804 	add.w	r8, sp, #4
 8003038:	9402      	str	r4, [sp, #8]
 800303a:	2501      	movs	r5, #1
 800303c:	4628      	mov	r0, r5
 800303e:	4641      	mov	r1, r8
 8003040:	beab      	bkpt	0x00ab
 8003042:	4605      	mov	r5, r0
 8003044:	4e20      	ldr	r6, [pc, #128]	; (80030c8 <initialise_monitor_handles+0xa8>)
 8003046:	4a21      	ldr	r2, [pc, #132]	; (80030cc <initialise_monitor_handles+0xac>)
 8003048:	6035      	str	r5, [r6, #0]
 800304a:	4623      	mov	r3, r4
 800304c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003050:	4614      	mov	r4, r2
 8003052:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003056:	3301      	adds	r3, #1
 8003058:	2b14      	cmp	r3, #20
 800305a:	d1fa      	bne.n	8003052 <initialise_monitor_handles+0x32>
 800305c:	f7ff ffd4 	bl	8003008 <_has_ext_stdout_stderr>
 8003060:	4d1b      	ldr	r5, [pc, #108]	; (80030d0 <initialise_monitor_handles+0xb0>)
 8003062:	b1d0      	cbz	r0, 800309a <initialise_monitor_handles+0x7a>
 8003064:	f04f 0a03 	mov.w	sl, #3
 8003068:	2304      	movs	r3, #4
 800306a:	f8cd 9004 	str.w	r9, [sp, #4]
 800306e:	2701      	movs	r7, #1
 8003070:	f8cd a00c 	str.w	sl, [sp, #12]
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	4638      	mov	r0, r7
 8003078:	4641      	mov	r1, r8
 800307a:	beab      	bkpt	0x00ab
 800307c:	4683      	mov	fp, r0
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <initialise_monitor_handles+0xb4>)
 8003080:	f8cd 9004 	str.w	r9, [sp, #4]
 8003084:	f8c3 b000 	str.w	fp, [r3]
 8003088:	2308      	movs	r3, #8
 800308a:	f8cd a00c 	str.w	sl, [sp, #12]
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4638      	mov	r0, r7
 8003092:	4641      	mov	r1, r8
 8003094:	beab      	bkpt	0x00ab
 8003096:	4607      	mov	r7, r0
 8003098:	602f      	str	r7, [r5, #0]
 800309a:	682b      	ldr	r3, [r5, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	bf02      	ittt	eq
 80030a0:	4b0c      	ldreq	r3, [pc, #48]	; (80030d4 <initialise_monitor_handles+0xb4>)
 80030a2:	681b      	ldreq	r3, [r3, #0]
 80030a4:	602b      	streq	r3, [r5, #0]
 80030a6:	6833      	ldr	r3, [r6, #0]
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	2600      	movs	r6, #0
 80030ac:	6066      	str	r6, [r4, #4]
 80030ae:	f7ff ffab 	bl	8003008 <_has_ext_stdout_stderr>
 80030b2:	b130      	cbz	r0, 80030c2 <initialise_monitor_handles+0xa2>
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <initialise_monitor_handles+0xb4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80030c2:	b005      	add	sp, #20
 80030c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c8:	20000254 	.word	0x20000254
 80030cc:	2000025c 	.word	0x2000025c
 80030d0:	20000250 	.word	0x20000250
 80030d4:	20000258 	.word	0x20000258
 80030d8:	08005d02 	.word	0x08005d02

080030dc <_isatty>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	f7ff fd6b 	bl	8002bb8 <findslot>
 80030e2:	2509      	movs	r5, #9
 80030e4:	4604      	mov	r4, r0
 80030e6:	b920      	cbnz	r0, 80030f2 <_isatty+0x16>
 80030e8:	f000 f814 	bl	8003114 <__errno>
 80030ec:	6005      	str	r5, [r0, #0]
 80030ee:	4620      	mov	r0, r4
 80030f0:	bd70      	pop	{r4, r5, r6, pc}
 80030f2:	4628      	mov	r0, r5
 80030f4:	4621      	mov	r1, r4
 80030f6:	beab      	bkpt	0x00ab
 80030f8:	4604      	mov	r4, r0
 80030fa:	2c01      	cmp	r4, #1
 80030fc:	d0f7      	beq.n	80030ee <_isatty+0x12>
 80030fe:	f000 f809 	bl	8003114 <__errno>
 8003102:	2400      	movs	r4, #0
 8003104:	4605      	mov	r5, r0
 8003106:	2613      	movs	r6, #19
 8003108:	4630      	mov	r0, r6
 800310a:	4621      	mov	r1, r4
 800310c:	beab      	bkpt	0x00ab
 800310e:	4606      	mov	r6, r0
 8003110:	602e      	str	r6, [r5, #0]
 8003112:	e7ec      	b.n	80030ee <_isatty+0x12>

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000058 	.word	0x20000058

08003120 <std>:
 8003120:	2300      	movs	r3, #0
 8003122:	b510      	push	{r4, lr}
 8003124:	4604      	mov	r4, r0
 8003126:	e9c0 3300 	strd	r3, r3, [r0]
 800312a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800312e:	6083      	str	r3, [r0, #8]
 8003130:	8181      	strh	r1, [r0, #12]
 8003132:	6643      	str	r3, [r0, #100]	; 0x64
 8003134:	81c2      	strh	r2, [r0, #14]
 8003136:	6183      	str	r3, [r0, #24]
 8003138:	4619      	mov	r1, r3
 800313a:	2208      	movs	r2, #8
 800313c:	305c      	adds	r0, #92	; 0x5c
 800313e:	f000 f91a 	bl	8003376 <memset>
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <std+0x38>)
 8003144:	6263      	str	r3, [r4, #36]	; 0x24
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <std+0x3c>)
 8003148:	62a3      	str	r3, [r4, #40]	; 0x28
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <std+0x40>)
 800314c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x44>)
 8003150:	6224      	str	r4, [r4, #32]
 8003152:	6323      	str	r3, [r4, #48]	; 0x30
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	08003e4d 	.word	0x08003e4d
 800315c:	08003e6f 	.word	0x08003e6f
 8003160:	08003ea7 	.word	0x08003ea7
 8003164:	08003ecb 	.word	0x08003ecb

08003168 <_cleanup_r>:
 8003168:	4901      	ldr	r1, [pc, #4]	; (8003170 <_cleanup_r+0x8>)
 800316a:	f000 b8af 	b.w	80032cc <_fwalk_reent>
 800316e:	bf00      	nop
 8003170:	08004ed5 	.word	0x08004ed5

08003174 <__sfmoreglue>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	1e4a      	subs	r2, r1, #1
 8003178:	2568      	movs	r5, #104	; 0x68
 800317a:	4355      	muls	r5, r2
 800317c:	460e      	mov	r6, r1
 800317e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003182:	f000 f901 	bl	8003388 <_malloc_r>
 8003186:	4604      	mov	r4, r0
 8003188:	b140      	cbz	r0, 800319c <__sfmoreglue+0x28>
 800318a:	2100      	movs	r1, #0
 800318c:	e9c0 1600 	strd	r1, r6, [r0]
 8003190:	300c      	adds	r0, #12
 8003192:	60a0      	str	r0, [r4, #8]
 8003194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003198:	f000 f8ed 	bl	8003376 <memset>
 800319c:	4620      	mov	r0, r4
 800319e:	bd70      	pop	{r4, r5, r6, pc}

080031a0 <__sfp_lock_acquire>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__sfp_lock_acquire+0x8>)
 80031a2:	f000 b8d8 	b.w	8003356 <__retarget_lock_acquire_recursive>
 80031a6:	bf00      	nop
 80031a8:	200003ec 	.word	0x200003ec

080031ac <__sfp_lock_release>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sfp_lock_release+0x8>)
 80031ae:	f000 b8d3 	b.w	8003358 <__retarget_lock_release_recursive>
 80031b2:	bf00      	nop
 80031b4:	200003ec 	.word	0x200003ec

080031b8 <__sinit_lock_acquire>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sinit_lock_acquire+0x8>)
 80031ba:	f000 b8cc 	b.w	8003356 <__retarget_lock_acquire_recursive>
 80031be:	bf00      	nop
 80031c0:	200003e7 	.word	0x200003e7

080031c4 <__sinit_lock_release>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sinit_lock_release+0x8>)
 80031c6:	f000 b8c7 	b.w	8003358 <__retarget_lock_release_recursive>
 80031ca:	bf00      	nop
 80031cc:	200003e7 	.word	0x200003e7

080031d0 <__sinit>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	f7ff fff0 	bl	80031b8 <__sinit_lock_acquire>
 80031d8:	69a3      	ldr	r3, [r4, #24]
 80031da:	b11b      	cbz	r3, 80031e4 <__sinit+0x14>
 80031dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e0:	f7ff bff0 	b.w	80031c4 <__sinit_lock_release>
 80031e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031e8:	6523      	str	r3, [r4, #80]	; 0x50
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <__sinit+0x68>)
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <__sinit+0x6c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	bf04      	itt	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	61a3      	streq	r3, [r4, #24]
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f820 	bl	8003240 <__sfp>
 8003200:	6060      	str	r0, [r4, #4]
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f81c 	bl	8003240 <__sfp>
 8003208:	60a0      	str	r0, [r4, #8]
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f818 	bl	8003240 <__sfp>
 8003210:	2200      	movs	r2, #0
 8003212:	60e0      	str	r0, [r4, #12]
 8003214:	2104      	movs	r1, #4
 8003216:	6860      	ldr	r0, [r4, #4]
 8003218:	f7ff ff82 	bl	8003120 <std>
 800321c:	68a0      	ldr	r0, [r4, #8]
 800321e:	2201      	movs	r2, #1
 8003220:	2109      	movs	r1, #9
 8003222:	f7ff ff7d 	bl	8003120 <std>
 8003226:	68e0      	ldr	r0, [r4, #12]
 8003228:	2202      	movs	r2, #2
 800322a:	2112      	movs	r1, #18
 800322c:	f7ff ff78 	bl	8003120 <std>
 8003230:	2301      	movs	r3, #1
 8003232:	61a3      	str	r3, [r4, #24]
 8003234:	e7d2      	b.n	80031dc <__sinit+0xc>
 8003236:	bf00      	nop
 8003238:	08005d68 	.word	0x08005d68
 800323c:	08003169 	.word	0x08003169

08003240 <__sfp>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	4607      	mov	r7, r0
 8003244:	f7ff ffac 	bl	80031a0 <__sfp_lock_acquire>
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <__sfp+0x84>)
 800324a:	681e      	ldr	r6, [r3, #0]
 800324c:	69b3      	ldr	r3, [r6, #24]
 800324e:	b913      	cbnz	r3, 8003256 <__sfp+0x16>
 8003250:	4630      	mov	r0, r6
 8003252:	f7ff ffbd 	bl	80031d0 <__sinit>
 8003256:	3648      	adds	r6, #72	; 0x48
 8003258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800325c:	3b01      	subs	r3, #1
 800325e:	d503      	bpl.n	8003268 <__sfp+0x28>
 8003260:	6833      	ldr	r3, [r6, #0]
 8003262:	b30b      	cbz	r3, 80032a8 <__sfp+0x68>
 8003264:	6836      	ldr	r6, [r6, #0]
 8003266:	e7f7      	b.n	8003258 <__sfp+0x18>
 8003268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800326c:	b9d5      	cbnz	r5, 80032a4 <__sfp+0x64>
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <__sfp+0x88>)
 8003270:	60e3      	str	r3, [r4, #12]
 8003272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003276:	6665      	str	r5, [r4, #100]	; 0x64
 8003278:	f000 f86c 	bl	8003354 <__retarget_lock_init_recursive>
 800327c:	f7ff ff96 	bl	80031ac <__sfp_lock_release>
 8003280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	61a5      	str	r5, [r4, #24]
 800328c:	2208      	movs	r2, #8
 800328e:	4629      	mov	r1, r5
 8003290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003294:	f000 f86f 	bl	8003376 <memset>
 8003298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800329c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032a0:	4620      	mov	r0, r4
 80032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a4:	3468      	adds	r4, #104	; 0x68
 80032a6:	e7d9      	b.n	800325c <__sfp+0x1c>
 80032a8:	2104      	movs	r1, #4
 80032aa:	4638      	mov	r0, r7
 80032ac:	f7ff ff62 	bl	8003174 <__sfmoreglue>
 80032b0:	4604      	mov	r4, r0
 80032b2:	6030      	str	r0, [r6, #0]
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d1d5      	bne.n	8003264 <__sfp+0x24>
 80032b8:	f7ff ff78 	bl	80031ac <__sfp_lock_release>
 80032bc:	230c      	movs	r3, #12
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	e7ee      	b.n	80032a0 <__sfp+0x60>
 80032c2:	bf00      	nop
 80032c4:	08005d68 	.word	0x08005d68
 80032c8:	ffff0001 	.word	0xffff0001

080032cc <_fwalk_reent>:
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d0:	4606      	mov	r6, r0
 80032d2:	4688      	mov	r8, r1
 80032d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032d8:	2700      	movs	r7, #0
 80032da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032de:	f1b9 0901 	subs.w	r9, r9, #1
 80032e2:	d505      	bpl.n	80032f0 <_fwalk_reent+0x24>
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	2c00      	cmp	r4, #0
 80032e8:	d1f7      	bne.n	80032da <_fwalk_reent+0xe>
 80032ea:	4638      	mov	r0, r7
 80032ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f0:	89ab      	ldrh	r3, [r5, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d907      	bls.n	8003306 <_fwalk_reent+0x3a>
 80032f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032fa:	3301      	adds	r3, #1
 80032fc:	d003      	beq.n	8003306 <_fwalk_reent+0x3a>
 80032fe:	4629      	mov	r1, r5
 8003300:	4630      	mov	r0, r6
 8003302:	47c0      	blx	r8
 8003304:	4307      	orrs	r7, r0
 8003306:	3568      	adds	r5, #104	; 0x68
 8003308:	e7e9      	b.n	80032de <_fwalk_reent+0x12>
	...

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4d0d      	ldr	r5, [pc, #52]	; (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	; (8003348 <__libc_init_array+0x3c>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2600      	movs	r6, #0
 8003318:	42a6      	cmp	r6, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4d0b      	ldr	r5, [pc, #44]	; (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	; (8003350 <__libc_init_array+0x44>)
 8003320:	f002 fc96 	bl	8005c50 <_init>
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2600      	movs	r6, #0
 800332a:	42a6      	cmp	r6, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f855 3b04 	ldr.w	r3, [r5], #4
 8003334:	4798      	blx	r3
 8003336:	3601      	adds	r6, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f855 3b04 	ldr.w	r3, [r5], #4
 800333e:	4798      	blx	r3
 8003340:	3601      	adds	r6, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	080060e8 	.word	0x080060e8
 8003348:	080060e8 	.word	0x080060e8
 800334c:	080060e8 	.word	0x080060e8
 8003350:	080060ec 	.word	0x080060ec

08003354 <__retarget_lock_init_recursive>:
 8003354:	4770      	bx	lr

08003356 <__retarget_lock_acquire_recursive>:
 8003356:	4770      	bx	lr

08003358 <__retarget_lock_release_recursive>:
 8003358:	4770      	bx	lr

0800335a <memcpy>:
 800335a:	440a      	add	r2, r1
 800335c:	4291      	cmp	r1, r2
 800335e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003362:	d100      	bne.n	8003366 <memcpy+0xc>
 8003364:	4770      	bx	lr
 8003366:	b510      	push	{r4, lr}
 8003368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800336c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003370:	4291      	cmp	r1, r2
 8003372:	d1f9      	bne.n	8003368 <memcpy+0xe>
 8003374:	bd10      	pop	{r4, pc}

08003376 <memset>:
 8003376:	4402      	add	r2, r0
 8003378:	4603      	mov	r3, r0
 800337a:	4293      	cmp	r3, r2
 800337c:	d100      	bne.n	8003380 <memset+0xa>
 800337e:	4770      	bx	lr
 8003380:	f803 1b01 	strb.w	r1, [r3], #1
 8003384:	e7f9      	b.n	800337a <memset+0x4>
	...

08003388 <_malloc_r>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	1ccd      	adds	r5, r1, #3
 800338c:	f025 0503 	bic.w	r5, r5, #3
 8003390:	3508      	adds	r5, #8
 8003392:	2d0c      	cmp	r5, #12
 8003394:	bf38      	it	cc
 8003396:	250c      	movcc	r5, #12
 8003398:	2d00      	cmp	r5, #0
 800339a:	4606      	mov	r6, r0
 800339c:	db01      	blt.n	80033a2 <_malloc_r+0x1a>
 800339e:	42a9      	cmp	r1, r5
 80033a0:	d903      	bls.n	80033aa <_malloc_r+0x22>
 80033a2:	230c      	movs	r3, #12
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	2000      	movs	r0, #0
 80033a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033aa:	f001 fe63 	bl	8005074 <__malloc_lock>
 80033ae:	4921      	ldr	r1, [pc, #132]	; (8003434 <_malloc_r+0xac>)
 80033b0:	680a      	ldr	r2, [r1, #0]
 80033b2:	4614      	mov	r4, r2
 80033b4:	b99c      	cbnz	r4, 80033de <_malloc_r+0x56>
 80033b6:	4f20      	ldr	r7, [pc, #128]	; (8003438 <_malloc_r+0xb0>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b923      	cbnz	r3, 80033c6 <_malloc_r+0x3e>
 80033bc:	4621      	mov	r1, r4
 80033be:	4630      	mov	r0, r6
 80033c0:	f000 fd34 	bl	8003e2c <_sbrk_r>
 80033c4:	6038      	str	r0, [r7, #0]
 80033c6:	4629      	mov	r1, r5
 80033c8:	4630      	mov	r0, r6
 80033ca:	f000 fd2f 	bl	8003e2c <_sbrk_r>
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	d123      	bne.n	800341a <_malloc_r+0x92>
 80033d2:	230c      	movs	r3, #12
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	4630      	mov	r0, r6
 80033d8:	f001 fe52 	bl	8005080 <__malloc_unlock>
 80033dc:	e7e3      	b.n	80033a6 <_malloc_r+0x1e>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	1b5b      	subs	r3, r3, r5
 80033e2:	d417      	bmi.n	8003414 <_malloc_r+0x8c>
 80033e4:	2b0b      	cmp	r3, #11
 80033e6:	d903      	bls.n	80033f0 <_malloc_r+0x68>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	441c      	add	r4, r3
 80033ec:	6025      	str	r5, [r4, #0]
 80033ee:	e004      	b.n	80033fa <_malloc_r+0x72>
 80033f0:	6863      	ldr	r3, [r4, #4]
 80033f2:	42a2      	cmp	r2, r4
 80033f4:	bf0c      	ite	eq
 80033f6:	600b      	streq	r3, [r1, #0]
 80033f8:	6053      	strne	r3, [r2, #4]
 80033fa:	4630      	mov	r0, r6
 80033fc:	f001 fe40 	bl	8005080 <__malloc_unlock>
 8003400:	f104 000b 	add.w	r0, r4, #11
 8003404:	1d23      	adds	r3, r4, #4
 8003406:	f020 0007 	bic.w	r0, r0, #7
 800340a:	1ac2      	subs	r2, r0, r3
 800340c:	d0cc      	beq.n	80033a8 <_malloc_r+0x20>
 800340e:	1a1b      	subs	r3, r3, r0
 8003410:	50a3      	str	r3, [r4, r2]
 8003412:	e7c9      	b.n	80033a8 <_malloc_r+0x20>
 8003414:	4622      	mov	r2, r4
 8003416:	6864      	ldr	r4, [r4, #4]
 8003418:	e7cc      	b.n	80033b4 <_malloc_r+0x2c>
 800341a:	1cc4      	adds	r4, r0, #3
 800341c:	f024 0403 	bic.w	r4, r4, #3
 8003420:	42a0      	cmp	r0, r4
 8003422:	d0e3      	beq.n	80033ec <_malloc_r+0x64>
 8003424:	1a21      	subs	r1, r4, r0
 8003426:	4630      	mov	r0, r6
 8003428:	f000 fd00 	bl	8003e2c <_sbrk_r>
 800342c:	3001      	adds	r0, #1
 800342e:	d1dd      	bne.n	80033ec <_malloc_r+0x64>
 8003430:	e7cf      	b.n	80033d2 <_malloc_r+0x4a>
 8003432:	bf00      	nop
 8003434:	200002fc 	.word	0x200002fc
 8003438:	20000300 	.word	0x20000300

0800343c <__cvt>:
 800343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	ec55 4b10 	vmov	r4, r5, d0
 8003444:	2d00      	cmp	r5, #0
 8003446:	460e      	mov	r6, r1
 8003448:	4619      	mov	r1, r3
 800344a:	462b      	mov	r3, r5
 800344c:	bfbb      	ittet	lt
 800344e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003452:	461d      	movlt	r5, r3
 8003454:	2300      	movge	r3, #0
 8003456:	232d      	movlt	r3, #45	; 0x2d
 8003458:	700b      	strb	r3, [r1, #0]
 800345a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800345c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003460:	4691      	mov	r9, r2
 8003462:	f023 0820 	bic.w	r8, r3, #32
 8003466:	bfbc      	itt	lt
 8003468:	4622      	movlt	r2, r4
 800346a:	4614      	movlt	r4, r2
 800346c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003470:	d005      	beq.n	800347e <__cvt+0x42>
 8003472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003476:	d100      	bne.n	800347a <__cvt+0x3e>
 8003478:	3601      	adds	r6, #1
 800347a:	2102      	movs	r1, #2
 800347c:	e000      	b.n	8003480 <__cvt+0x44>
 800347e:	2103      	movs	r1, #3
 8003480:	ab03      	add	r3, sp, #12
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	ab02      	add	r3, sp, #8
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	ec45 4b10 	vmov	d0, r4, r5
 800348c:	4653      	mov	r3, sl
 800348e:	4632      	mov	r2, r6
 8003490:	f000 feae 	bl	80041f0 <_dtoa_r>
 8003494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003498:	4607      	mov	r7, r0
 800349a:	d102      	bne.n	80034a2 <__cvt+0x66>
 800349c:	f019 0f01 	tst.w	r9, #1
 80034a0:	d022      	beq.n	80034e8 <__cvt+0xac>
 80034a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034a6:	eb07 0906 	add.w	r9, r7, r6
 80034aa:	d110      	bne.n	80034ce <__cvt+0x92>
 80034ac:	783b      	ldrb	r3, [r7, #0]
 80034ae:	2b30      	cmp	r3, #48	; 0x30
 80034b0:	d10a      	bne.n	80034c8 <__cvt+0x8c>
 80034b2:	2200      	movs	r2, #0
 80034b4:	2300      	movs	r3, #0
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fd fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80034be:	b918      	cbnz	r0, 80034c8 <__cvt+0x8c>
 80034c0:	f1c6 0601 	rsb	r6, r6, #1
 80034c4:	f8ca 6000 	str.w	r6, [sl]
 80034c8:	f8da 3000 	ldr.w	r3, [sl]
 80034cc:	4499      	add	r9, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	2300      	movs	r3, #0
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	f7fd faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80034da:	b108      	cbz	r0, 80034e0 <__cvt+0xa4>
 80034dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80034e0:	2230      	movs	r2, #48	; 0x30
 80034e2:	9b03      	ldr	r3, [sp, #12]
 80034e4:	454b      	cmp	r3, r9
 80034e6:	d307      	bcc.n	80034f8 <__cvt+0xbc>
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ec:	1bdb      	subs	r3, r3, r7
 80034ee:	4638      	mov	r0, r7
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	b004      	add	sp, #16
 80034f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	9103      	str	r1, [sp, #12]
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e7f0      	b.n	80034e2 <__cvt+0xa6>

08003500 <__exponent>:
 8003500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003502:	4603      	mov	r3, r0
 8003504:	2900      	cmp	r1, #0
 8003506:	bfb8      	it	lt
 8003508:	4249      	neglt	r1, r1
 800350a:	f803 2b02 	strb.w	r2, [r3], #2
 800350e:	bfb4      	ite	lt
 8003510:	222d      	movlt	r2, #45	; 0x2d
 8003512:	222b      	movge	r2, #43	; 0x2b
 8003514:	2909      	cmp	r1, #9
 8003516:	7042      	strb	r2, [r0, #1]
 8003518:	dd2a      	ble.n	8003570 <__exponent+0x70>
 800351a:	f10d 0407 	add.w	r4, sp, #7
 800351e:	46a4      	mov	ip, r4
 8003520:	270a      	movs	r7, #10
 8003522:	46a6      	mov	lr, r4
 8003524:	460a      	mov	r2, r1
 8003526:	fb91 f6f7 	sdiv	r6, r1, r7
 800352a:	fb07 1516 	mls	r5, r7, r6, r1
 800352e:	3530      	adds	r5, #48	; 0x30
 8003530:	2a63      	cmp	r2, #99	; 0x63
 8003532:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800353a:	4631      	mov	r1, r6
 800353c:	dcf1      	bgt.n	8003522 <__exponent+0x22>
 800353e:	3130      	adds	r1, #48	; 0x30
 8003540:	f1ae 0502 	sub.w	r5, lr, #2
 8003544:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003548:	1c44      	adds	r4, r0, #1
 800354a:	4629      	mov	r1, r5
 800354c:	4561      	cmp	r1, ip
 800354e:	d30a      	bcc.n	8003566 <__exponent+0x66>
 8003550:	f10d 0209 	add.w	r2, sp, #9
 8003554:	eba2 020e 	sub.w	r2, r2, lr
 8003558:	4565      	cmp	r5, ip
 800355a:	bf88      	it	hi
 800355c:	2200      	movhi	r2, #0
 800355e:	4413      	add	r3, r2
 8003560:	1a18      	subs	r0, r3, r0
 8003562:	b003      	add	sp, #12
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800356a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800356e:	e7ed      	b.n	800354c <__exponent+0x4c>
 8003570:	2330      	movs	r3, #48	; 0x30
 8003572:	3130      	adds	r1, #48	; 0x30
 8003574:	7083      	strb	r3, [r0, #2]
 8003576:	70c1      	strb	r1, [r0, #3]
 8003578:	1d03      	adds	r3, r0, #4
 800357a:	e7f1      	b.n	8003560 <__exponent+0x60>

0800357c <_printf_float>:
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	ed2d 8b02 	vpush	{d8}
 8003584:	b08d      	sub	sp, #52	; 0x34
 8003586:	460c      	mov	r4, r1
 8003588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800358c:	4616      	mov	r6, r2
 800358e:	461f      	mov	r7, r3
 8003590:	4605      	mov	r5, r0
 8003592:	f001 fced 	bl	8004f70 <_localeconv_r>
 8003596:	f8d0 a000 	ldr.w	sl, [r0]
 800359a:	4650      	mov	r0, sl
 800359c:	f7fc fe18 	bl	80001d0 <strlen>
 80035a0:	2300      	movs	r3, #0
 80035a2:	930a      	str	r3, [sp, #40]	; 0x28
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	9305      	str	r3, [sp, #20]
 80035a8:	f8d8 3000 	ldr.w	r3, [r8]
 80035ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80035b0:	3307      	adds	r3, #7
 80035b2:	f023 0307 	bic.w	r3, r3, #7
 80035b6:	f103 0208 	add.w	r2, r3, #8
 80035ba:	f8c8 2000 	str.w	r2, [r8]
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80035ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80035ce:	9307      	str	r3, [sp, #28]
 80035d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80035d4:	ee08 0a10 	vmov	s16, r0
 80035d8:	4b9f      	ldr	r3, [pc, #636]	; (8003858 <_printf_float+0x2dc>)
 80035da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e2:	f7fd faa3 	bl	8000b2c <__aeabi_dcmpun>
 80035e6:	bb88      	cbnz	r0, 800364c <_printf_float+0xd0>
 80035e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035ec:	4b9a      	ldr	r3, [pc, #616]	; (8003858 <_printf_float+0x2dc>)
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f2:	f7fd fa7d 	bl	8000af0 <__aeabi_dcmple>
 80035f6:	bb48      	cbnz	r0, 800364c <_printf_float+0xd0>
 80035f8:	2200      	movs	r2, #0
 80035fa:	2300      	movs	r3, #0
 80035fc:	4640      	mov	r0, r8
 80035fe:	4649      	mov	r1, r9
 8003600:	f7fd fa6c 	bl	8000adc <__aeabi_dcmplt>
 8003604:	b110      	cbz	r0, 800360c <_printf_float+0x90>
 8003606:	232d      	movs	r3, #45	; 0x2d
 8003608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360c:	4b93      	ldr	r3, [pc, #588]	; (800385c <_printf_float+0x2e0>)
 800360e:	4894      	ldr	r0, [pc, #592]	; (8003860 <_printf_float+0x2e4>)
 8003610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003614:	bf94      	ite	ls
 8003616:	4698      	movls	r8, r3
 8003618:	4680      	movhi	r8, r0
 800361a:	2303      	movs	r3, #3
 800361c:	6123      	str	r3, [r4, #16]
 800361e:	9b05      	ldr	r3, [sp, #20]
 8003620:	f023 0204 	bic.w	r2, r3, #4
 8003624:	6022      	str	r2, [r4, #0]
 8003626:	f04f 0900 	mov.w	r9, #0
 800362a:	9700      	str	r7, [sp, #0]
 800362c:	4633      	mov	r3, r6
 800362e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003630:	4621      	mov	r1, r4
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f9d8 	bl	80039e8 <_printf_common>
 8003638:	3001      	adds	r0, #1
 800363a:	f040 8090 	bne.w	800375e <_printf_float+0x1e2>
 800363e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003642:	b00d      	add	sp, #52	; 0x34
 8003644:	ecbd 8b02 	vpop	{d8}
 8003648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	4640      	mov	r0, r8
 8003652:	4649      	mov	r1, r9
 8003654:	f7fd fa6a 	bl	8000b2c <__aeabi_dcmpun>
 8003658:	b140      	cbz	r0, 800366c <_printf_float+0xf0>
 800365a:	464b      	mov	r3, r9
 800365c:	2b00      	cmp	r3, #0
 800365e:	bfbc      	itt	lt
 8003660:	232d      	movlt	r3, #45	; 0x2d
 8003662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003666:	487f      	ldr	r0, [pc, #508]	; (8003864 <_printf_float+0x2e8>)
 8003668:	4b7f      	ldr	r3, [pc, #508]	; (8003868 <_printf_float+0x2ec>)
 800366a:	e7d1      	b.n	8003610 <_printf_float+0x94>
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003672:	9206      	str	r2, [sp, #24]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	d13f      	bne.n	80036f8 <_printf_float+0x17c>
 8003678:	2306      	movs	r3, #6
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	9b05      	ldr	r3, [sp, #20]
 800367e:	6861      	ldr	r1, [r4, #4]
 8003680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003684:	2300      	movs	r3, #0
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	ab0a      	add	r3, sp, #40	; 0x28
 800368a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800368e:	ab09      	add	r3, sp, #36	; 0x24
 8003690:	ec49 8b10 	vmov	d0, r8, r9
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6022      	str	r2, [r4, #0]
 8003698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800369c:	4628      	mov	r0, r5
 800369e:	f7ff fecd 	bl	800343c <__cvt>
 80036a2:	9b06      	ldr	r3, [sp, #24]
 80036a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036a6:	2b47      	cmp	r3, #71	; 0x47
 80036a8:	4680      	mov	r8, r0
 80036aa:	d108      	bne.n	80036be <_printf_float+0x142>
 80036ac:	1cc8      	adds	r0, r1, #3
 80036ae:	db02      	blt.n	80036b6 <_printf_float+0x13a>
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	4299      	cmp	r1, r3
 80036b4:	dd41      	ble.n	800373a <_printf_float+0x1be>
 80036b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80036ba:	fa5f fb8b 	uxtb.w	fp, fp
 80036be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80036c2:	d820      	bhi.n	8003706 <_printf_float+0x18a>
 80036c4:	3901      	subs	r1, #1
 80036c6:	465a      	mov	r2, fp
 80036c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80036cc:	9109      	str	r1, [sp, #36]	; 0x24
 80036ce:	f7ff ff17 	bl	8003500 <__exponent>
 80036d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036d4:	1813      	adds	r3, r2, r0
 80036d6:	2a01      	cmp	r2, #1
 80036d8:	4681      	mov	r9, r0
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	dc02      	bgt.n	80036e4 <_printf_float+0x168>
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	07d2      	lsls	r2, r2, #31
 80036e2:	d501      	bpl.n	80036e8 <_printf_float+0x16c>
 80036e4:	3301      	adds	r3, #1
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d09c      	beq.n	800362a <_printf_float+0xae>
 80036f0:	232d      	movs	r3, #45	; 0x2d
 80036f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f6:	e798      	b.n	800362a <_printf_float+0xae>
 80036f8:	9a06      	ldr	r2, [sp, #24]
 80036fa:	2a47      	cmp	r2, #71	; 0x47
 80036fc:	d1be      	bne.n	800367c <_printf_float+0x100>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1bc      	bne.n	800367c <_printf_float+0x100>
 8003702:	2301      	movs	r3, #1
 8003704:	e7b9      	b.n	800367a <_printf_float+0xfe>
 8003706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800370a:	d118      	bne.n	800373e <_printf_float+0x1c2>
 800370c:	2900      	cmp	r1, #0
 800370e:	6863      	ldr	r3, [r4, #4]
 8003710:	dd0b      	ble.n	800372a <_printf_float+0x1ae>
 8003712:	6121      	str	r1, [r4, #16]
 8003714:	b913      	cbnz	r3, 800371c <_printf_float+0x1a0>
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	07d0      	lsls	r0, r2, #31
 800371a:	d502      	bpl.n	8003722 <_printf_float+0x1a6>
 800371c:	3301      	adds	r3, #1
 800371e:	440b      	add	r3, r1
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	65a1      	str	r1, [r4, #88]	; 0x58
 8003724:	f04f 0900 	mov.w	r9, #0
 8003728:	e7de      	b.n	80036e8 <_printf_float+0x16c>
 800372a:	b913      	cbnz	r3, 8003732 <_printf_float+0x1b6>
 800372c:	6822      	ldr	r2, [r4, #0]
 800372e:	07d2      	lsls	r2, r2, #31
 8003730:	d501      	bpl.n	8003736 <_printf_float+0x1ba>
 8003732:	3302      	adds	r3, #2
 8003734:	e7f4      	b.n	8003720 <_printf_float+0x1a4>
 8003736:	2301      	movs	r3, #1
 8003738:	e7f2      	b.n	8003720 <_printf_float+0x1a4>
 800373a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800373e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003740:	4299      	cmp	r1, r3
 8003742:	db05      	blt.n	8003750 <_printf_float+0x1d4>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	6121      	str	r1, [r4, #16]
 8003748:	07d8      	lsls	r0, r3, #31
 800374a:	d5ea      	bpl.n	8003722 <_printf_float+0x1a6>
 800374c:	1c4b      	adds	r3, r1, #1
 800374e:	e7e7      	b.n	8003720 <_printf_float+0x1a4>
 8003750:	2900      	cmp	r1, #0
 8003752:	bfd4      	ite	le
 8003754:	f1c1 0202 	rsble	r2, r1, #2
 8003758:	2201      	movgt	r2, #1
 800375a:	4413      	add	r3, r2
 800375c:	e7e0      	b.n	8003720 <_printf_float+0x1a4>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	055a      	lsls	r2, r3, #21
 8003762:	d407      	bmi.n	8003774 <_printf_float+0x1f8>
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	4642      	mov	r2, r8
 8003768:	4631      	mov	r1, r6
 800376a:	4628      	mov	r0, r5
 800376c:	47b8      	blx	r7
 800376e:	3001      	adds	r0, #1
 8003770:	d12c      	bne.n	80037cc <_printf_float+0x250>
 8003772:	e764      	b.n	800363e <_printf_float+0xc2>
 8003774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003778:	f240 80e0 	bls.w	800393c <_printf_float+0x3c0>
 800377c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003780:	2200      	movs	r2, #0
 8003782:	2300      	movs	r3, #0
 8003784:	f7fd f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003788:	2800      	cmp	r0, #0
 800378a:	d034      	beq.n	80037f6 <_printf_float+0x27a>
 800378c:	4a37      	ldr	r2, [pc, #220]	; (800386c <_printf_float+0x2f0>)
 800378e:	2301      	movs	r3, #1
 8003790:	4631      	mov	r1, r6
 8003792:	4628      	mov	r0, r5
 8003794:	47b8      	blx	r7
 8003796:	3001      	adds	r0, #1
 8003798:	f43f af51 	beq.w	800363e <_printf_float+0xc2>
 800379c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	db02      	blt.n	80037aa <_printf_float+0x22e>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	07d8      	lsls	r0, r3, #31
 80037a8:	d510      	bpl.n	80037cc <_printf_float+0x250>
 80037aa:	ee18 3a10 	vmov	r3, s16
 80037ae:	4652      	mov	r2, sl
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f af41 	beq.w	800363e <_printf_float+0xc2>
 80037bc:	f04f 0800 	mov.w	r8, #0
 80037c0:	f104 091a 	add.w	r9, r4, #26
 80037c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4543      	cmp	r3, r8
 80037ca:	dc09      	bgt.n	80037e0 <_printf_float+0x264>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	079b      	lsls	r3, r3, #30
 80037d0:	f100 8105 	bmi.w	80039de <_printf_float+0x462>
 80037d4:	68e0      	ldr	r0, [r4, #12]
 80037d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037d8:	4298      	cmp	r0, r3
 80037da:	bfb8      	it	lt
 80037dc:	4618      	movlt	r0, r3
 80037de:	e730      	b.n	8003642 <_printf_float+0xc6>
 80037e0:	2301      	movs	r3, #1
 80037e2:	464a      	mov	r2, r9
 80037e4:	4631      	mov	r1, r6
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	f43f af27 	beq.w	800363e <_printf_float+0xc2>
 80037f0:	f108 0801 	add.w	r8, r8, #1
 80037f4:	e7e6      	b.n	80037c4 <_printf_float+0x248>
 80037f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dc39      	bgt.n	8003870 <_printf_float+0x2f4>
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <_printf_float+0x2f0>)
 80037fe:	2301      	movs	r3, #1
 8003800:	4631      	mov	r1, r6
 8003802:	4628      	mov	r0, r5
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	f43f af19 	beq.w	800363e <_printf_float+0xc2>
 800380c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003810:	4313      	orrs	r3, r2
 8003812:	d102      	bne.n	800381a <_printf_float+0x29e>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	07d9      	lsls	r1, r3, #31
 8003818:	d5d8      	bpl.n	80037cc <_printf_float+0x250>
 800381a:	ee18 3a10 	vmov	r3, s16
 800381e:	4652      	mov	r2, sl
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	47b8      	blx	r7
 8003826:	3001      	adds	r0, #1
 8003828:	f43f af09 	beq.w	800363e <_printf_float+0xc2>
 800382c:	f04f 0900 	mov.w	r9, #0
 8003830:	f104 0a1a 	add.w	sl, r4, #26
 8003834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003836:	425b      	negs	r3, r3
 8003838:	454b      	cmp	r3, r9
 800383a:	dc01      	bgt.n	8003840 <_printf_float+0x2c4>
 800383c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800383e:	e792      	b.n	8003766 <_printf_float+0x1ea>
 8003840:	2301      	movs	r3, #1
 8003842:	4652      	mov	r2, sl
 8003844:	4631      	mov	r1, r6
 8003846:	4628      	mov	r0, r5
 8003848:	47b8      	blx	r7
 800384a:	3001      	adds	r0, #1
 800384c:	f43f aef7 	beq.w	800363e <_printf_float+0xc2>
 8003850:	f109 0901 	add.w	r9, r9, #1
 8003854:	e7ee      	b.n	8003834 <_printf_float+0x2b8>
 8003856:	bf00      	nop
 8003858:	7fefffff 	.word	0x7fefffff
 800385c:	08005d6c 	.word	0x08005d6c
 8003860:	08005d70 	.word	0x08005d70
 8003864:	08005d78 	.word	0x08005d78
 8003868:	08005d74 	.word	0x08005d74
 800386c:	08005d7c 	.word	0x08005d7c
 8003870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003874:	429a      	cmp	r2, r3
 8003876:	bfa8      	it	ge
 8003878:	461a      	movge	r2, r3
 800387a:	2a00      	cmp	r2, #0
 800387c:	4691      	mov	r9, r2
 800387e:	dc37      	bgt.n	80038f0 <_printf_float+0x374>
 8003880:	f04f 0b00 	mov.w	fp, #0
 8003884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003888:	f104 021a 	add.w	r2, r4, #26
 800388c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	eba3 0309 	sub.w	r3, r3, r9
 8003894:	455b      	cmp	r3, fp
 8003896:	dc33      	bgt.n	8003900 <_printf_float+0x384>
 8003898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800389c:	429a      	cmp	r2, r3
 800389e:	db3b      	blt.n	8003918 <_printf_float+0x39c>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	07da      	lsls	r2, r3, #31
 80038a4:	d438      	bmi.n	8003918 <_printf_float+0x39c>
 80038a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038a8:	9b05      	ldr	r3, [sp, #20]
 80038aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	eba2 0901 	sub.w	r9, r2, r1
 80038b2:	4599      	cmp	r9, r3
 80038b4:	bfa8      	it	ge
 80038b6:	4699      	movge	r9, r3
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	dc35      	bgt.n	800392a <_printf_float+0x3ae>
 80038be:	f04f 0800 	mov.w	r8, #0
 80038c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038c6:	f104 0a1a 	add.w	sl, r4, #26
 80038ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	eba3 0309 	sub.w	r3, r3, r9
 80038d4:	4543      	cmp	r3, r8
 80038d6:	f77f af79 	ble.w	80037cc <_printf_float+0x250>
 80038da:	2301      	movs	r3, #1
 80038dc:	4652      	mov	r2, sl
 80038de:	4631      	mov	r1, r6
 80038e0:	4628      	mov	r0, r5
 80038e2:	47b8      	blx	r7
 80038e4:	3001      	adds	r0, #1
 80038e6:	f43f aeaa 	beq.w	800363e <_printf_float+0xc2>
 80038ea:	f108 0801 	add.w	r8, r8, #1
 80038ee:	e7ec      	b.n	80038ca <_printf_float+0x34e>
 80038f0:	4613      	mov	r3, r2
 80038f2:	4631      	mov	r1, r6
 80038f4:	4642      	mov	r2, r8
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	d1c0      	bne.n	8003880 <_printf_float+0x304>
 80038fe:	e69e      	b.n	800363e <_printf_float+0xc2>
 8003900:	2301      	movs	r3, #1
 8003902:	4631      	mov	r1, r6
 8003904:	4628      	mov	r0, r5
 8003906:	9205      	str	r2, [sp, #20]
 8003908:	47b8      	blx	r7
 800390a:	3001      	adds	r0, #1
 800390c:	f43f ae97 	beq.w	800363e <_printf_float+0xc2>
 8003910:	9a05      	ldr	r2, [sp, #20]
 8003912:	f10b 0b01 	add.w	fp, fp, #1
 8003916:	e7b9      	b.n	800388c <_printf_float+0x310>
 8003918:	ee18 3a10 	vmov	r3, s16
 800391c:	4652      	mov	r2, sl
 800391e:	4631      	mov	r1, r6
 8003920:	4628      	mov	r0, r5
 8003922:	47b8      	blx	r7
 8003924:	3001      	adds	r0, #1
 8003926:	d1be      	bne.n	80038a6 <_printf_float+0x32a>
 8003928:	e689      	b.n	800363e <_printf_float+0xc2>
 800392a:	9a05      	ldr	r2, [sp, #20]
 800392c:	464b      	mov	r3, r9
 800392e:	4442      	add	r2, r8
 8003930:	4631      	mov	r1, r6
 8003932:	4628      	mov	r0, r5
 8003934:	47b8      	blx	r7
 8003936:	3001      	adds	r0, #1
 8003938:	d1c1      	bne.n	80038be <_printf_float+0x342>
 800393a:	e680      	b.n	800363e <_printf_float+0xc2>
 800393c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800393e:	2a01      	cmp	r2, #1
 8003940:	dc01      	bgt.n	8003946 <_printf_float+0x3ca>
 8003942:	07db      	lsls	r3, r3, #31
 8003944:	d538      	bpl.n	80039b8 <_printf_float+0x43c>
 8003946:	2301      	movs	r3, #1
 8003948:	4642      	mov	r2, r8
 800394a:	4631      	mov	r1, r6
 800394c:	4628      	mov	r0, r5
 800394e:	47b8      	blx	r7
 8003950:	3001      	adds	r0, #1
 8003952:	f43f ae74 	beq.w	800363e <_printf_float+0xc2>
 8003956:	ee18 3a10 	vmov	r3, s16
 800395a:	4652      	mov	r2, sl
 800395c:	4631      	mov	r1, r6
 800395e:	4628      	mov	r0, r5
 8003960:	47b8      	blx	r7
 8003962:	3001      	adds	r0, #1
 8003964:	f43f ae6b 	beq.w	800363e <_printf_float+0xc2>
 8003968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800396c:	2200      	movs	r2, #0
 800396e:	2300      	movs	r3, #0
 8003970:	f7fd f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003974:	b9d8      	cbnz	r0, 80039ae <_printf_float+0x432>
 8003976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003978:	f108 0201 	add.w	r2, r8, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	d10e      	bne.n	80039a6 <_printf_float+0x42a>
 8003988:	e659      	b.n	800363e <_printf_float+0xc2>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	47b8      	blx	r7
 8003994:	3001      	adds	r0, #1
 8003996:	f43f ae52 	beq.w	800363e <_printf_float+0xc2>
 800399a:	f108 0801 	add.w	r8, r8, #1
 800399e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4543      	cmp	r3, r8
 80039a4:	dcf1      	bgt.n	800398a <_printf_float+0x40e>
 80039a6:	464b      	mov	r3, r9
 80039a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039ac:	e6dc      	b.n	8003768 <_printf_float+0x1ec>
 80039ae:	f04f 0800 	mov.w	r8, #0
 80039b2:	f104 0a1a 	add.w	sl, r4, #26
 80039b6:	e7f2      	b.n	800399e <_printf_float+0x422>
 80039b8:	2301      	movs	r3, #1
 80039ba:	4642      	mov	r2, r8
 80039bc:	e7df      	b.n	800397e <_printf_float+0x402>
 80039be:	2301      	movs	r3, #1
 80039c0:	464a      	mov	r2, r9
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b8      	blx	r7
 80039c8:	3001      	adds	r0, #1
 80039ca:	f43f ae38 	beq.w	800363e <_printf_float+0xc2>
 80039ce:	f108 0801 	add.w	r8, r8, #1
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039d6:	1a5b      	subs	r3, r3, r1
 80039d8:	4543      	cmp	r3, r8
 80039da:	dcf0      	bgt.n	80039be <_printf_float+0x442>
 80039dc:	e6fa      	b.n	80037d4 <_printf_float+0x258>
 80039de:	f04f 0800 	mov.w	r8, #0
 80039e2:	f104 0919 	add.w	r9, r4, #25
 80039e6:	e7f4      	b.n	80039d2 <_printf_float+0x456>

080039e8 <_printf_common>:
 80039e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	4616      	mov	r6, r2
 80039ee:	4699      	mov	r9, r3
 80039f0:	688a      	ldr	r2, [r1, #8]
 80039f2:	690b      	ldr	r3, [r1, #16]
 80039f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bfb8      	it	lt
 80039fc:	4613      	movlt	r3, r2
 80039fe:	6033      	str	r3, [r6, #0]
 8003a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a04:	4607      	mov	r7, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	b10a      	cbz	r2, 8003a0e <_printf_common+0x26>
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	6033      	str	r3, [r6, #0]
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	0699      	lsls	r1, r3, #26
 8003a12:	bf42      	ittt	mi
 8003a14:	6833      	ldrmi	r3, [r6, #0]
 8003a16:	3302      	addmi	r3, #2
 8003a18:	6033      	strmi	r3, [r6, #0]
 8003a1a:	6825      	ldr	r5, [r4, #0]
 8003a1c:	f015 0506 	ands.w	r5, r5, #6
 8003a20:	d106      	bne.n	8003a30 <_printf_common+0x48>
 8003a22:	f104 0a19 	add.w	sl, r4, #25
 8003a26:	68e3      	ldr	r3, [r4, #12]
 8003a28:	6832      	ldr	r2, [r6, #0]
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	42ab      	cmp	r3, r5
 8003a2e:	dc26      	bgt.n	8003a7e <_printf_common+0x96>
 8003a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a34:	1e13      	subs	r3, r2, #0
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	bf18      	it	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	0692      	lsls	r2, r2, #26
 8003a3e:	d42b      	bmi.n	8003a98 <_printf_common+0xb0>
 8003a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a44:	4649      	mov	r1, r9
 8003a46:	4638      	mov	r0, r7
 8003a48:	47c0      	blx	r8
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d01e      	beq.n	8003a8c <_printf_common+0xa4>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	68e5      	ldr	r5, [r4, #12]
 8003a52:	6832      	ldr	r2, [r6, #0]
 8003a54:	f003 0306 	and.w	r3, r3, #6
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	bf08      	it	eq
 8003a5c:	1aad      	subeq	r5, r5, r2
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	bf0c      	ite	eq
 8003a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a68:	2500      	movne	r5, #0
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bfc4      	itt	gt
 8003a6e:	1a9b      	subgt	r3, r3, r2
 8003a70:	18ed      	addgt	r5, r5, r3
 8003a72:	2600      	movs	r6, #0
 8003a74:	341a      	adds	r4, #26
 8003a76:	42b5      	cmp	r5, r6
 8003a78:	d11a      	bne.n	8003ab0 <_printf_common+0xc8>
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	e008      	b.n	8003a90 <_printf_common+0xa8>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4652      	mov	r2, sl
 8003a82:	4649      	mov	r1, r9
 8003a84:	4638      	mov	r0, r7
 8003a86:	47c0      	blx	r8
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d103      	bne.n	8003a94 <_printf_common+0xac>
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a94:	3501      	adds	r5, #1
 8003a96:	e7c6      	b.n	8003a26 <_printf_common+0x3e>
 8003a98:	18e1      	adds	r1, r4, r3
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	2030      	movs	r0, #48	; 0x30
 8003a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aa2:	4422      	add	r2, r4
 8003aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aac:	3302      	adds	r3, #2
 8003aae:	e7c7      	b.n	8003a40 <_printf_common+0x58>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	47c0      	blx	r8
 8003aba:	3001      	adds	r0, #1
 8003abc:	d0e6      	beq.n	8003a8c <_printf_common+0xa4>
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7d9      	b.n	8003a76 <_printf_common+0x8e>
	...

08003ac4 <_printf_i>:
 8003ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	460c      	mov	r4, r1
 8003aca:	4691      	mov	r9, r2
 8003acc:	7e27      	ldrb	r7, [r4, #24]
 8003ace:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ad0:	2f78      	cmp	r7, #120	; 0x78
 8003ad2:	4680      	mov	r8, r0
 8003ad4:	469a      	mov	sl, r3
 8003ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ada:	d807      	bhi.n	8003aec <_printf_i+0x28>
 8003adc:	2f62      	cmp	r7, #98	; 0x62
 8003ade:	d80a      	bhi.n	8003af6 <_printf_i+0x32>
 8003ae0:	2f00      	cmp	r7, #0
 8003ae2:	f000 80d8 	beq.w	8003c96 <_printf_i+0x1d2>
 8003ae6:	2f58      	cmp	r7, #88	; 0x58
 8003ae8:	f000 80a3 	beq.w	8003c32 <_printf_i+0x16e>
 8003aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003af4:	e03a      	b.n	8003b6c <_printf_i+0xa8>
 8003af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003afa:	2b15      	cmp	r3, #21
 8003afc:	d8f6      	bhi.n	8003aec <_printf_i+0x28>
 8003afe:	a001      	add	r0, pc, #4	; (adr r0, 8003b04 <_printf_i+0x40>)
 8003b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b04:	08003b5d 	.word	0x08003b5d
 8003b08:	08003b71 	.word	0x08003b71
 8003b0c:	08003aed 	.word	0x08003aed
 8003b10:	08003aed 	.word	0x08003aed
 8003b14:	08003aed 	.word	0x08003aed
 8003b18:	08003aed 	.word	0x08003aed
 8003b1c:	08003b71 	.word	0x08003b71
 8003b20:	08003aed 	.word	0x08003aed
 8003b24:	08003aed 	.word	0x08003aed
 8003b28:	08003aed 	.word	0x08003aed
 8003b2c:	08003aed 	.word	0x08003aed
 8003b30:	08003c7d 	.word	0x08003c7d
 8003b34:	08003ba1 	.word	0x08003ba1
 8003b38:	08003c5f 	.word	0x08003c5f
 8003b3c:	08003aed 	.word	0x08003aed
 8003b40:	08003aed 	.word	0x08003aed
 8003b44:	08003c9f 	.word	0x08003c9f
 8003b48:	08003aed 	.word	0x08003aed
 8003b4c:	08003ba1 	.word	0x08003ba1
 8003b50:	08003aed 	.word	0x08003aed
 8003b54:	08003aed 	.word	0x08003aed
 8003b58:	08003c67 	.word	0x08003c67
 8003b5c:	680b      	ldr	r3, [r1, #0]
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	600a      	str	r2, [r1, #0]
 8003b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0a3      	b.n	8003cb8 <_printf_i+0x1f4>
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	6808      	ldr	r0, [r1, #0]
 8003b74:	062e      	lsls	r6, r5, #24
 8003b76:	f100 0304 	add.w	r3, r0, #4
 8003b7a:	d50a      	bpl.n	8003b92 <_printf_i+0xce>
 8003b7c:	6805      	ldr	r5, [r0, #0]
 8003b7e:	600b      	str	r3, [r1, #0]
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	da03      	bge.n	8003b8c <_printf_i+0xc8>
 8003b84:	232d      	movs	r3, #45	; 0x2d
 8003b86:	426d      	negs	r5, r5
 8003b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b8c:	485e      	ldr	r0, [pc, #376]	; (8003d08 <_printf_i+0x244>)
 8003b8e:	230a      	movs	r3, #10
 8003b90:	e019      	b.n	8003bc6 <_printf_i+0x102>
 8003b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b96:	6805      	ldr	r5, [r0, #0]
 8003b98:	600b      	str	r3, [r1, #0]
 8003b9a:	bf18      	it	ne
 8003b9c:	b22d      	sxthne	r5, r5
 8003b9e:	e7ef      	b.n	8003b80 <_printf_i+0xbc>
 8003ba0:	680b      	ldr	r3, [r1, #0]
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	1d18      	adds	r0, r3, #4
 8003ba6:	6008      	str	r0, [r1, #0]
 8003ba8:	0628      	lsls	r0, r5, #24
 8003baa:	d501      	bpl.n	8003bb0 <_printf_i+0xec>
 8003bac:	681d      	ldr	r5, [r3, #0]
 8003bae:	e002      	b.n	8003bb6 <_printf_i+0xf2>
 8003bb0:	0669      	lsls	r1, r5, #25
 8003bb2:	d5fb      	bpl.n	8003bac <_printf_i+0xe8>
 8003bb4:	881d      	ldrh	r5, [r3, #0]
 8003bb6:	4854      	ldr	r0, [pc, #336]	; (8003d08 <_printf_i+0x244>)
 8003bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8003bba:	bf0c      	ite	eq
 8003bbc:	2308      	moveq	r3, #8
 8003bbe:	230a      	movne	r3, #10
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bc6:	6866      	ldr	r6, [r4, #4]
 8003bc8:	60a6      	str	r6, [r4, #8]
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	bfa2      	ittt	ge
 8003bce:	6821      	ldrge	r1, [r4, #0]
 8003bd0:	f021 0104 	bicge.w	r1, r1, #4
 8003bd4:	6021      	strge	r1, [r4, #0]
 8003bd6:	b90d      	cbnz	r5, 8003bdc <_printf_i+0x118>
 8003bd8:	2e00      	cmp	r6, #0
 8003bda:	d04d      	beq.n	8003c78 <_printf_i+0x1b4>
 8003bdc:	4616      	mov	r6, r2
 8003bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8003be2:	fb03 5711 	mls	r7, r3, r1, r5
 8003be6:	5dc7      	ldrb	r7, [r0, r7]
 8003be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bec:	462f      	mov	r7, r5
 8003bee:	42bb      	cmp	r3, r7
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	d9f4      	bls.n	8003bde <_printf_i+0x11a>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d10b      	bne.n	8003c10 <_printf_i+0x14c>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	07df      	lsls	r7, r3, #31
 8003bfc:	d508      	bpl.n	8003c10 <_printf_i+0x14c>
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	6861      	ldr	r1, [r4, #4]
 8003c02:	4299      	cmp	r1, r3
 8003c04:	bfde      	ittt	le
 8003c06:	2330      	movle	r3, #48	; 0x30
 8003c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003c10:	1b92      	subs	r2, r2, r6
 8003c12:	6122      	str	r2, [r4, #16]
 8003c14:	f8cd a000 	str.w	sl, [sp]
 8003c18:	464b      	mov	r3, r9
 8003c1a:	aa03      	add	r2, sp, #12
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f7ff fee2 	bl	80039e8 <_printf_common>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d14c      	bne.n	8003cc2 <_printf_i+0x1fe>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c2c:	b004      	add	sp, #16
 8003c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c32:	4835      	ldr	r0, [pc, #212]	; (8003d08 <_printf_i+0x244>)
 8003c34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	680e      	ldr	r6, [r1, #0]
 8003c3c:	061f      	lsls	r7, r3, #24
 8003c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c42:	600e      	str	r6, [r1, #0]
 8003c44:	d514      	bpl.n	8003c70 <_printf_i+0x1ac>
 8003c46:	07d9      	lsls	r1, r3, #31
 8003c48:	bf44      	itt	mi
 8003c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c4e:	6023      	strmi	r3, [r4, #0]
 8003c50:	b91d      	cbnz	r5, 8003c5a <_printf_i+0x196>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	f023 0320 	bic.w	r3, r3, #32
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	e7b0      	b.n	8003bc0 <_printf_i+0xfc>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	f043 0320 	orr.w	r3, r3, #32
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	2378      	movs	r3, #120	; 0x78
 8003c68:	4828      	ldr	r0, [pc, #160]	; (8003d0c <_printf_i+0x248>)
 8003c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c6e:	e7e3      	b.n	8003c38 <_printf_i+0x174>
 8003c70:	065e      	lsls	r6, r3, #25
 8003c72:	bf48      	it	mi
 8003c74:	b2ad      	uxthmi	r5, r5
 8003c76:	e7e6      	b.n	8003c46 <_printf_i+0x182>
 8003c78:	4616      	mov	r6, r2
 8003c7a:	e7bb      	b.n	8003bf4 <_printf_i+0x130>
 8003c7c:	680b      	ldr	r3, [r1, #0]
 8003c7e:	6826      	ldr	r6, [r4, #0]
 8003c80:	6960      	ldr	r0, [r4, #20]
 8003c82:	1d1d      	adds	r5, r3, #4
 8003c84:	600d      	str	r5, [r1, #0]
 8003c86:	0635      	lsls	r5, r6, #24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	d501      	bpl.n	8003c90 <_printf_i+0x1cc>
 8003c8c:	6018      	str	r0, [r3, #0]
 8003c8e:	e002      	b.n	8003c96 <_printf_i+0x1d2>
 8003c90:	0671      	lsls	r1, r6, #25
 8003c92:	d5fb      	bpl.n	8003c8c <_printf_i+0x1c8>
 8003c94:	8018      	strh	r0, [r3, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	6123      	str	r3, [r4, #16]
 8003c9a:	4616      	mov	r6, r2
 8003c9c:	e7ba      	b.n	8003c14 <_printf_i+0x150>
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	1d1a      	adds	r2, r3, #4
 8003ca2:	600a      	str	r2, [r1, #0]
 8003ca4:	681e      	ldr	r6, [r3, #0]
 8003ca6:	6862      	ldr	r2, [r4, #4]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7fc fa98 	bl	80001e0 <memchr>
 8003cb0:	b108      	cbz	r0, 8003cb6 <_printf_i+0x1f2>
 8003cb2:	1b80      	subs	r0, r0, r6
 8003cb4:	6060      	str	r0, [r4, #4]
 8003cb6:	6863      	ldr	r3, [r4, #4]
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc0:	e7a8      	b.n	8003c14 <_printf_i+0x150>
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	4640      	mov	r0, r8
 8003cca:	47d0      	blx	sl
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d0ab      	beq.n	8003c28 <_printf_i+0x164>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	079b      	lsls	r3, r3, #30
 8003cd4:	d413      	bmi.n	8003cfe <_printf_i+0x23a>
 8003cd6:	68e0      	ldr	r0, [r4, #12]
 8003cd8:	9b03      	ldr	r3, [sp, #12]
 8003cda:	4298      	cmp	r0, r3
 8003cdc:	bfb8      	it	lt
 8003cde:	4618      	movlt	r0, r3
 8003ce0:	e7a4      	b.n	8003c2c <_printf_i+0x168>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	47d0      	blx	sl
 8003cec:	3001      	adds	r0, #1
 8003cee:	d09b      	beq.n	8003c28 <_printf_i+0x164>
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	68e3      	ldr	r3, [r4, #12]
 8003cf4:	9903      	ldr	r1, [sp, #12]
 8003cf6:	1a5b      	subs	r3, r3, r1
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	dcf2      	bgt.n	8003ce2 <_printf_i+0x21e>
 8003cfc:	e7eb      	b.n	8003cd6 <_printf_i+0x212>
 8003cfe:	2500      	movs	r5, #0
 8003d00:	f104 0619 	add.w	r6, r4, #25
 8003d04:	e7f5      	b.n	8003cf2 <_printf_i+0x22e>
 8003d06:	bf00      	nop
 8003d08:	08005d7e 	.word	0x08005d7e
 8003d0c:	08005d8f 	.word	0x08005d8f

08003d10 <iprintf>:
 8003d10:	b40f      	push	{r0, r1, r2, r3}
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <iprintf+0x2c>)
 8003d14:	b513      	push	{r0, r1, r4, lr}
 8003d16:	681c      	ldr	r4, [r3, #0]
 8003d18:	b124      	cbz	r4, 8003d24 <iprintf+0x14>
 8003d1a:	69a3      	ldr	r3, [r4, #24]
 8003d1c:	b913      	cbnz	r3, 8003d24 <iprintf+0x14>
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff fa56 	bl	80031d0 <__sinit>
 8003d24:	ab05      	add	r3, sp, #20
 8003d26:	9a04      	ldr	r2, [sp, #16]
 8003d28:	68a1      	ldr	r1, [r4, #8]
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f001 fdb5 	bl	800589c <_vfiprintf_r>
 8003d32:	b002      	add	sp, #8
 8003d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d38:	b004      	add	sp, #16
 8003d3a:	4770      	bx	lr
 8003d3c:	20000058 	.word	0x20000058

08003d40 <_puts_r>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	460e      	mov	r6, r1
 8003d44:	4605      	mov	r5, r0
 8003d46:	b118      	cbz	r0, 8003d50 <_puts_r+0x10>
 8003d48:	6983      	ldr	r3, [r0, #24]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <_puts_r+0x10>
 8003d4c:	f7ff fa40 	bl	80031d0 <__sinit>
 8003d50:	69ab      	ldr	r3, [r5, #24]
 8003d52:	68ac      	ldr	r4, [r5, #8]
 8003d54:	b913      	cbnz	r3, 8003d5c <_puts_r+0x1c>
 8003d56:	4628      	mov	r0, r5
 8003d58:	f7ff fa3a 	bl	80031d0 <__sinit>
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <_puts_r+0xd0>)
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	d120      	bne.n	8003da4 <_puts_r+0x64>
 8003d62:	686c      	ldr	r4, [r5, #4]
 8003d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d66:	07db      	lsls	r3, r3, #31
 8003d68:	d405      	bmi.n	8003d76 <_puts_r+0x36>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	0598      	lsls	r0, r3, #22
 8003d6e:	d402      	bmi.n	8003d76 <_puts_r+0x36>
 8003d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d72:	f7ff faf0 	bl	8003356 <__retarget_lock_acquire_recursive>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	0719      	lsls	r1, r3, #28
 8003d7a:	d51d      	bpl.n	8003db8 <_puts_r+0x78>
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	b1db      	cbz	r3, 8003db8 <_puts_r+0x78>
 8003d80:	3e01      	subs	r6, #1
 8003d82:	68a3      	ldr	r3, [r4, #8]
 8003d84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60a3      	str	r3, [r4, #8]
 8003d8c:	bb39      	cbnz	r1, 8003dde <_puts_r+0x9e>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da38      	bge.n	8003e04 <_puts_r+0xc4>
 8003d92:	4622      	mov	r2, r4
 8003d94:	210a      	movs	r1, #10
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f89c 	bl	8003ed4 <__swbuf_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d011      	beq.n	8003dc4 <_puts_r+0x84>
 8003da0:	250a      	movs	r5, #10
 8003da2:	e011      	b.n	8003dc8 <_puts_r+0x88>
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <_puts_r+0xd4>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d101      	bne.n	8003dae <_puts_r+0x6e>
 8003daa:	68ac      	ldr	r4, [r5, #8]
 8003dac:	e7da      	b.n	8003d64 <_puts_r+0x24>
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <_puts_r+0xd8>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	bf08      	it	eq
 8003db4:	68ec      	ldreq	r4, [r5, #12]
 8003db6:	e7d5      	b.n	8003d64 <_puts_r+0x24>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f8ee 	bl	8003f9c <__swsetup_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d0dd      	beq.n	8003d80 <_puts_r+0x40>
 8003dc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dca:	07da      	lsls	r2, r3, #31
 8003dcc:	d405      	bmi.n	8003dda <_puts_r+0x9a>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	059b      	lsls	r3, r3, #22
 8003dd2:	d402      	bmi.n	8003dda <_puts_r+0x9a>
 8003dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dd6:	f7ff fabf 	bl	8003358 <__retarget_lock_release_recursive>
 8003dda:	4628      	mov	r0, r5
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da04      	bge.n	8003dec <_puts_r+0xac>
 8003de2:	69a2      	ldr	r2, [r4, #24]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	dc06      	bgt.n	8003df6 <_puts_r+0xb6>
 8003de8:	290a      	cmp	r1, #10
 8003dea:	d004      	beq.n	8003df6 <_puts_r+0xb6>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	6022      	str	r2, [r4, #0]
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	e7c5      	b.n	8003d82 <_puts_r+0x42>
 8003df6:	4622      	mov	r2, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f86b 	bl	8003ed4 <__swbuf_r>
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d1bf      	bne.n	8003d82 <_puts_r+0x42>
 8003e02:	e7df      	b.n	8003dc4 <_puts_r+0x84>
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	250a      	movs	r5, #10
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	701d      	strb	r5, [r3, #0]
 8003e0e:	e7db      	b.n	8003dc8 <_puts_r+0x88>
 8003e10:	08005d28 	.word	0x08005d28
 8003e14:	08005d48 	.word	0x08005d48
 8003e18:	08005d08 	.word	0x08005d08

08003e1c <puts>:
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <puts+0xc>)
 8003e1e:	4601      	mov	r1, r0
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f7ff bf8d 	b.w	8003d40 <_puts_r>
 8003e26:	bf00      	nop
 8003e28:	20000058 	.word	0x20000058

08003e2c <_sbrk_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4d06      	ldr	r5, [pc, #24]	; (8003e48 <_sbrk_r+0x1c>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	f7fd f8d4 	bl	8000fe4 <_sbrk>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_sbrk_r+0x1a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_sbrk_r+0x1a>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	200003f0 	.word	0x200003f0

08003e4c <__sread>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	460c      	mov	r4, r1
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	f001 fe52 	bl	8005afc <_read_r>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	bfab      	itete	ge
 8003e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e60:	181b      	addge	r3, r3, r0
 8003e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e66:	bfac      	ite	ge
 8003e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e6a:	81a3      	strhlt	r3, [r4, #12]
 8003e6c:	bd10      	pop	{r4, pc}

08003e6e <__swrite>:
 8003e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	461f      	mov	r7, r3
 8003e74:	898b      	ldrh	r3, [r1, #12]
 8003e76:	05db      	lsls	r3, r3, #23
 8003e78:	4605      	mov	r5, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	d505      	bpl.n	8003e8c <__swrite+0x1e>
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	f001 f876 	bl	8004f78 <_lseek_r>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	f000 b869 	b.w	8003f78 <_write_r>

08003ea6 <__sseek>:
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eae:	f001 f863 	bl	8004f78 <_lseek_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	bf15      	itete	ne
 8003eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ec2:	81a3      	strheq	r3, [r4, #12]
 8003ec4:	bf18      	it	ne
 8003ec6:	81a3      	strhne	r3, [r4, #12]
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <__sclose>:
 8003eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ece:	f000 b8f1 	b.w	80040b4 <_close_r>
	...

08003ed4 <__swbuf_r>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	4605      	mov	r5, r0
 8003edc:	b118      	cbz	r0, 8003ee6 <__swbuf_r+0x12>
 8003ede:	6983      	ldr	r3, [r0, #24]
 8003ee0:	b90b      	cbnz	r3, 8003ee6 <__swbuf_r+0x12>
 8003ee2:	f7ff f975 	bl	80031d0 <__sinit>
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <__swbuf_r+0x98>)
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d12b      	bne.n	8003f44 <__swbuf_r+0x70>
 8003eec:	686c      	ldr	r4, [r5, #4]
 8003eee:	69a3      	ldr	r3, [r4, #24]
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	071a      	lsls	r2, r3, #28
 8003ef6:	d52f      	bpl.n	8003f58 <__swbuf_r+0x84>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b36b      	cbz	r3, 8003f58 <__swbuf_r+0x84>
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	1ac0      	subs	r0, r0, r3
 8003f02:	6963      	ldr	r3, [r4, #20]
 8003f04:	b2f6      	uxtb	r6, r6
 8003f06:	4283      	cmp	r3, r0
 8003f08:	4637      	mov	r7, r6
 8003f0a:	dc04      	bgt.n	8003f16 <__swbuf_r+0x42>
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 ffe0 	bl	8004ed4 <_fflush_r>
 8003f14:	bb30      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f16:	68a3      	ldr	r3, [r4, #8]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60a3      	str	r3, [r4, #8]
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	701e      	strb	r6, [r3, #0]
 8003f24:	6963      	ldr	r3, [r4, #20]
 8003f26:	3001      	adds	r0, #1
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	d004      	beq.n	8003f36 <__swbuf_r+0x62>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d506      	bpl.n	8003f40 <__swbuf_r+0x6c>
 8003f32:	2e0a      	cmp	r6, #10
 8003f34:	d104      	bne.n	8003f40 <__swbuf_r+0x6c>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 ffcb 	bl	8004ed4 <_fflush_r>
 8003f3e:	b988      	cbnz	r0, 8003f64 <__swbuf_r+0x90>
 8003f40:	4638      	mov	r0, r7
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <__swbuf_r+0x9c>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	d101      	bne.n	8003f4e <__swbuf_r+0x7a>
 8003f4a:	68ac      	ldr	r4, [r5, #8]
 8003f4c:	e7cf      	b.n	8003eee <__swbuf_r+0x1a>
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <__swbuf_r+0xa0>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	bf08      	it	eq
 8003f54:	68ec      	ldreq	r4, [r5, #12]
 8003f56:	e7ca      	b.n	8003eee <__swbuf_r+0x1a>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 f81e 	bl	8003f9c <__swsetup_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0cb      	beq.n	8003efc <__swbuf_r+0x28>
 8003f64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f68:	e7ea      	b.n	8003f40 <__swbuf_r+0x6c>
 8003f6a:	bf00      	nop
 8003f6c:	08005d28 	.word	0x08005d28
 8003f70:	08005d48 	.word	0x08005d48
 8003f74:	08005d08 	.word	0x08005d08

08003f78 <_write_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d07      	ldr	r5, [pc, #28]	; (8003f98 <_write_r+0x20>)
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	4608      	mov	r0, r1
 8003f80:	4611      	mov	r1, r2
 8003f82:	2200      	movs	r2, #0
 8003f84:	602a      	str	r2, [r5, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f7fe fec8 	bl	8002d1c <_write>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_write_r+0x1e>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_write_r+0x1e>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	200003f0 	.word	0x200003f0

08003f9c <__swsetup_r>:
 8003f9c:	4b32      	ldr	r3, [pc, #200]	; (8004068 <__swsetup_r+0xcc>)
 8003f9e:	b570      	push	{r4, r5, r6, lr}
 8003fa0:	681d      	ldr	r5, [r3, #0]
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	b125      	cbz	r5, 8003fb2 <__swsetup_r+0x16>
 8003fa8:	69ab      	ldr	r3, [r5, #24]
 8003faa:	b913      	cbnz	r3, 8003fb2 <__swsetup_r+0x16>
 8003fac:	4628      	mov	r0, r5
 8003fae:	f7ff f90f 	bl	80031d0 <__sinit>
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	; (800406c <__swsetup_r+0xd0>)
 8003fb4:	429c      	cmp	r4, r3
 8003fb6:	d10f      	bne.n	8003fd8 <__swsetup_r+0x3c>
 8003fb8:	686c      	ldr	r4, [r5, #4]
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fc0:	0719      	lsls	r1, r3, #28
 8003fc2:	d42c      	bmi.n	800401e <__swsetup_r+0x82>
 8003fc4:	06dd      	lsls	r5, r3, #27
 8003fc6:	d411      	bmi.n	8003fec <__swsetup_r+0x50>
 8003fc8:	2309      	movs	r3, #9
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd6:	e03e      	b.n	8004056 <__swsetup_r+0xba>
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <__swsetup_r+0xd4>)
 8003fda:	429c      	cmp	r4, r3
 8003fdc:	d101      	bne.n	8003fe2 <__swsetup_r+0x46>
 8003fde:	68ac      	ldr	r4, [r5, #8]
 8003fe0:	e7eb      	b.n	8003fba <__swsetup_r+0x1e>
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <__swsetup_r+0xd8>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	bf08      	it	eq
 8003fe8:	68ec      	ldreq	r4, [r5, #12]
 8003fea:	e7e6      	b.n	8003fba <__swsetup_r+0x1e>
 8003fec:	0758      	lsls	r0, r3, #29
 8003fee:	d512      	bpl.n	8004016 <__swsetup_r+0x7a>
 8003ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff2:	b141      	cbz	r1, 8004006 <__swsetup_r+0x6a>
 8003ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ff8:	4299      	cmp	r1, r3
 8003ffa:	d002      	beq.n	8004002 <__swsetup_r+0x66>
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f001 fbd3 	bl	80057a8 <_free_r>
 8004002:	2300      	movs	r3, #0
 8004004:	6363      	str	r3, [r4, #52]	; 0x34
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	6063      	str	r3, [r4, #4]
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	b94b      	cbnz	r3, 8004036 <__swsetup_r+0x9a>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d003      	beq.n	8004036 <__swsetup_r+0x9a>
 800402e:	4621      	mov	r1, r4
 8004030:	4630      	mov	r0, r6
 8004032:	f000 ffd7 	bl	8004fe4 <__smakebuf_r>
 8004036:	89a0      	ldrh	r0, [r4, #12]
 8004038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800403c:	f010 0301 	ands.w	r3, r0, #1
 8004040:	d00a      	beq.n	8004058 <__swsetup_r+0xbc>
 8004042:	2300      	movs	r3, #0
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	6963      	ldr	r3, [r4, #20]
 8004048:	425b      	negs	r3, r3
 800404a:	61a3      	str	r3, [r4, #24]
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	b943      	cbnz	r3, 8004062 <__swsetup_r+0xc6>
 8004050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004054:	d1ba      	bne.n	8003fcc <__swsetup_r+0x30>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	0781      	lsls	r1, r0, #30
 800405a:	bf58      	it	pl
 800405c:	6963      	ldrpl	r3, [r4, #20]
 800405e:	60a3      	str	r3, [r4, #8]
 8004060:	e7f4      	b.n	800404c <__swsetup_r+0xb0>
 8004062:	2000      	movs	r0, #0
 8004064:	e7f7      	b.n	8004056 <__swsetup_r+0xba>
 8004066:	bf00      	nop
 8004068:	20000058 	.word	0x20000058
 800406c:	08005d28 	.word	0x08005d28
 8004070:	08005d48 	.word	0x08005d48
 8004074:	08005d08 	.word	0x08005d08

08004078 <__assert_func>:
 8004078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800407a:	4614      	mov	r4, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <__assert_func+0x2c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4605      	mov	r5, r0
 8004084:	68d8      	ldr	r0, [r3, #12]
 8004086:	b14c      	cbz	r4, 800409c <__assert_func+0x24>
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <__assert_func+0x30>)
 800408a:	9100      	str	r1, [sp, #0]
 800408c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004090:	4906      	ldr	r1, [pc, #24]	; (80040ac <__assert_func+0x34>)
 8004092:	462b      	mov	r3, r5
 8004094:	f000 ff5a 	bl	8004f4c <fiprintf>
 8004098:	f001 fd42 	bl	8005b20 <abort>
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__assert_func+0x38>)
 800409e:	461c      	mov	r4, r3
 80040a0:	e7f3      	b.n	800408a <__assert_func+0x12>
 80040a2:	bf00      	nop
 80040a4:	20000058 	.word	0x20000058
 80040a8:	08005da0 	.word	0x08005da0
 80040ac:	08005dad 	.word	0x08005dad
 80040b0:	08005ddb 	.word	0x08005ddb

080040b4 <_close_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4d06      	ldr	r5, [pc, #24]	; (80040d0 <_close_r+0x1c>)
 80040b8:	2300      	movs	r3, #0
 80040ba:	4604      	mov	r4, r0
 80040bc:	4608      	mov	r0, r1
 80040be:	602b      	str	r3, [r5, #0]
 80040c0:	f7fe fe5e 	bl	8002d80 <_close>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_close_r+0x1a>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_close_r+0x1a>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	200003f0 	.word	0x200003f0

080040d4 <quorem>:
 80040d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	6903      	ldr	r3, [r0, #16]
 80040da:	690c      	ldr	r4, [r1, #16]
 80040dc:	42a3      	cmp	r3, r4
 80040de:	4607      	mov	r7, r0
 80040e0:	f2c0 8081 	blt.w	80041e6 <quorem+0x112>
 80040e4:	3c01      	subs	r4, #1
 80040e6:	f101 0814 	add.w	r8, r1, #20
 80040ea:	f100 0514 	add.w	r5, r0, #20
 80040ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040fc:	3301      	adds	r3, #1
 80040fe:	429a      	cmp	r2, r3
 8004100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004108:	fbb2 f6f3 	udiv	r6, r2, r3
 800410c:	d331      	bcc.n	8004172 <quorem+0x9e>
 800410e:	f04f 0e00 	mov.w	lr, #0
 8004112:	4640      	mov	r0, r8
 8004114:	46ac      	mov	ip, r5
 8004116:	46f2      	mov	sl, lr
 8004118:	f850 2b04 	ldr.w	r2, [r0], #4
 800411c:	b293      	uxth	r3, r2
 800411e:	fb06 e303 	mla	r3, r6, r3, lr
 8004122:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004126:	b29b      	uxth	r3, r3
 8004128:	ebaa 0303 	sub.w	r3, sl, r3
 800412c:	0c12      	lsrs	r2, r2, #16
 800412e:	f8dc a000 	ldr.w	sl, [ip]
 8004132:	fb06 e202 	mla	r2, r6, r2, lr
 8004136:	fa13 f38a 	uxtah	r3, r3, sl
 800413a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800413e:	fa1f fa82 	uxth.w	sl, r2
 8004142:	f8dc 2000 	ldr.w	r2, [ip]
 8004146:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800414a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800414e:	b29b      	uxth	r3, r3
 8004150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004154:	4581      	cmp	r9, r0
 8004156:	f84c 3b04 	str.w	r3, [ip], #4
 800415a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800415e:	d2db      	bcs.n	8004118 <quorem+0x44>
 8004160:	f855 300b 	ldr.w	r3, [r5, fp]
 8004164:	b92b      	cbnz	r3, 8004172 <quorem+0x9e>
 8004166:	9b01      	ldr	r3, [sp, #4]
 8004168:	3b04      	subs	r3, #4
 800416a:	429d      	cmp	r5, r3
 800416c:	461a      	mov	r2, r3
 800416e:	d32e      	bcc.n	80041ce <quorem+0xfa>
 8004170:	613c      	str	r4, [r7, #16]
 8004172:	4638      	mov	r0, r7
 8004174:	f001 fa08 	bl	8005588 <__mcmp>
 8004178:	2800      	cmp	r0, #0
 800417a:	db24      	blt.n	80041c6 <quorem+0xf2>
 800417c:	3601      	adds	r6, #1
 800417e:	4628      	mov	r0, r5
 8004180:	f04f 0c00 	mov.w	ip, #0
 8004184:	f858 2b04 	ldr.w	r2, [r8], #4
 8004188:	f8d0 e000 	ldr.w	lr, [r0]
 800418c:	b293      	uxth	r3, r2
 800418e:	ebac 0303 	sub.w	r3, ip, r3
 8004192:	0c12      	lsrs	r2, r2, #16
 8004194:	fa13 f38e 	uxtah	r3, r3, lr
 8004198:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800419c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041a6:	45c1      	cmp	r9, r8
 80041a8:	f840 3b04 	str.w	r3, [r0], #4
 80041ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041b0:	d2e8      	bcs.n	8004184 <quorem+0xb0>
 80041b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041ba:	b922      	cbnz	r2, 80041c6 <quorem+0xf2>
 80041bc:	3b04      	subs	r3, #4
 80041be:	429d      	cmp	r5, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	d30a      	bcc.n	80041da <quorem+0x106>
 80041c4:	613c      	str	r4, [r7, #16]
 80041c6:	4630      	mov	r0, r6
 80041c8:	b003      	add	sp, #12
 80041ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	3b04      	subs	r3, #4
 80041d2:	2a00      	cmp	r2, #0
 80041d4:	d1cc      	bne.n	8004170 <quorem+0x9c>
 80041d6:	3c01      	subs	r4, #1
 80041d8:	e7c7      	b.n	800416a <quorem+0x96>
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	3b04      	subs	r3, #4
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d1f0      	bne.n	80041c4 <quorem+0xf0>
 80041e2:	3c01      	subs	r4, #1
 80041e4:	e7eb      	b.n	80041be <quorem+0xea>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e7ee      	b.n	80041c8 <quorem+0xf4>
 80041ea:	0000      	movs	r0, r0
 80041ec:	0000      	movs	r0, r0
	...

080041f0 <_dtoa_r>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	ed2d 8b02 	vpush	{d8}
 80041f8:	ec57 6b10 	vmov	r6, r7, d0
 80041fc:	b095      	sub	sp, #84	; 0x54
 80041fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004200:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004204:	9105      	str	r1, [sp, #20]
 8004206:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800420a:	4604      	mov	r4, r0
 800420c:	9209      	str	r2, [sp, #36]	; 0x24
 800420e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004210:	b975      	cbnz	r5, 8004230 <_dtoa_r+0x40>
 8004212:	2010      	movs	r0, #16
 8004214:	f000 ff26 	bl	8005064 <malloc>
 8004218:	4602      	mov	r2, r0
 800421a:	6260      	str	r0, [r4, #36]	; 0x24
 800421c:	b920      	cbnz	r0, 8004228 <_dtoa_r+0x38>
 800421e:	4bb2      	ldr	r3, [pc, #712]	; (80044e8 <_dtoa_r+0x2f8>)
 8004220:	21ea      	movs	r1, #234	; 0xea
 8004222:	48b2      	ldr	r0, [pc, #712]	; (80044ec <_dtoa_r+0x2fc>)
 8004224:	f7ff ff28 	bl	8004078 <__assert_func>
 8004228:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800422c:	6005      	str	r5, [r0, #0]
 800422e:	60c5      	str	r5, [r0, #12]
 8004230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	b151      	cbz	r1, 800424c <_dtoa_r+0x5c>
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	604a      	str	r2, [r1, #4]
 800423a:	2301      	movs	r3, #1
 800423c:	4093      	lsls	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
 8004240:	4620      	mov	r0, r4
 8004242:	f000 ff63 	bl	800510c <_Bfree>
 8004246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	1e3b      	subs	r3, r7, #0
 800424e:	bfb9      	ittee	lt
 8004250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004254:	9303      	strlt	r3, [sp, #12]
 8004256:	2300      	movge	r3, #0
 8004258:	f8c8 3000 	strge.w	r3, [r8]
 800425c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004260:	4ba3      	ldr	r3, [pc, #652]	; (80044f0 <_dtoa_r+0x300>)
 8004262:	bfbc      	itt	lt
 8004264:	2201      	movlt	r2, #1
 8004266:	f8c8 2000 	strlt.w	r2, [r8]
 800426a:	ea33 0309 	bics.w	r3, r3, r9
 800426e:	d11b      	bne.n	80042a8 <_dtoa_r+0xb8>
 8004270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004272:	f242 730f 	movw	r3, #9999	; 0x270f
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800427c:	4333      	orrs	r3, r6
 800427e:	f000 857a 	beq.w	8004d76 <_dtoa_r+0xb86>
 8004282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004284:	b963      	cbnz	r3, 80042a0 <_dtoa_r+0xb0>
 8004286:	4b9b      	ldr	r3, [pc, #620]	; (80044f4 <_dtoa_r+0x304>)
 8004288:	e024      	b.n	80042d4 <_dtoa_r+0xe4>
 800428a:	4b9b      	ldr	r3, [pc, #620]	; (80044f8 <_dtoa_r+0x308>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	9800      	ldr	r0, [sp, #0]
 8004296:	b015      	add	sp, #84	; 0x54
 8004298:	ecbd 8b02 	vpop	{d8}
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	4b94      	ldr	r3, [pc, #592]	; (80044f4 <_dtoa_r+0x304>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	3303      	adds	r3, #3
 80042a6:	e7f3      	b.n	8004290 <_dtoa_r+0xa0>
 80042a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	ec51 0b17 	vmov	r0, r1, d7
 80042b2:	2300      	movs	r3, #0
 80042b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80042b8:	f7fc fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80042bc:	4680      	mov	r8, r0
 80042be:	b158      	cbz	r0, 80042d8 <_dtoa_r+0xe8>
 80042c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042c2:	2301      	movs	r3, #1
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8551 	beq.w	8004d70 <_dtoa_r+0xb80>
 80042ce:	488b      	ldr	r0, [pc, #556]	; (80044fc <_dtoa_r+0x30c>)
 80042d0:	6018      	str	r0, [r3, #0]
 80042d2:	1e43      	subs	r3, r0, #1
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	e7dd      	b.n	8004294 <_dtoa_r+0xa4>
 80042d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80042dc:	aa12      	add	r2, sp, #72	; 0x48
 80042de:	a913      	add	r1, sp, #76	; 0x4c
 80042e0:	4620      	mov	r0, r4
 80042e2:	f001 f9f5 	bl	80056d0 <__d2b>
 80042e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80042ea:	4683      	mov	fp, r0
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	d07c      	beq.n	80043ea <_dtoa_r+0x1fa>
 80042f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80042f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80042fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004302:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800430a:	4b7d      	ldr	r3, [pc, #500]	; (8004500 <_dtoa_r+0x310>)
 800430c:	2200      	movs	r2, #0
 800430e:	4630      	mov	r0, r6
 8004310:	4639      	mov	r1, r7
 8004312:	f7fb ffb9 	bl	8000288 <__aeabi_dsub>
 8004316:	a36e      	add	r3, pc, #440	; (adr r3, 80044d0 <_dtoa_r+0x2e0>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f7fc f96c 	bl	80005f8 <__aeabi_dmul>
 8004320:	a36d      	add	r3, pc, #436	; (adr r3, 80044d8 <_dtoa_r+0x2e8>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fb ffb1 	bl	800028c <__adddf3>
 800432a:	4606      	mov	r6, r0
 800432c:	4628      	mov	r0, r5
 800432e:	460f      	mov	r7, r1
 8004330:	f7fc f8f8 	bl	8000524 <__aeabi_i2d>
 8004334:	a36a      	add	r3, pc, #424	; (adr r3, 80044e0 <_dtoa_r+0x2f0>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc f95d 	bl	80005f8 <__aeabi_dmul>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4630      	mov	r0, r6
 8004344:	4639      	mov	r1, r7
 8004346:	f7fb ffa1 	bl	800028c <__adddf3>
 800434a:	4606      	mov	r6, r0
 800434c:	460f      	mov	r7, r1
 800434e:	f7fc fc03 	bl	8000b58 <__aeabi_d2iz>
 8004352:	2200      	movs	r2, #0
 8004354:	4682      	mov	sl, r0
 8004356:	2300      	movs	r3, #0
 8004358:	4630      	mov	r0, r6
 800435a:	4639      	mov	r1, r7
 800435c:	f7fc fbbe 	bl	8000adc <__aeabi_dcmplt>
 8004360:	b148      	cbz	r0, 8004376 <_dtoa_r+0x186>
 8004362:	4650      	mov	r0, sl
 8004364:	f7fc f8de 	bl	8000524 <__aeabi_i2d>
 8004368:	4632      	mov	r2, r6
 800436a:	463b      	mov	r3, r7
 800436c:	f7fc fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8004370:	b908      	cbnz	r0, 8004376 <_dtoa_r+0x186>
 8004372:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004376:	f1ba 0f16 	cmp.w	sl, #22
 800437a:	d854      	bhi.n	8004426 <_dtoa_r+0x236>
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <_dtoa_r+0x314>)
 800437e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800438a:	f7fc fba7 	bl	8000adc <__aeabi_dcmplt>
 800438e:	2800      	cmp	r0, #0
 8004390:	d04b      	beq.n	800442a <_dtoa_r+0x23a>
 8004392:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004396:	2300      	movs	r3, #0
 8004398:	930e      	str	r3, [sp, #56]	; 0x38
 800439a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800439c:	1b5d      	subs	r5, r3, r5
 800439e:	1e6b      	subs	r3, r5, #1
 80043a0:	9304      	str	r3, [sp, #16]
 80043a2:	bf43      	ittte	mi
 80043a4:	2300      	movmi	r3, #0
 80043a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80043aa:	9304      	strmi	r3, [sp, #16]
 80043ac:	f04f 0800 	movpl.w	r8, #0
 80043b0:	f1ba 0f00 	cmp.w	sl, #0
 80043b4:	db3b      	blt.n	800442e <_dtoa_r+0x23e>
 80043b6:	9b04      	ldr	r3, [sp, #16]
 80043b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80043bc:	4453      	add	r3, sl
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9306      	str	r3, [sp, #24]
 80043c4:	9b05      	ldr	r3, [sp, #20]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d869      	bhi.n	800449e <_dtoa_r+0x2ae>
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	bfc4      	itt	gt
 80043ce:	3b04      	subgt	r3, #4
 80043d0:	9305      	strgt	r3, [sp, #20]
 80043d2:	9b05      	ldr	r3, [sp, #20]
 80043d4:	f1a3 0302 	sub.w	r3, r3, #2
 80043d8:	bfcc      	ite	gt
 80043da:	2500      	movgt	r5, #0
 80043dc:	2501      	movle	r5, #1
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d869      	bhi.n	80044b6 <_dtoa_r+0x2c6>
 80043e2:	e8df f003 	tbb	[pc, r3]
 80043e6:	4e2c      	.short	0x4e2c
 80043e8:	5a4c      	.short	0x5a4c
 80043ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80043ee:	441d      	add	r5, r3
 80043f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	bfc1      	itttt	gt
 80043f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004400:	fa09 f303 	lslgt.w	r3, r9, r3
 8004404:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004408:	bfda      	itte	le
 800440a:	f1c3 0320 	rsble	r3, r3, #32
 800440e:	fa06 f003 	lslle.w	r0, r6, r3
 8004412:	4318      	orrgt	r0, r3
 8004414:	f7fc f876 	bl	8000504 <__aeabi_ui2d>
 8004418:	2301      	movs	r3, #1
 800441a:	4606      	mov	r6, r0
 800441c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004420:	3d01      	subs	r5, #1
 8004422:	9310      	str	r3, [sp, #64]	; 0x40
 8004424:	e771      	b.n	800430a <_dtoa_r+0x11a>
 8004426:	2301      	movs	r3, #1
 8004428:	e7b6      	b.n	8004398 <_dtoa_r+0x1a8>
 800442a:	900e      	str	r0, [sp, #56]	; 0x38
 800442c:	e7b5      	b.n	800439a <_dtoa_r+0x1aa>
 800442e:	f1ca 0300 	rsb	r3, sl, #0
 8004432:	9306      	str	r3, [sp, #24]
 8004434:	2300      	movs	r3, #0
 8004436:	eba8 080a 	sub.w	r8, r8, sl
 800443a:	930d      	str	r3, [sp, #52]	; 0x34
 800443c:	e7c2      	b.n	80043c4 <_dtoa_r+0x1d4>
 800443e:	2300      	movs	r3, #0
 8004440:	9308      	str	r3, [sp, #32]
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	dc39      	bgt.n	80044bc <_dtoa_r+0x2cc>
 8004448:	f04f 0901 	mov.w	r9, #1
 800444c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004450:	464b      	mov	r3, r9
 8004452:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004456:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004458:	2200      	movs	r2, #0
 800445a:	6042      	str	r2, [r0, #4]
 800445c:	2204      	movs	r2, #4
 800445e:	f102 0614 	add.w	r6, r2, #20
 8004462:	429e      	cmp	r6, r3
 8004464:	6841      	ldr	r1, [r0, #4]
 8004466:	d92f      	bls.n	80044c8 <_dtoa_r+0x2d8>
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fe0f 	bl	800508c <_Balloc>
 800446e:	9000      	str	r0, [sp, #0]
 8004470:	2800      	cmp	r0, #0
 8004472:	d14b      	bne.n	800450c <_dtoa_r+0x31c>
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <_dtoa_r+0x318>)
 8004476:	4602      	mov	r2, r0
 8004478:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800447c:	e6d1      	b.n	8004222 <_dtoa_r+0x32>
 800447e:	2301      	movs	r3, #1
 8004480:	e7de      	b.n	8004440 <_dtoa_r+0x250>
 8004482:	2300      	movs	r3, #0
 8004484:	9308      	str	r3, [sp, #32]
 8004486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004488:	eb0a 0903 	add.w	r9, sl, r3
 800448c:	f109 0301 	add.w	r3, r9, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	bfb8      	it	lt
 8004496:	2301      	movlt	r3, #1
 8004498:	e7dd      	b.n	8004456 <_dtoa_r+0x266>
 800449a:	2301      	movs	r3, #1
 800449c:	e7f2      	b.n	8004484 <_dtoa_r+0x294>
 800449e:	2501      	movs	r5, #1
 80044a0:	2300      	movs	r3, #0
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	9508      	str	r5, [sp, #32]
 80044a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80044b0:	2312      	movs	r3, #18
 80044b2:	9209      	str	r2, [sp, #36]	; 0x24
 80044b4:	e7cf      	b.n	8004456 <_dtoa_r+0x266>
 80044b6:	2301      	movs	r3, #1
 80044b8:	9308      	str	r3, [sp, #32]
 80044ba:	e7f4      	b.n	80044a6 <_dtoa_r+0x2b6>
 80044bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80044c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80044c4:	464b      	mov	r3, r9
 80044c6:	e7c6      	b.n	8004456 <_dtoa_r+0x266>
 80044c8:	3101      	adds	r1, #1
 80044ca:	6041      	str	r1, [r0, #4]
 80044cc:	0052      	lsls	r2, r2, #1
 80044ce:	e7c6      	b.n	800445e <_dtoa_r+0x26e>
 80044d0:	636f4361 	.word	0x636f4361
 80044d4:	3fd287a7 	.word	0x3fd287a7
 80044d8:	8b60c8b3 	.word	0x8b60c8b3
 80044dc:	3fc68a28 	.word	0x3fc68a28
 80044e0:	509f79fb 	.word	0x509f79fb
 80044e4:	3fd34413 	.word	0x3fd34413
 80044e8:	08005de9 	.word	0x08005de9
 80044ec:	08005e00 	.word	0x08005e00
 80044f0:	7ff00000 	.word	0x7ff00000
 80044f4:	08005de5 	.word	0x08005de5
 80044f8:	08005ddc 	.word	0x08005ddc
 80044fc:	08005d7d 	.word	0x08005d7d
 8004500:	3ff80000 	.word	0x3ff80000
 8004504:	08005ef8 	.word	0x08005ef8
 8004508:	08005e5f 	.word	0x08005e5f
 800450c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450e:	9a00      	ldr	r2, [sp, #0]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	2b0e      	cmp	r3, #14
 8004516:	f200 80ad 	bhi.w	8004674 <_dtoa_r+0x484>
 800451a:	2d00      	cmp	r5, #0
 800451c:	f000 80aa 	beq.w	8004674 <_dtoa_r+0x484>
 8004520:	f1ba 0f00 	cmp.w	sl, #0
 8004524:	dd36      	ble.n	8004594 <_dtoa_r+0x3a4>
 8004526:	4ac3      	ldr	r2, [pc, #780]	; (8004834 <_dtoa_r+0x644>)
 8004528:	f00a 030f 	and.w	r3, sl, #15
 800452c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004530:	ed93 7b00 	vldr	d7, [r3]
 8004534:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004538:	ea4f 172a 	mov.w	r7, sl, asr #4
 800453c:	eeb0 8a47 	vmov.f32	s16, s14
 8004540:	eef0 8a67 	vmov.f32	s17, s15
 8004544:	d016      	beq.n	8004574 <_dtoa_r+0x384>
 8004546:	4bbc      	ldr	r3, [pc, #752]	; (8004838 <_dtoa_r+0x648>)
 8004548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800454c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004550:	f7fc f97c 	bl	800084c <__aeabi_ddiv>
 8004554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004558:	f007 070f 	and.w	r7, r7, #15
 800455c:	2503      	movs	r5, #3
 800455e:	4eb6      	ldr	r6, [pc, #728]	; (8004838 <_dtoa_r+0x648>)
 8004560:	b957      	cbnz	r7, 8004578 <_dtoa_r+0x388>
 8004562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004566:	ec53 2b18 	vmov	r2, r3, d8
 800456a:	f7fc f96f 	bl	800084c <__aeabi_ddiv>
 800456e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004572:	e029      	b.n	80045c8 <_dtoa_r+0x3d8>
 8004574:	2502      	movs	r5, #2
 8004576:	e7f2      	b.n	800455e <_dtoa_r+0x36e>
 8004578:	07f9      	lsls	r1, r7, #31
 800457a:	d508      	bpl.n	800458e <_dtoa_r+0x39e>
 800457c:	ec51 0b18 	vmov	r0, r1, d8
 8004580:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004584:	f7fc f838 	bl	80005f8 <__aeabi_dmul>
 8004588:	ec41 0b18 	vmov	d8, r0, r1
 800458c:	3501      	adds	r5, #1
 800458e:	107f      	asrs	r7, r7, #1
 8004590:	3608      	adds	r6, #8
 8004592:	e7e5      	b.n	8004560 <_dtoa_r+0x370>
 8004594:	f000 80a6 	beq.w	80046e4 <_dtoa_r+0x4f4>
 8004598:	f1ca 0600 	rsb	r6, sl, #0
 800459c:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <_dtoa_r+0x644>)
 800459e:	4fa6      	ldr	r7, [pc, #664]	; (8004838 <_dtoa_r+0x648>)
 80045a0:	f006 020f 	and.w	r2, r6, #15
 80045a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045b0:	f7fc f822 	bl	80005f8 <__aeabi_dmul>
 80045b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b8:	1136      	asrs	r6, r6, #4
 80045ba:	2300      	movs	r3, #0
 80045bc:	2502      	movs	r5, #2
 80045be:	2e00      	cmp	r6, #0
 80045c0:	f040 8085 	bne.w	80046ce <_dtoa_r+0x4de>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1d2      	bne.n	800456e <_dtoa_r+0x37e>
 80045c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 808c 	beq.w	80046e8 <_dtoa_r+0x4f8>
 80045d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045d4:	4b99      	ldr	r3, [pc, #612]	; (800483c <_dtoa_r+0x64c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	4630      	mov	r0, r6
 80045da:	4639      	mov	r1, r7
 80045dc:	f7fc fa7e 	bl	8000adc <__aeabi_dcmplt>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	f000 8081 	beq.w	80046e8 <_dtoa_r+0x4f8>
 80045e6:	9b01      	ldr	r3, [sp, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d07d      	beq.n	80046e8 <_dtoa_r+0x4f8>
 80045ec:	f1b9 0f00 	cmp.w	r9, #0
 80045f0:	dd3c      	ble.n	800466c <_dtoa_r+0x47c>
 80045f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80045f6:	9307      	str	r3, [sp, #28]
 80045f8:	2200      	movs	r2, #0
 80045fa:	4b91      	ldr	r3, [pc, #580]	; (8004840 <_dtoa_r+0x650>)
 80045fc:	4630      	mov	r0, r6
 80045fe:	4639      	mov	r1, r7
 8004600:	f7fb fffa 	bl	80005f8 <__aeabi_dmul>
 8004604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004608:	3501      	adds	r5, #1
 800460a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800460e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004612:	4628      	mov	r0, r5
 8004614:	f7fb ff86 	bl	8000524 <__aeabi_i2d>
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	f7fb ffec 	bl	80005f8 <__aeabi_dmul>
 8004620:	4b88      	ldr	r3, [pc, #544]	; (8004844 <_dtoa_r+0x654>)
 8004622:	2200      	movs	r2, #0
 8004624:	f7fb fe32 	bl	800028c <__adddf3>
 8004628:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800462c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d15c      	bne.n	80046f2 <_dtoa_r+0x502>
 8004638:	4b83      	ldr	r3, [pc, #524]	; (8004848 <_dtoa_r+0x658>)
 800463a:	2200      	movs	r2, #0
 800463c:	4630      	mov	r0, r6
 800463e:	4639      	mov	r1, r7
 8004640:	f7fb fe22 	bl	8000288 <__aeabi_dsub>
 8004644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004648:	4606      	mov	r6, r0
 800464a:	460f      	mov	r7, r1
 800464c:	f7fc fa64 	bl	8000b18 <__aeabi_dcmpgt>
 8004650:	2800      	cmp	r0, #0
 8004652:	f040 8296 	bne.w	8004b82 <_dtoa_r+0x992>
 8004656:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800465a:	4630      	mov	r0, r6
 800465c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004660:	4639      	mov	r1, r7
 8004662:	f7fc fa3b 	bl	8000adc <__aeabi_dcmplt>
 8004666:	2800      	cmp	r0, #0
 8004668:	f040 8288 	bne.w	8004b7c <_dtoa_r+0x98c>
 800466c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004676:	2b00      	cmp	r3, #0
 8004678:	f2c0 8158 	blt.w	800492c <_dtoa_r+0x73c>
 800467c:	f1ba 0f0e 	cmp.w	sl, #14
 8004680:	f300 8154 	bgt.w	800492c <_dtoa_r+0x73c>
 8004684:	4b6b      	ldr	r3, [pc, #428]	; (8004834 <_dtoa_r+0x644>)
 8004686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800468a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	f280 80e3 	bge.w	800485c <_dtoa_r+0x66c>
 8004696:	9b01      	ldr	r3, [sp, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f300 80df 	bgt.w	800485c <_dtoa_r+0x66c>
 800469e:	f040 826d 	bne.w	8004b7c <_dtoa_r+0x98c>
 80046a2:	4b69      	ldr	r3, [pc, #420]	; (8004848 <_dtoa_r+0x658>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	4640      	mov	r0, r8
 80046a8:	4649      	mov	r1, r9
 80046aa:	f7fb ffa5 	bl	80005f8 <__aeabi_dmul>
 80046ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b2:	f7fc fa27 	bl	8000b04 <__aeabi_dcmpge>
 80046b6:	9e01      	ldr	r6, [sp, #4]
 80046b8:	4637      	mov	r7, r6
 80046ba:	2800      	cmp	r0, #0
 80046bc:	f040 8243 	bne.w	8004b46 <_dtoa_r+0x956>
 80046c0:	9d00      	ldr	r5, [sp, #0]
 80046c2:	2331      	movs	r3, #49	; 0x31
 80046c4:	f805 3b01 	strb.w	r3, [r5], #1
 80046c8:	f10a 0a01 	add.w	sl, sl, #1
 80046cc:	e23f      	b.n	8004b4e <_dtoa_r+0x95e>
 80046ce:	07f2      	lsls	r2, r6, #31
 80046d0:	d505      	bpl.n	80046de <_dtoa_r+0x4ee>
 80046d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d6:	f7fb ff8f 	bl	80005f8 <__aeabi_dmul>
 80046da:	3501      	adds	r5, #1
 80046dc:	2301      	movs	r3, #1
 80046de:	1076      	asrs	r6, r6, #1
 80046e0:	3708      	adds	r7, #8
 80046e2:	e76c      	b.n	80045be <_dtoa_r+0x3ce>
 80046e4:	2502      	movs	r5, #2
 80046e6:	e76f      	b.n	80045c8 <_dtoa_r+0x3d8>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80046ee:	930c      	str	r3, [sp, #48]	; 0x30
 80046f0:	e78d      	b.n	800460e <_dtoa_r+0x41e>
 80046f2:	9900      	ldr	r1, [sp, #0]
 80046f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046f8:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <_dtoa_r+0x644>)
 80046fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046fe:	4401      	add	r1, r0
 8004700:	9102      	str	r1, [sp, #8]
 8004702:	9908      	ldr	r1, [sp, #32]
 8004704:	eeb0 8a47 	vmov.f32	s16, s14
 8004708:	eef0 8a67 	vmov.f32	s17, s15
 800470c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004714:	2900      	cmp	r1, #0
 8004716:	d045      	beq.n	80047a4 <_dtoa_r+0x5b4>
 8004718:	494c      	ldr	r1, [pc, #304]	; (800484c <_dtoa_r+0x65c>)
 800471a:	2000      	movs	r0, #0
 800471c:	f7fc f896 	bl	800084c <__aeabi_ddiv>
 8004720:	ec53 2b18 	vmov	r2, r3, d8
 8004724:	f7fb fdb0 	bl	8000288 <__aeabi_dsub>
 8004728:	9d00      	ldr	r5, [sp, #0]
 800472a:	ec41 0b18 	vmov	d8, r0, r1
 800472e:	4639      	mov	r1, r7
 8004730:	4630      	mov	r0, r6
 8004732:	f7fc fa11 	bl	8000b58 <__aeabi_d2iz>
 8004736:	900c      	str	r0, [sp, #48]	; 0x30
 8004738:	f7fb fef4 	bl	8000524 <__aeabi_i2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4630      	mov	r0, r6
 8004742:	4639      	mov	r1, r7
 8004744:	f7fb fda0 	bl	8000288 <__aeabi_dsub>
 8004748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800474a:	3330      	adds	r3, #48	; 0x30
 800474c:	f805 3b01 	strb.w	r3, [r5], #1
 8004750:	ec53 2b18 	vmov	r2, r3, d8
 8004754:	4606      	mov	r6, r0
 8004756:	460f      	mov	r7, r1
 8004758:	f7fc f9c0 	bl	8000adc <__aeabi_dcmplt>
 800475c:	2800      	cmp	r0, #0
 800475e:	d165      	bne.n	800482c <_dtoa_r+0x63c>
 8004760:	4632      	mov	r2, r6
 8004762:	463b      	mov	r3, r7
 8004764:	4935      	ldr	r1, [pc, #212]	; (800483c <_dtoa_r+0x64c>)
 8004766:	2000      	movs	r0, #0
 8004768:	f7fb fd8e 	bl	8000288 <__aeabi_dsub>
 800476c:	ec53 2b18 	vmov	r2, r3, d8
 8004770:	f7fc f9b4 	bl	8000adc <__aeabi_dcmplt>
 8004774:	2800      	cmp	r0, #0
 8004776:	f040 80b9 	bne.w	80048ec <_dtoa_r+0x6fc>
 800477a:	9b02      	ldr	r3, [sp, #8]
 800477c:	429d      	cmp	r5, r3
 800477e:	f43f af75 	beq.w	800466c <_dtoa_r+0x47c>
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <_dtoa_r+0x650>)
 8004784:	ec51 0b18 	vmov	r0, r1, d8
 8004788:	2200      	movs	r2, #0
 800478a:	f7fb ff35 	bl	80005f8 <__aeabi_dmul>
 800478e:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <_dtoa_r+0x650>)
 8004790:	ec41 0b18 	vmov	d8, r0, r1
 8004794:	2200      	movs	r2, #0
 8004796:	4630      	mov	r0, r6
 8004798:	4639      	mov	r1, r7
 800479a:	f7fb ff2d 	bl	80005f8 <__aeabi_dmul>
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	e7c4      	b.n	800472e <_dtoa_r+0x53e>
 80047a4:	ec51 0b17 	vmov	r0, r1, d7
 80047a8:	f7fb ff26 	bl	80005f8 <__aeabi_dmul>
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	9d00      	ldr	r5, [sp, #0]
 80047b0:	930c      	str	r3, [sp, #48]	; 0x30
 80047b2:	ec41 0b18 	vmov	d8, r0, r1
 80047b6:	4639      	mov	r1, r7
 80047b8:	4630      	mov	r0, r6
 80047ba:	f7fc f9cd 	bl	8000b58 <__aeabi_d2iz>
 80047be:	9011      	str	r0, [sp, #68]	; 0x44
 80047c0:	f7fb feb0 	bl	8000524 <__aeabi_i2d>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	f7fb fd5c 	bl	8000288 <__aeabi_dsub>
 80047d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047d2:	3330      	adds	r3, #48	; 0x30
 80047d4:	f805 3b01 	strb.w	r3, [r5], #1
 80047d8:	9b02      	ldr	r3, [sp, #8]
 80047da:	429d      	cmp	r5, r3
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	d134      	bne.n	8004850 <_dtoa_r+0x660>
 80047e6:	4b19      	ldr	r3, [pc, #100]	; (800484c <_dtoa_r+0x65c>)
 80047e8:	ec51 0b18 	vmov	r0, r1, d8
 80047ec:	f7fb fd4e 	bl	800028c <__adddf3>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fc f98e 	bl	8000b18 <__aeabi_dcmpgt>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d175      	bne.n	80048ec <_dtoa_r+0x6fc>
 8004800:	ec53 2b18 	vmov	r2, r3, d8
 8004804:	4911      	ldr	r1, [pc, #68]	; (800484c <_dtoa_r+0x65c>)
 8004806:	2000      	movs	r0, #0
 8004808:	f7fb fd3e 	bl	8000288 <__aeabi_dsub>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4630      	mov	r0, r6
 8004812:	4639      	mov	r1, r7
 8004814:	f7fc f962 	bl	8000adc <__aeabi_dcmplt>
 8004818:	2800      	cmp	r0, #0
 800481a:	f43f af27 	beq.w	800466c <_dtoa_r+0x47c>
 800481e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004820:	1e6b      	subs	r3, r5, #1
 8004822:	930c      	str	r3, [sp, #48]	; 0x30
 8004824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d0f8      	beq.n	800481e <_dtoa_r+0x62e>
 800482c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004830:	e04a      	b.n	80048c8 <_dtoa_r+0x6d8>
 8004832:	bf00      	nop
 8004834:	08005ef8 	.word	0x08005ef8
 8004838:	08005ed0 	.word	0x08005ed0
 800483c:	3ff00000 	.word	0x3ff00000
 8004840:	40240000 	.word	0x40240000
 8004844:	401c0000 	.word	0x401c0000
 8004848:	40140000 	.word	0x40140000
 800484c:	3fe00000 	.word	0x3fe00000
 8004850:	4baf      	ldr	r3, [pc, #700]	; (8004b10 <_dtoa_r+0x920>)
 8004852:	f7fb fed1 	bl	80005f8 <__aeabi_dmul>
 8004856:	4606      	mov	r6, r0
 8004858:	460f      	mov	r7, r1
 800485a:	e7ac      	b.n	80047b6 <_dtoa_r+0x5c6>
 800485c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004860:	9d00      	ldr	r5, [sp, #0]
 8004862:	4642      	mov	r2, r8
 8004864:	464b      	mov	r3, r9
 8004866:	4630      	mov	r0, r6
 8004868:	4639      	mov	r1, r7
 800486a:	f7fb ffef 	bl	800084c <__aeabi_ddiv>
 800486e:	f7fc f973 	bl	8000b58 <__aeabi_d2iz>
 8004872:	9002      	str	r0, [sp, #8]
 8004874:	f7fb fe56 	bl	8000524 <__aeabi_i2d>
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	f7fb febc 	bl	80005f8 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4630      	mov	r0, r6
 8004886:	4639      	mov	r1, r7
 8004888:	f7fb fcfe 	bl	8000288 <__aeabi_dsub>
 800488c:	9e02      	ldr	r6, [sp, #8]
 800488e:	9f01      	ldr	r7, [sp, #4]
 8004890:	3630      	adds	r6, #48	; 0x30
 8004892:	f805 6b01 	strb.w	r6, [r5], #1
 8004896:	9e00      	ldr	r6, [sp, #0]
 8004898:	1bae      	subs	r6, r5, r6
 800489a:	42b7      	cmp	r7, r6
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	d137      	bne.n	8004912 <_dtoa_r+0x722>
 80048a2:	f7fb fcf3 	bl	800028c <__adddf3>
 80048a6:	4642      	mov	r2, r8
 80048a8:	464b      	mov	r3, r9
 80048aa:	4606      	mov	r6, r0
 80048ac:	460f      	mov	r7, r1
 80048ae:	f7fc f933 	bl	8000b18 <__aeabi_dcmpgt>
 80048b2:	b9c8      	cbnz	r0, 80048e8 <_dtoa_r+0x6f8>
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fc f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80048c0:	b110      	cbz	r0, 80048c8 <_dtoa_r+0x6d8>
 80048c2:	9b02      	ldr	r3, [sp, #8]
 80048c4:	07d9      	lsls	r1, r3, #31
 80048c6:	d40f      	bmi.n	80048e8 <_dtoa_r+0x6f8>
 80048c8:	4620      	mov	r0, r4
 80048ca:	4659      	mov	r1, fp
 80048cc:	f000 fc1e 	bl	800510c <_Bfree>
 80048d0:	2300      	movs	r3, #0
 80048d2:	702b      	strb	r3, [r5, #0]
 80048d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048d6:	f10a 0001 	add.w	r0, sl, #1
 80048da:	6018      	str	r0, [r3, #0]
 80048dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f43f acd8 	beq.w	8004294 <_dtoa_r+0xa4>
 80048e4:	601d      	str	r5, [r3, #0]
 80048e6:	e4d5      	b.n	8004294 <_dtoa_r+0xa4>
 80048e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80048ec:	462b      	mov	r3, r5
 80048ee:	461d      	mov	r5, r3
 80048f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048f4:	2a39      	cmp	r2, #57	; 0x39
 80048f6:	d108      	bne.n	800490a <_dtoa_r+0x71a>
 80048f8:	9a00      	ldr	r2, [sp, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d1f7      	bne.n	80048ee <_dtoa_r+0x6fe>
 80048fe:	9a07      	ldr	r2, [sp, #28]
 8004900:	9900      	ldr	r1, [sp, #0]
 8004902:	3201      	adds	r2, #1
 8004904:	9207      	str	r2, [sp, #28]
 8004906:	2230      	movs	r2, #48	; 0x30
 8004908:	700a      	strb	r2, [r1, #0]
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	3201      	adds	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e78c      	b.n	800482c <_dtoa_r+0x63c>
 8004912:	4b7f      	ldr	r3, [pc, #508]	; (8004b10 <_dtoa_r+0x920>)
 8004914:	2200      	movs	r2, #0
 8004916:	f7fb fe6f 	bl	80005f8 <__aeabi_dmul>
 800491a:	2200      	movs	r2, #0
 800491c:	2300      	movs	r3, #0
 800491e:	4606      	mov	r6, r0
 8004920:	460f      	mov	r7, r1
 8004922:	f7fc f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004926:	2800      	cmp	r0, #0
 8004928:	d09b      	beq.n	8004862 <_dtoa_r+0x672>
 800492a:	e7cd      	b.n	80048c8 <_dtoa_r+0x6d8>
 800492c:	9a08      	ldr	r2, [sp, #32]
 800492e:	2a00      	cmp	r2, #0
 8004930:	f000 80c4 	beq.w	8004abc <_dtoa_r+0x8cc>
 8004934:	9a05      	ldr	r2, [sp, #20]
 8004936:	2a01      	cmp	r2, #1
 8004938:	f300 80a8 	bgt.w	8004a8c <_dtoa_r+0x89c>
 800493c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800493e:	2a00      	cmp	r2, #0
 8004940:	f000 80a0 	beq.w	8004a84 <_dtoa_r+0x894>
 8004944:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004948:	9e06      	ldr	r6, [sp, #24]
 800494a:	4645      	mov	r5, r8
 800494c:	9a04      	ldr	r2, [sp, #16]
 800494e:	2101      	movs	r1, #1
 8004950:	441a      	add	r2, r3
 8004952:	4620      	mov	r0, r4
 8004954:	4498      	add	r8, r3
 8004956:	9204      	str	r2, [sp, #16]
 8004958:	f000 fc94 	bl	8005284 <__i2b>
 800495c:	4607      	mov	r7, r0
 800495e:	2d00      	cmp	r5, #0
 8004960:	dd0b      	ble.n	800497a <_dtoa_r+0x78a>
 8004962:	9b04      	ldr	r3, [sp, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	dd08      	ble.n	800497a <_dtoa_r+0x78a>
 8004968:	42ab      	cmp	r3, r5
 800496a:	9a04      	ldr	r2, [sp, #16]
 800496c:	bfa8      	it	ge
 800496e:	462b      	movge	r3, r5
 8004970:	eba8 0803 	sub.w	r8, r8, r3
 8004974:	1aed      	subs	r5, r5, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	9304      	str	r3, [sp, #16]
 800497a:	9b06      	ldr	r3, [sp, #24]
 800497c:	b1fb      	cbz	r3, 80049be <_dtoa_r+0x7ce>
 800497e:	9b08      	ldr	r3, [sp, #32]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 809f 	beq.w	8004ac4 <_dtoa_r+0x8d4>
 8004986:	2e00      	cmp	r6, #0
 8004988:	dd11      	ble.n	80049ae <_dtoa_r+0x7be>
 800498a:	4639      	mov	r1, r7
 800498c:	4632      	mov	r2, r6
 800498e:	4620      	mov	r0, r4
 8004990:	f000 fd34 	bl	80053fc <__pow5mult>
 8004994:	465a      	mov	r2, fp
 8004996:	4601      	mov	r1, r0
 8004998:	4607      	mov	r7, r0
 800499a:	4620      	mov	r0, r4
 800499c:	f000 fc88 	bl	80052b0 <__multiply>
 80049a0:	4659      	mov	r1, fp
 80049a2:	9007      	str	r0, [sp, #28]
 80049a4:	4620      	mov	r0, r4
 80049a6:	f000 fbb1 	bl	800510c <_Bfree>
 80049aa:	9b07      	ldr	r3, [sp, #28]
 80049ac:	469b      	mov	fp, r3
 80049ae:	9b06      	ldr	r3, [sp, #24]
 80049b0:	1b9a      	subs	r2, r3, r6
 80049b2:	d004      	beq.n	80049be <_dtoa_r+0x7ce>
 80049b4:	4659      	mov	r1, fp
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 fd20 	bl	80053fc <__pow5mult>
 80049bc:	4683      	mov	fp, r0
 80049be:	2101      	movs	r1, #1
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fc5f 	bl	8005284 <__i2b>
 80049c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	4606      	mov	r6, r0
 80049cc:	dd7c      	ble.n	8004ac8 <_dtoa_r+0x8d8>
 80049ce:	461a      	mov	r2, r3
 80049d0:	4601      	mov	r1, r0
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fd12 	bl	80053fc <__pow5mult>
 80049d8:	9b05      	ldr	r3, [sp, #20]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	4606      	mov	r6, r0
 80049de:	dd76      	ble.n	8004ace <_dtoa_r+0x8de>
 80049e0:	2300      	movs	r3, #0
 80049e2:	9306      	str	r3, [sp, #24]
 80049e4:	6933      	ldr	r3, [r6, #16]
 80049e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049ea:	6918      	ldr	r0, [r3, #16]
 80049ec:	f000 fbfa 	bl	80051e4 <__hi0bits>
 80049f0:	f1c0 0020 	rsb	r0, r0, #32
 80049f4:	9b04      	ldr	r3, [sp, #16]
 80049f6:	4418      	add	r0, r3
 80049f8:	f010 001f 	ands.w	r0, r0, #31
 80049fc:	f000 8086 	beq.w	8004b0c <_dtoa_r+0x91c>
 8004a00:	f1c0 0320 	rsb	r3, r0, #32
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	dd7f      	ble.n	8004b08 <_dtoa_r+0x918>
 8004a08:	f1c0 001c 	rsb	r0, r0, #28
 8004a0c:	9b04      	ldr	r3, [sp, #16]
 8004a0e:	4403      	add	r3, r0
 8004a10:	4480      	add	r8, r0
 8004a12:	4405      	add	r5, r0
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	f1b8 0f00 	cmp.w	r8, #0
 8004a1a:	dd05      	ble.n	8004a28 <_dtoa_r+0x838>
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	4642      	mov	r2, r8
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 fd45 	bl	80054b0 <__lshift>
 8004a26:	4683      	mov	fp, r0
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dd05      	ble.n	8004a3a <_dtoa_r+0x84a>
 8004a2e:	4631      	mov	r1, r6
 8004a30:	461a      	mov	r2, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 fd3c 	bl	80054b0 <__lshift>
 8004a38:	4606      	mov	r6, r0
 8004a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d069      	beq.n	8004b14 <_dtoa_r+0x924>
 8004a40:	4631      	mov	r1, r6
 8004a42:	4658      	mov	r0, fp
 8004a44:	f000 fda0 	bl	8005588 <__mcmp>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	da63      	bge.n	8004b14 <_dtoa_r+0x924>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4659      	mov	r1, fp
 8004a50:	220a      	movs	r2, #10
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 fb7c 	bl	8005150 <__multadd>
 8004a58:	9b08      	ldr	r3, [sp, #32]
 8004a5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a5e:	4683      	mov	fp, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 818f 	beq.w	8004d84 <_dtoa_r+0xb94>
 8004a66:	4639      	mov	r1, r7
 8004a68:	2300      	movs	r3, #0
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 fb6f 	bl	8005150 <__multadd>
 8004a72:	f1b9 0f00 	cmp.w	r9, #0
 8004a76:	4607      	mov	r7, r0
 8004a78:	f300 808e 	bgt.w	8004b98 <_dtoa_r+0x9a8>
 8004a7c:	9b05      	ldr	r3, [sp, #20]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	dc50      	bgt.n	8004b24 <_dtoa_r+0x934>
 8004a82:	e089      	b.n	8004b98 <_dtoa_r+0x9a8>
 8004a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a8a:	e75d      	b.n	8004948 <_dtoa_r+0x758>
 8004a8c:	9b01      	ldr	r3, [sp, #4]
 8004a8e:	1e5e      	subs	r6, r3, #1
 8004a90:	9b06      	ldr	r3, [sp, #24]
 8004a92:	42b3      	cmp	r3, r6
 8004a94:	bfbf      	itttt	lt
 8004a96:	9b06      	ldrlt	r3, [sp, #24]
 8004a98:	9606      	strlt	r6, [sp, #24]
 8004a9a:	1af2      	sublt	r2, r6, r3
 8004a9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004a9e:	bfb6      	itet	lt
 8004aa0:	189b      	addlt	r3, r3, r2
 8004aa2:	1b9e      	subge	r6, r3, r6
 8004aa4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	bfb8      	it	lt
 8004aaa:	2600      	movlt	r6, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bfb5      	itete	lt
 8004ab0:	eba8 0503 	sublt.w	r5, r8, r3
 8004ab4:	9b01      	ldrge	r3, [sp, #4]
 8004ab6:	2300      	movlt	r3, #0
 8004ab8:	4645      	movge	r5, r8
 8004aba:	e747      	b.n	800494c <_dtoa_r+0x75c>
 8004abc:	9e06      	ldr	r6, [sp, #24]
 8004abe:	9f08      	ldr	r7, [sp, #32]
 8004ac0:	4645      	mov	r5, r8
 8004ac2:	e74c      	b.n	800495e <_dtoa_r+0x76e>
 8004ac4:	9a06      	ldr	r2, [sp, #24]
 8004ac6:	e775      	b.n	80049b4 <_dtoa_r+0x7c4>
 8004ac8:	9b05      	ldr	r3, [sp, #20]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	dc18      	bgt.n	8004b00 <_dtoa_r+0x910>
 8004ace:	9b02      	ldr	r3, [sp, #8]
 8004ad0:	b9b3      	cbnz	r3, 8004b00 <_dtoa_r+0x910>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad8:	b9a3      	cbnz	r3, 8004b04 <_dtoa_r+0x914>
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	0d1b      	lsrs	r3, r3, #20
 8004ae2:	051b      	lsls	r3, r3, #20
 8004ae4:	b12b      	cbz	r3, 8004af2 <_dtoa_r+0x902>
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	f108 0801 	add.w	r8, r8, #1
 8004af0:	2301      	movs	r3, #1
 8004af2:	9306      	str	r3, [sp, #24]
 8004af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f47f af74 	bne.w	80049e4 <_dtoa_r+0x7f4>
 8004afc:	2001      	movs	r0, #1
 8004afe:	e779      	b.n	80049f4 <_dtoa_r+0x804>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e7f6      	b.n	8004af2 <_dtoa_r+0x902>
 8004b04:	9b02      	ldr	r3, [sp, #8]
 8004b06:	e7f4      	b.n	8004af2 <_dtoa_r+0x902>
 8004b08:	d085      	beq.n	8004a16 <_dtoa_r+0x826>
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	301c      	adds	r0, #28
 8004b0e:	e77d      	b.n	8004a0c <_dtoa_r+0x81c>
 8004b10:	40240000 	.word	0x40240000
 8004b14:	9b01      	ldr	r3, [sp, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	dc38      	bgt.n	8004b8c <_dtoa_r+0x99c>
 8004b1a:	9b05      	ldr	r3, [sp, #20]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	dd35      	ble.n	8004b8c <_dtoa_r+0x99c>
 8004b20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b24:	f1b9 0f00 	cmp.w	r9, #0
 8004b28:	d10d      	bne.n	8004b46 <_dtoa_r+0x956>
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	2205      	movs	r2, #5
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 fb0d 	bl	8005150 <__multadd>
 8004b36:	4601      	mov	r1, r0
 8004b38:	4606      	mov	r6, r0
 8004b3a:	4658      	mov	r0, fp
 8004b3c:	f000 fd24 	bl	8005588 <__mcmp>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	f73f adbd 	bgt.w	80046c0 <_dtoa_r+0x4d0>
 8004b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b48:	9d00      	ldr	r5, [sp, #0]
 8004b4a:	ea6f 0a03 	mvn.w	sl, r3
 8004b4e:	f04f 0800 	mov.w	r8, #0
 8004b52:	4631      	mov	r1, r6
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fad9 	bl	800510c <_Bfree>
 8004b5a:	2f00      	cmp	r7, #0
 8004b5c:	f43f aeb4 	beq.w	80048c8 <_dtoa_r+0x6d8>
 8004b60:	f1b8 0f00 	cmp.w	r8, #0
 8004b64:	d005      	beq.n	8004b72 <_dtoa_r+0x982>
 8004b66:	45b8      	cmp	r8, r7
 8004b68:	d003      	beq.n	8004b72 <_dtoa_r+0x982>
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f000 facd 	bl	800510c <_Bfree>
 8004b72:	4639      	mov	r1, r7
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 fac9 	bl	800510c <_Bfree>
 8004b7a:	e6a5      	b.n	80048c8 <_dtoa_r+0x6d8>
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	4637      	mov	r7, r6
 8004b80:	e7e1      	b.n	8004b46 <_dtoa_r+0x956>
 8004b82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004b84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b88:	4637      	mov	r7, r6
 8004b8a:	e599      	b.n	80046c0 <_dtoa_r+0x4d0>
 8004b8c:	9b08      	ldr	r3, [sp, #32]
 8004b8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 80fd 	beq.w	8004d92 <_dtoa_r+0xba2>
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	dd05      	ble.n	8004ba8 <_dtoa_r+0x9b8>
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fc85 	bl	80054b0 <__lshift>
 8004ba6:	4607      	mov	r7, r0
 8004ba8:	9b06      	ldr	r3, [sp, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d05c      	beq.n	8004c68 <_dtoa_r+0xa78>
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fa6b 	bl	800508c <_Balloc>
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	b928      	cbnz	r0, 8004bc6 <_dtoa_r+0x9d6>
 8004bba:	4b80      	ldr	r3, [pc, #512]	; (8004dbc <_dtoa_r+0xbcc>)
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004bc2:	f7ff bb2e 	b.w	8004222 <_dtoa_r+0x32>
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	3202      	adds	r2, #2
 8004bca:	0092      	lsls	r2, r2, #2
 8004bcc:	f107 010c 	add.w	r1, r7, #12
 8004bd0:	300c      	adds	r0, #12
 8004bd2:	f7fe fbc2 	bl	800335a <memcpy>
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fc68 	bl	80054b0 <__lshift>
 8004be0:	9b00      	ldr	r3, [sp, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	9b00      	ldr	r3, [sp, #0]
 8004be8:	444b      	add	r3, r9
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	9b02      	ldr	r3, [sp, #8]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	46b8      	mov	r8, r7
 8004bf4:	9306      	str	r3, [sp, #24]
 8004bf6:	4607      	mov	r7, r0
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4658      	mov	r0, fp
 8004c00:	9302      	str	r3, [sp, #8]
 8004c02:	f7ff fa67 	bl	80040d4 <quorem>
 8004c06:	4603      	mov	r3, r0
 8004c08:	3330      	adds	r3, #48	; 0x30
 8004c0a:	9004      	str	r0, [sp, #16]
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	4658      	mov	r0, fp
 8004c10:	9308      	str	r3, [sp, #32]
 8004c12:	f000 fcb9 	bl	8005588 <__mcmp>
 8004c16:	463a      	mov	r2, r7
 8004c18:	4681      	mov	r9, r0
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f000 fccf 	bl	80055c0 <__mdiff>
 8004c22:	68c2      	ldr	r2, [r0, #12]
 8004c24:	9b08      	ldr	r3, [sp, #32]
 8004c26:	4605      	mov	r5, r0
 8004c28:	bb02      	cbnz	r2, 8004c6c <_dtoa_r+0xa7c>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f000 fcab 	bl	8005588 <__mcmp>
 8004c32:	9b08      	ldr	r3, [sp, #32]
 8004c34:	4602      	mov	r2, r0
 8004c36:	4629      	mov	r1, r5
 8004c38:	4620      	mov	r0, r4
 8004c3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004c3e:	f000 fa65 	bl	800510c <_Bfree>
 8004c42:	9b05      	ldr	r3, [sp, #20]
 8004c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c46:	9d01      	ldr	r5, [sp, #4]
 8004c48:	ea43 0102 	orr.w	r1, r3, r2
 8004c4c:	9b06      	ldr	r3, [sp, #24]
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	d10d      	bne.n	8004c70 <_dtoa_r+0xa80>
 8004c54:	2b39      	cmp	r3, #57	; 0x39
 8004c56:	d029      	beq.n	8004cac <_dtoa_r+0xabc>
 8004c58:	f1b9 0f00 	cmp.w	r9, #0
 8004c5c:	dd01      	ble.n	8004c62 <_dtoa_r+0xa72>
 8004c5e:	9b04      	ldr	r3, [sp, #16]
 8004c60:	3331      	adds	r3, #49	; 0x31
 8004c62:	9a02      	ldr	r2, [sp, #8]
 8004c64:	7013      	strb	r3, [r2, #0]
 8004c66:	e774      	b.n	8004b52 <_dtoa_r+0x962>
 8004c68:	4638      	mov	r0, r7
 8004c6a:	e7b9      	b.n	8004be0 <_dtoa_r+0x9f0>
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	e7e2      	b.n	8004c36 <_dtoa_r+0xa46>
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	db06      	blt.n	8004c84 <_dtoa_r+0xa94>
 8004c76:	9905      	ldr	r1, [sp, #20]
 8004c78:	ea41 0909 	orr.w	r9, r1, r9
 8004c7c:	9906      	ldr	r1, [sp, #24]
 8004c7e:	ea59 0101 	orrs.w	r1, r9, r1
 8004c82:	d120      	bne.n	8004cc6 <_dtoa_r+0xad6>
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	ddec      	ble.n	8004c62 <_dtoa_r+0xa72>
 8004c88:	4659      	mov	r1, fp
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	f000 fc0e 	bl	80054b0 <__lshift>
 8004c94:	4631      	mov	r1, r6
 8004c96:	4683      	mov	fp, r0
 8004c98:	f000 fc76 	bl	8005588 <__mcmp>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	dc02      	bgt.n	8004ca8 <_dtoa_r+0xab8>
 8004ca2:	d1de      	bne.n	8004c62 <_dtoa_r+0xa72>
 8004ca4:	07da      	lsls	r2, r3, #31
 8004ca6:	d5dc      	bpl.n	8004c62 <_dtoa_r+0xa72>
 8004ca8:	2b39      	cmp	r3, #57	; 0x39
 8004caa:	d1d8      	bne.n	8004c5e <_dtoa_r+0xa6e>
 8004cac:	9a02      	ldr	r2, [sp, #8]
 8004cae:	2339      	movs	r3, #57	; 0x39
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	461d      	mov	r5, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004cbc:	2a39      	cmp	r2, #57	; 0x39
 8004cbe:	d050      	beq.n	8004d62 <_dtoa_r+0xb72>
 8004cc0:	3201      	adds	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e745      	b.n	8004b52 <_dtoa_r+0x962>
 8004cc6:	2a00      	cmp	r2, #0
 8004cc8:	dd03      	ble.n	8004cd2 <_dtoa_r+0xae2>
 8004cca:	2b39      	cmp	r3, #57	; 0x39
 8004ccc:	d0ee      	beq.n	8004cac <_dtoa_r+0xabc>
 8004cce:	3301      	adds	r3, #1
 8004cd0:	e7c7      	b.n	8004c62 <_dtoa_r+0xa72>
 8004cd2:	9a01      	ldr	r2, [sp, #4]
 8004cd4:	9907      	ldr	r1, [sp, #28]
 8004cd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004cda:	428a      	cmp	r2, r1
 8004cdc:	d02a      	beq.n	8004d34 <_dtoa_r+0xb44>
 8004cde:	4659      	mov	r1, fp
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	220a      	movs	r2, #10
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f000 fa33 	bl	8005150 <__multadd>
 8004cea:	45b8      	cmp	r8, r7
 8004cec:	4683      	mov	fp, r0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	f04f 020a 	mov.w	r2, #10
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	d107      	bne.n	8004d0c <_dtoa_r+0xb1c>
 8004cfc:	f000 fa28 	bl	8005150 <__multadd>
 8004d00:	4680      	mov	r8, r0
 8004d02:	4607      	mov	r7, r0
 8004d04:	9b01      	ldr	r3, [sp, #4]
 8004d06:	3301      	adds	r3, #1
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	e775      	b.n	8004bf8 <_dtoa_r+0xa08>
 8004d0c:	f000 fa20 	bl	8005150 <__multadd>
 8004d10:	4639      	mov	r1, r7
 8004d12:	4680      	mov	r8, r0
 8004d14:	2300      	movs	r3, #0
 8004d16:	220a      	movs	r2, #10
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 fa19 	bl	8005150 <__multadd>
 8004d1e:	4607      	mov	r7, r0
 8004d20:	e7f0      	b.n	8004d04 <_dtoa_r+0xb14>
 8004d22:	f1b9 0f00 	cmp.w	r9, #0
 8004d26:	9a00      	ldr	r2, [sp, #0]
 8004d28:	bfcc      	ite	gt
 8004d2a:	464d      	movgt	r5, r9
 8004d2c:	2501      	movle	r5, #1
 8004d2e:	4415      	add	r5, r2
 8004d30:	f04f 0800 	mov.w	r8, #0
 8004d34:	4659      	mov	r1, fp
 8004d36:	2201      	movs	r2, #1
 8004d38:	4620      	mov	r0, r4
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	f000 fbb8 	bl	80054b0 <__lshift>
 8004d40:	4631      	mov	r1, r6
 8004d42:	4683      	mov	fp, r0
 8004d44:	f000 fc20 	bl	8005588 <__mcmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dcb2      	bgt.n	8004cb2 <_dtoa_r+0xac2>
 8004d4c:	d102      	bne.n	8004d54 <_dtoa_r+0xb64>
 8004d4e:	9b01      	ldr	r3, [sp, #4]
 8004d50:	07db      	lsls	r3, r3, #31
 8004d52:	d4ae      	bmi.n	8004cb2 <_dtoa_r+0xac2>
 8004d54:	462b      	mov	r3, r5
 8004d56:	461d      	mov	r5, r3
 8004d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d5c:	2a30      	cmp	r2, #48	; 0x30
 8004d5e:	d0fa      	beq.n	8004d56 <_dtoa_r+0xb66>
 8004d60:	e6f7      	b.n	8004b52 <_dtoa_r+0x962>
 8004d62:	9a00      	ldr	r2, [sp, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1a5      	bne.n	8004cb4 <_dtoa_r+0xac4>
 8004d68:	f10a 0a01 	add.w	sl, sl, #1
 8004d6c:	2331      	movs	r3, #49	; 0x31
 8004d6e:	e779      	b.n	8004c64 <_dtoa_r+0xa74>
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <_dtoa_r+0xbd0>)
 8004d72:	f7ff baaf 	b.w	80042d4 <_dtoa_r+0xe4>
 8004d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f aa86 	bne.w	800428a <_dtoa_r+0x9a>
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <_dtoa_r+0xbd4>)
 8004d80:	f7ff baa8 	b.w	80042d4 <_dtoa_r+0xe4>
 8004d84:	f1b9 0f00 	cmp.w	r9, #0
 8004d88:	dc03      	bgt.n	8004d92 <_dtoa_r+0xba2>
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	f73f aec9 	bgt.w	8004b24 <_dtoa_r+0x934>
 8004d92:	9d00      	ldr	r5, [sp, #0]
 8004d94:	4631      	mov	r1, r6
 8004d96:	4658      	mov	r0, fp
 8004d98:	f7ff f99c 	bl	80040d4 <quorem>
 8004d9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004da0:	f805 3b01 	strb.w	r3, [r5], #1
 8004da4:	9a00      	ldr	r2, [sp, #0]
 8004da6:	1aaa      	subs	r2, r5, r2
 8004da8:	4591      	cmp	r9, r2
 8004daa:	ddba      	ble.n	8004d22 <_dtoa_r+0xb32>
 8004dac:	4659      	mov	r1, fp
 8004dae:	2300      	movs	r3, #0
 8004db0:	220a      	movs	r2, #10
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 f9cc 	bl	8005150 <__multadd>
 8004db8:	4683      	mov	fp, r0
 8004dba:	e7eb      	b.n	8004d94 <_dtoa_r+0xba4>
 8004dbc:	08005e5f 	.word	0x08005e5f
 8004dc0:	08005d7c 	.word	0x08005d7c
 8004dc4:	08005ddc 	.word	0x08005ddc

08004dc8 <__sflush_r>:
 8004dc8:	898a      	ldrh	r2, [r1, #12]
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	4605      	mov	r5, r0
 8004dd0:	0710      	lsls	r0, r2, #28
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	d458      	bmi.n	8004e88 <__sflush_r+0xc0>
 8004dd6:	684b      	ldr	r3, [r1, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dc05      	bgt.n	8004de8 <__sflush_r+0x20>
 8004ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dc02      	bgt.n	8004de8 <__sflush_r+0x20>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dea:	2e00      	cmp	r6, #0
 8004dec:	d0f9      	beq.n	8004de2 <__sflush_r+0x1a>
 8004dee:	2300      	movs	r3, #0
 8004df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004df4:	682f      	ldr	r7, [r5, #0]
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	d032      	beq.n	8004e60 <__sflush_r+0x98>
 8004dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	075a      	lsls	r2, r3, #29
 8004e00:	d505      	bpl.n	8004e0e <__sflush_r+0x46>
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	1ac0      	subs	r0, r0, r3
 8004e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e08:	b10b      	cbz	r3, 8004e0e <__sflush_r+0x46>
 8004e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e0c:	1ac0      	subs	r0, r0, r3
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4602      	mov	r2, r0
 8004e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e14:	6a21      	ldr	r1, [r4, #32]
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b0      	blx	r6
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	d106      	bne.n	8004e2e <__sflush_r+0x66>
 8004e20:	6829      	ldr	r1, [r5, #0]
 8004e22:	291d      	cmp	r1, #29
 8004e24:	d82c      	bhi.n	8004e80 <__sflush_r+0xb8>
 8004e26:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <__sflush_r+0x108>)
 8004e28:	40ca      	lsrs	r2, r1
 8004e2a:	07d6      	lsls	r6, r2, #31
 8004e2c:	d528      	bpl.n	8004e80 <__sflush_r+0xb8>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	6062      	str	r2, [r4, #4]
 8004e32:	04d9      	lsls	r1, r3, #19
 8004e34:	6922      	ldr	r2, [r4, #16]
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	d504      	bpl.n	8004e44 <__sflush_r+0x7c>
 8004e3a:	1c42      	adds	r2, r0, #1
 8004e3c:	d101      	bne.n	8004e42 <__sflush_r+0x7a>
 8004e3e:	682b      	ldr	r3, [r5, #0]
 8004e40:	b903      	cbnz	r3, 8004e44 <__sflush_r+0x7c>
 8004e42:	6560      	str	r0, [r4, #84]	; 0x54
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	602f      	str	r7, [r5, #0]
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d0ca      	beq.n	8004de2 <__sflush_r+0x1a>
 8004e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e50:	4299      	cmp	r1, r3
 8004e52:	d002      	beq.n	8004e5a <__sflush_r+0x92>
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fca7 	bl	80057a8 <_free_r>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8004e5e:	e7c1      	b.n	8004de4 <__sflush_r+0x1c>
 8004e60:	6a21      	ldr	r1, [r4, #32]
 8004e62:	2301      	movs	r3, #1
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b0      	blx	r6
 8004e68:	1c41      	adds	r1, r0, #1
 8004e6a:	d1c7      	bne.n	8004dfc <__sflush_r+0x34>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0c4      	beq.n	8004dfc <__sflush_r+0x34>
 8004e72:	2b1d      	cmp	r3, #29
 8004e74:	d001      	beq.n	8004e7a <__sflush_r+0xb2>
 8004e76:	2b16      	cmp	r3, #22
 8004e78:	d101      	bne.n	8004e7e <__sflush_r+0xb6>
 8004e7a:	602f      	str	r7, [r5, #0]
 8004e7c:	e7b1      	b.n	8004de2 <__sflush_r+0x1a>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e84:	81a3      	strh	r3, [r4, #12]
 8004e86:	e7ad      	b.n	8004de4 <__sflush_r+0x1c>
 8004e88:	690f      	ldr	r7, [r1, #16]
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	d0a9      	beq.n	8004de2 <__sflush_r+0x1a>
 8004e8e:	0793      	lsls	r3, r2, #30
 8004e90:	680e      	ldr	r6, [r1, #0]
 8004e92:	bf08      	it	eq
 8004e94:	694b      	ldreq	r3, [r1, #20]
 8004e96:	600f      	str	r7, [r1, #0]
 8004e98:	bf18      	it	ne
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	eba6 0807 	sub.w	r8, r6, r7
 8004ea0:	608b      	str	r3, [r1, #8]
 8004ea2:	f1b8 0f00 	cmp.w	r8, #0
 8004ea6:	dd9c      	ble.n	8004de2 <__sflush_r+0x1a>
 8004ea8:	6a21      	ldr	r1, [r4, #32]
 8004eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eac:	4643      	mov	r3, r8
 8004eae:	463a      	mov	r2, r7
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b0      	blx	r6
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	dc06      	bgt.n	8004ec6 <__sflush_r+0xfe>
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec4:	e78e      	b.n	8004de4 <__sflush_r+0x1c>
 8004ec6:	4407      	add	r7, r0
 8004ec8:	eba8 0800 	sub.w	r8, r8, r0
 8004ecc:	e7e9      	b.n	8004ea2 <__sflush_r+0xda>
 8004ece:	bf00      	nop
 8004ed0:	20400001 	.word	0x20400001

08004ed4 <_fflush_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	690b      	ldr	r3, [r1, #16]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	b913      	cbnz	r3, 8004ee4 <_fflush_r+0x10>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	b118      	cbz	r0, 8004eee <_fflush_r+0x1a>
 8004ee6:	6983      	ldr	r3, [r0, #24]
 8004ee8:	b90b      	cbnz	r3, 8004eee <_fflush_r+0x1a>
 8004eea:	f7fe f971 	bl	80031d0 <__sinit>
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <_fflush_r+0x6c>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d11b      	bne.n	8004f2c <_fflush_r+0x58>
 8004ef4:	686c      	ldr	r4, [r5, #4]
 8004ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0ef      	beq.n	8004ede <_fflush_r+0xa>
 8004efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f00:	07d0      	lsls	r0, r2, #31
 8004f02:	d404      	bmi.n	8004f0e <_fflush_r+0x3a>
 8004f04:	0599      	lsls	r1, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_fflush_r+0x3a>
 8004f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0a:	f7fe fa24 	bl	8003356 <__retarget_lock_acquire_recursive>
 8004f0e:	4628      	mov	r0, r5
 8004f10:	4621      	mov	r1, r4
 8004f12:	f7ff ff59 	bl	8004dc8 <__sflush_r>
 8004f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f18:	07da      	lsls	r2, r3, #31
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	d4e0      	bmi.n	8004ee0 <_fflush_r+0xc>
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	059b      	lsls	r3, r3, #22
 8004f22:	d4dd      	bmi.n	8004ee0 <_fflush_r+0xc>
 8004f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f26:	f7fe fa17 	bl	8003358 <__retarget_lock_release_recursive>
 8004f2a:	e7d9      	b.n	8004ee0 <_fflush_r+0xc>
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <_fflush_r+0x70>)
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	d101      	bne.n	8004f36 <_fflush_r+0x62>
 8004f32:	68ac      	ldr	r4, [r5, #8]
 8004f34:	e7df      	b.n	8004ef6 <_fflush_r+0x22>
 8004f36:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <_fflush_r+0x74>)
 8004f38:	429c      	cmp	r4, r3
 8004f3a:	bf08      	it	eq
 8004f3c:	68ec      	ldreq	r4, [r5, #12]
 8004f3e:	e7da      	b.n	8004ef6 <_fflush_r+0x22>
 8004f40:	08005d28 	.word	0x08005d28
 8004f44:	08005d48 	.word	0x08005d48
 8004f48:	08005d08 	.word	0x08005d08

08004f4c <fiprintf>:
 8004f4c:	b40e      	push	{r1, r2, r3}
 8004f4e:	b503      	push	{r0, r1, lr}
 8004f50:	4601      	mov	r1, r0
 8004f52:	ab03      	add	r3, sp, #12
 8004f54:	4805      	ldr	r0, [pc, #20]	; (8004f6c <fiprintf+0x20>)
 8004f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	f000 fc9d 	bl	800589c <_vfiprintf_r>
 8004f62:	b002      	add	sp, #8
 8004f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f68:	b003      	add	sp, #12
 8004f6a:	4770      	bx	lr
 8004f6c:	20000058 	.word	0x20000058

08004f70 <_localeconv_r>:
 8004f70:	4800      	ldr	r0, [pc, #0]	; (8004f74 <_localeconv_r+0x4>)
 8004f72:	4770      	bx	lr
 8004f74:	200001ac 	.word	0x200001ac

08004f78 <_lseek_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	; (8004f98 <_lseek_r+0x20>)
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fd feb6 	bl	8002cf8 <_lseek>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_lseek_r+0x1e>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_lseek_r+0x1e>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	200003f0 	.word	0x200003f0

08004f9c <__swhatbuf_r>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	b096      	sub	sp, #88	; 0x58
 8004fa8:	4614      	mov	r4, r2
 8004faa:	461d      	mov	r5, r3
 8004fac:	da07      	bge.n	8004fbe <__swhatbuf_r+0x22>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	89b3      	ldrh	r3, [r6, #12]
 8004fb4:	061a      	lsls	r2, r3, #24
 8004fb6:	d410      	bmi.n	8004fda <__swhatbuf_r+0x3e>
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	e00e      	b.n	8004fdc <__swhatbuf_r+0x40>
 8004fbe:	466a      	mov	r2, sp
 8004fc0:	f000 fdb6 	bl	8005b30 <_fstat_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	dbf2      	blt.n	8004fae <__swhatbuf_r+0x12>
 8004fc8:	9a01      	ldr	r2, [sp, #4]
 8004fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fd2:	425a      	negs	r2, r3
 8004fd4:	415a      	adcs	r2, r3
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	e7ee      	b.n	8004fb8 <__swhatbuf_r+0x1c>
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	2000      	movs	r0, #0
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	b016      	add	sp, #88	; 0x58
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}

08004fe4 <__smakebuf_r>:
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe8:	079d      	lsls	r5, r3, #30
 8004fea:	4606      	mov	r6, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	d507      	bpl.n	8005000 <__smakebuf_r+0x1c>
 8004ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	6163      	str	r3, [r4, #20]
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	ab01      	add	r3, sp, #4
 8005002:	466a      	mov	r2, sp
 8005004:	f7ff ffca 	bl	8004f9c <__swhatbuf_r>
 8005008:	9900      	ldr	r1, [sp, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	4630      	mov	r0, r6
 800500e:	f7fe f9bb 	bl	8003388 <_malloc_r>
 8005012:	b948      	cbnz	r0, 8005028 <__smakebuf_r+0x44>
 8005014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d4ef      	bmi.n	8004ffc <__smakebuf_r+0x18>
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	e7e3      	b.n	8004ff0 <__smakebuf_r+0xc>
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <__smakebuf_r+0x7c>)
 800502a:	62b3      	str	r3, [r6, #40]	; 0x28
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	6163      	str	r3, [r4, #20]
 800503a:	9b01      	ldr	r3, [sp, #4]
 800503c:	6120      	str	r0, [r4, #16]
 800503e:	b15b      	cbz	r3, 8005058 <__smakebuf_r+0x74>
 8005040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 fd85 	bl	8005b54 <_isatty_r>
 800504a:	b128      	cbz	r0, 8005058 <__smakebuf_r+0x74>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	89a0      	ldrh	r0, [r4, #12]
 800505a:	4305      	orrs	r5, r0
 800505c:	81a5      	strh	r5, [r4, #12]
 800505e:	e7cd      	b.n	8004ffc <__smakebuf_r+0x18>
 8005060:	08003169 	.word	0x08003169

08005064 <malloc>:
 8005064:	4b02      	ldr	r3, [pc, #8]	; (8005070 <malloc+0xc>)
 8005066:	4601      	mov	r1, r0
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	f7fe b98d 	b.w	8003388 <_malloc_r>
 800506e:	bf00      	nop
 8005070:	20000058 	.word	0x20000058

08005074 <__malloc_lock>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__malloc_lock+0x8>)
 8005076:	f7fe b96e 	b.w	8003356 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	200003e8 	.word	0x200003e8

08005080 <__malloc_unlock>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__malloc_unlock+0x8>)
 8005082:	f7fe b969 	b.w	8003358 <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	200003e8 	.word	0x200003e8

0800508c <_Balloc>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	b976      	cbnz	r6, 80050b4 <_Balloc+0x28>
 8005096:	2010      	movs	r0, #16
 8005098:	f7ff ffe4 	bl	8005064 <malloc>
 800509c:	4602      	mov	r2, r0
 800509e:	6260      	str	r0, [r4, #36]	; 0x24
 80050a0:	b920      	cbnz	r0, 80050ac <_Balloc+0x20>
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <_Balloc+0x78>)
 80050a4:	4818      	ldr	r0, [pc, #96]	; (8005108 <_Balloc+0x7c>)
 80050a6:	2166      	movs	r1, #102	; 0x66
 80050a8:	f7fe ffe6 	bl	8004078 <__assert_func>
 80050ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050b0:	6006      	str	r6, [r0, #0]
 80050b2:	60c6      	str	r6, [r0, #12]
 80050b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050b6:	68f3      	ldr	r3, [r6, #12]
 80050b8:	b183      	cbz	r3, 80050dc <_Balloc+0x50>
 80050ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050c2:	b9b8      	cbnz	r0, 80050f4 <_Balloc+0x68>
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f605 	lsl.w	r6, r1, r5
 80050ca:	1d72      	adds	r2, r6, #5
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 fb5a 	bl	8005788 <_calloc_r>
 80050d4:	b160      	cbz	r0, 80050f0 <_Balloc+0x64>
 80050d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050da:	e00e      	b.n	80050fa <_Balloc+0x6e>
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	2104      	movs	r1, #4
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fb51 	bl	8005788 <_calloc_r>
 80050e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e8:	60f0      	str	r0, [r6, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e4      	bne.n	80050ba <_Balloc+0x2e>
 80050f0:	2000      	movs	r0, #0
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	6802      	ldr	r2, [r0, #0]
 80050f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050fa:	2300      	movs	r3, #0
 80050fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005100:	e7f7      	b.n	80050f2 <_Balloc+0x66>
 8005102:	bf00      	nop
 8005104:	08005de9 	.word	0x08005de9
 8005108:	08005e70 	.word	0x08005e70

0800510c <_Bfree>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005110:	4605      	mov	r5, r0
 8005112:	460c      	mov	r4, r1
 8005114:	b976      	cbnz	r6, 8005134 <_Bfree+0x28>
 8005116:	2010      	movs	r0, #16
 8005118:	f7ff ffa4 	bl	8005064 <malloc>
 800511c:	4602      	mov	r2, r0
 800511e:	6268      	str	r0, [r5, #36]	; 0x24
 8005120:	b920      	cbnz	r0, 800512c <_Bfree+0x20>
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <_Bfree+0x3c>)
 8005124:	4809      	ldr	r0, [pc, #36]	; (800514c <_Bfree+0x40>)
 8005126:	218a      	movs	r1, #138	; 0x8a
 8005128:	f7fe ffa6 	bl	8004078 <__assert_func>
 800512c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005130:	6006      	str	r6, [r0, #0]
 8005132:	60c6      	str	r6, [r0, #12]
 8005134:	b13c      	cbz	r4, 8005146 <_Bfree+0x3a>
 8005136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005138:	6862      	ldr	r2, [r4, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005140:	6021      	str	r1, [r4, #0]
 8005142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	08005de9 	.word	0x08005de9
 800514c:	08005e70 	.word	0x08005e70

08005150 <__multadd>:
 8005150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	690e      	ldr	r6, [r1, #16]
 8005156:	4607      	mov	r7, r0
 8005158:	4698      	mov	r8, r3
 800515a:	460c      	mov	r4, r1
 800515c:	f101 0014 	add.w	r0, r1, #20
 8005160:	2300      	movs	r3, #0
 8005162:	6805      	ldr	r5, [r0, #0]
 8005164:	b2a9      	uxth	r1, r5
 8005166:	fb02 8101 	mla	r1, r2, r1, r8
 800516a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800516e:	0c2d      	lsrs	r5, r5, #16
 8005170:	fb02 c505 	mla	r5, r2, r5, ip
 8005174:	b289      	uxth	r1, r1
 8005176:	3301      	adds	r3, #1
 8005178:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800517c:	429e      	cmp	r6, r3
 800517e:	f840 1b04 	str.w	r1, [r0], #4
 8005182:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005186:	dcec      	bgt.n	8005162 <__multadd+0x12>
 8005188:	f1b8 0f00 	cmp.w	r8, #0
 800518c:	d022      	beq.n	80051d4 <__multadd+0x84>
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	42b3      	cmp	r3, r6
 8005192:	dc19      	bgt.n	80051c8 <__multadd+0x78>
 8005194:	6861      	ldr	r1, [r4, #4]
 8005196:	4638      	mov	r0, r7
 8005198:	3101      	adds	r1, #1
 800519a:	f7ff ff77 	bl	800508c <_Balloc>
 800519e:	4605      	mov	r5, r0
 80051a0:	b928      	cbnz	r0, 80051ae <__multadd+0x5e>
 80051a2:	4602      	mov	r2, r0
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <__multadd+0x8c>)
 80051a6:	480e      	ldr	r0, [pc, #56]	; (80051e0 <__multadd+0x90>)
 80051a8:	21b5      	movs	r1, #181	; 0xb5
 80051aa:	f7fe ff65 	bl	8004078 <__assert_func>
 80051ae:	6922      	ldr	r2, [r4, #16]
 80051b0:	3202      	adds	r2, #2
 80051b2:	f104 010c 	add.w	r1, r4, #12
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	300c      	adds	r0, #12
 80051ba:	f7fe f8ce 	bl	800335a <memcpy>
 80051be:	4621      	mov	r1, r4
 80051c0:	4638      	mov	r0, r7
 80051c2:	f7ff ffa3 	bl	800510c <_Bfree>
 80051c6:	462c      	mov	r4, r5
 80051c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051cc:	3601      	adds	r6, #1
 80051ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80051d2:	6126      	str	r6, [r4, #16]
 80051d4:	4620      	mov	r0, r4
 80051d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051da:	bf00      	nop
 80051dc:	08005e5f 	.word	0x08005e5f
 80051e0:	08005e70 	.word	0x08005e70

080051e4 <__hi0bits>:
 80051e4:	0c03      	lsrs	r3, r0, #16
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	b9d3      	cbnz	r3, 8005220 <__hi0bits+0x3c>
 80051ea:	0400      	lsls	r0, r0, #16
 80051ec:	2310      	movs	r3, #16
 80051ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051f2:	bf04      	itt	eq
 80051f4:	0200      	lsleq	r0, r0, #8
 80051f6:	3308      	addeq	r3, #8
 80051f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051fc:	bf04      	itt	eq
 80051fe:	0100      	lsleq	r0, r0, #4
 8005200:	3304      	addeq	r3, #4
 8005202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005206:	bf04      	itt	eq
 8005208:	0080      	lsleq	r0, r0, #2
 800520a:	3302      	addeq	r3, #2
 800520c:	2800      	cmp	r0, #0
 800520e:	db05      	blt.n	800521c <__hi0bits+0x38>
 8005210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005214:	f103 0301 	add.w	r3, r3, #1
 8005218:	bf08      	it	eq
 800521a:	2320      	moveq	r3, #32
 800521c:	4618      	mov	r0, r3
 800521e:	4770      	bx	lr
 8005220:	2300      	movs	r3, #0
 8005222:	e7e4      	b.n	80051ee <__hi0bits+0xa>

08005224 <__lo0bits>:
 8005224:	6803      	ldr	r3, [r0, #0]
 8005226:	f013 0207 	ands.w	r2, r3, #7
 800522a:	4601      	mov	r1, r0
 800522c:	d00b      	beq.n	8005246 <__lo0bits+0x22>
 800522e:	07da      	lsls	r2, r3, #31
 8005230:	d424      	bmi.n	800527c <__lo0bits+0x58>
 8005232:	0798      	lsls	r0, r3, #30
 8005234:	bf49      	itett	mi
 8005236:	085b      	lsrmi	r3, r3, #1
 8005238:	089b      	lsrpl	r3, r3, #2
 800523a:	2001      	movmi	r0, #1
 800523c:	600b      	strmi	r3, [r1, #0]
 800523e:	bf5c      	itt	pl
 8005240:	600b      	strpl	r3, [r1, #0]
 8005242:	2002      	movpl	r0, #2
 8005244:	4770      	bx	lr
 8005246:	b298      	uxth	r0, r3
 8005248:	b9b0      	cbnz	r0, 8005278 <__lo0bits+0x54>
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	2010      	movs	r0, #16
 800524e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005252:	bf04      	itt	eq
 8005254:	0a1b      	lsreq	r3, r3, #8
 8005256:	3008      	addeq	r0, #8
 8005258:	071a      	lsls	r2, r3, #28
 800525a:	bf04      	itt	eq
 800525c:	091b      	lsreq	r3, r3, #4
 800525e:	3004      	addeq	r0, #4
 8005260:	079a      	lsls	r2, r3, #30
 8005262:	bf04      	itt	eq
 8005264:	089b      	lsreq	r3, r3, #2
 8005266:	3002      	addeq	r0, #2
 8005268:	07da      	lsls	r2, r3, #31
 800526a:	d403      	bmi.n	8005274 <__lo0bits+0x50>
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	f100 0001 	add.w	r0, r0, #1
 8005272:	d005      	beq.n	8005280 <__lo0bits+0x5c>
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	4770      	bx	lr
 8005278:	4610      	mov	r0, r2
 800527a:	e7e8      	b.n	800524e <__lo0bits+0x2a>
 800527c:	2000      	movs	r0, #0
 800527e:	4770      	bx	lr
 8005280:	2020      	movs	r0, #32
 8005282:	4770      	bx	lr

08005284 <__i2b>:
 8005284:	b510      	push	{r4, lr}
 8005286:	460c      	mov	r4, r1
 8005288:	2101      	movs	r1, #1
 800528a:	f7ff feff 	bl	800508c <_Balloc>
 800528e:	4602      	mov	r2, r0
 8005290:	b928      	cbnz	r0, 800529e <__i2b+0x1a>
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <__i2b+0x24>)
 8005294:	4805      	ldr	r0, [pc, #20]	; (80052ac <__i2b+0x28>)
 8005296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800529a:	f7fe feed 	bl	8004078 <__assert_func>
 800529e:	2301      	movs	r3, #1
 80052a0:	6144      	str	r4, [r0, #20]
 80052a2:	6103      	str	r3, [r0, #16]
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	08005e5f 	.word	0x08005e5f
 80052ac:	08005e70 	.word	0x08005e70

080052b0 <__multiply>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4614      	mov	r4, r2
 80052b6:	690a      	ldr	r2, [r1, #16]
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	bfb8      	it	lt
 80052be:	460b      	movlt	r3, r1
 80052c0:	460d      	mov	r5, r1
 80052c2:	bfbc      	itt	lt
 80052c4:	4625      	movlt	r5, r4
 80052c6:	461c      	movlt	r4, r3
 80052c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052d0:	68ab      	ldr	r3, [r5, #8]
 80052d2:	6869      	ldr	r1, [r5, #4]
 80052d4:	eb0a 0709 	add.w	r7, sl, r9
 80052d8:	42bb      	cmp	r3, r7
 80052da:	b085      	sub	sp, #20
 80052dc:	bfb8      	it	lt
 80052de:	3101      	addlt	r1, #1
 80052e0:	f7ff fed4 	bl	800508c <_Balloc>
 80052e4:	b930      	cbnz	r0, 80052f4 <__multiply+0x44>
 80052e6:	4602      	mov	r2, r0
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <__multiply+0x144>)
 80052ea:	4843      	ldr	r0, [pc, #268]	; (80053f8 <__multiply+0x148>)
 80052ec:	f240 115d 	movw	r1, #349	; 0x15d
 80052f0:	f7fe fec2 	bl	8004078 <__assert_func>
 80052f4:	f100 0614 	add.w	r6, r0, #20
 80052f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80052fc:	4633      	mov	r3, r6
 80052fe:	2200      	movs	r2, #0
 8005300:	4543      	cmp	r3, r8
 8005302:	d31e      	bcc.n	8005342 <__multiply+0x92>
 8005304:	f105 0c14 	add.w	ip, r5, #20
 8005308:	f104 0314 	add.w	r3, r4, #20
 800530c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005310:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	ebac 0205 	sub.w	r2, ip, r5
 800531a:	3a15      	subs	r2, #21
 800531c:	f022 0203 	bic.w	r2, r2, #3
 8005320:	3204      	adds	r2, #4
 8005322:	f105 0115 	add.w	r1, r5, #21
 8005326:	458c      	cmp	ip, r1
 8005328:	bf38      	it	cc
 800532a:	2204      	movcc	r2, #4
 800532c:	9201      	str	r2, [sp, #4]
 800532e:	9a02      	ldr	r2, [sp, #8]
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d808      	bhi.n	8005348 <__multiply+0x98>
 8005336:	2f00      	cmp	r7, #0
 8005338:	dc55      	bgt.n	80053e6 <__multiply+0x136>
 800533a:	6107      	str	r7, [r0, #16]
 800533c:	b005      	add	sp, #20
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	f843 2b04 	str.w	r2, [r3], #4
 8005346:	e7db      	b.n	8005300 <__multiply+0x50>
 8005348:	f8b3 a000 	ldrh.w	sl, [r3]
 800534c:	f1ba 0f00 	cmp.w	sl, #0
 8005350:	d020      	beq.n	8005394 <__multiply+0xe4>
 8005352:	f105 0e14 	add.w	lr, r5, #20
 8005356:	46b1      	mov	r9, r6
 8005358:	2200      	movs	r2, #0
 800535a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800535e:	f8d9 b000 	ldr.w	fp, [r9]
 8005362:	b2a1      	uxth	r1, r4
 8005364:	fa1f fb8b 	uxth.w	fp, fp
 8005368:	fb0a b101 	mla	r1, sl, r1, fp
 800536c:	4411      	add	r1, r2
 800536e:	f8d9 2000 	ldr.w	r2, [r9]
 8005372:	0c24      	lsrs	r4, r4, #16
 8005374:	0c12      	lsrs	r2, r2, #16
 8005376:	fb0a 2404 	mla	r4, sl, r4, r2
 800537a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800537e:	b289      	uxth	r1, r1
 8005380:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005384:	45f4      	cmp	ip, lr
 8005386:	f849 1b04 	str.w	r1, [r9], #4
 800538a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800538e:	d8e4      	bhi.n	800535a <__multiply+0xaa>
 8005390:	9901      	ldr	r1, [sp, #4]
 8005392:	5072      	str	r2, [r6, r1]
 8005394:	9a03      	ldr	r2, [sp, #12]
 8005396:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800539a:	3304      	adds	r3, #4
 800539c:	f1b9 0f00 	cmp.w	r9, #0
 80053a0:	d01f      	beq.n	80053e2 <__multiply+0x132>
 80053a2:	6834      	ldr	r4, [r6, #0]
 80053a4:	f105 0114 	add.w	r1, r5, #20
 80053a8:	46b6      	mov	lr, r6
 80053aa:	f04f 0a00 	mov.w	sl, #0
 80053ae:	880a      	ldrh	r2, [r1, #0]
 80053b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80053b4:	fb09 b202 	mla	r2, r9, r2, fp
 80053b8:	4492      	add	sl, r2
 80053ba:	b2a4      	uxth	r4, r4
 80053bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053c0:	f84e 4b04 	str.w	r4, [lr], #4
 80053c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80053c8:	f8be 2000 	ldrh.w	r2, [lr]
 80053cc:	0c24      	lsrs	r4, r4, #16
 80053ce:	fb09 2404 	mla	r4, r9, r4, r2
 80053d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053d6:	458c      	cmp	ip, r1
 80053d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053dc:	d8e7      	bhi.n	80053ae <__multiply+0xfe>
 80053de:	9a01      	ldr	r2, [sp, #4]
 80053e0:	50b4      	str	r4, [r6, r2]
 80053e2:	3604      	adds	r6, #4
 80053e4:	e7a3      	b.n	800532e <__multiply+0x7e>
 80053e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1a5      	bne.n	800533a <__multiply+0x8a>
 80053ee:	3f01      	subs	r7, #1
 80053f0:	e7a1      	b.n	8005336 <__multiply+0x86>
 80053f2:	bf00      	nop
 80053f4:	08005e5f 	.word	0x08005e5f
 80053f8:	08005e70 	.word	0x08005e70

080053fc <__pow5mult>:
 80053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005400:	4615      	mov	r5, r2
 8005402:	f012 0203 	ands.w	r2, r2, #3
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	d007      	beq.n	800541c <__pow5mult+0x20>
 800540c:	4c25      	ldr	r4, [pc, #148]	; (80054a4 <__pow5mult+0xa8>)
 800540e:	3a01      	subs	r2, #1
 8005410:	2300      	movs	r3, #0
 8005412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005416:	f7ff fe9b 	bl	8005150 <__multadd>
 800541a:	4607      	mov	r7, r0
 800541c:	10ad      	asrs	r5, r5, #2
 800541e:	d03d      	beq.n	800549c <__pow5mult+0xa0>
 8005420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005422:	b97c      	cbnz	r4, 8005444 <__pow5mult+0x48>
 8005424:	2010      	movs	r0, #16
 8005426:	f7ff fe1d 	bl	8005064 <malloc>
 800542a:	4602      	mov	r2, r0
 800542c:	6270      	str	r0, [r6, #36]	; 0x24
 800542e:	b928      	cbnz	r0, 800543c <__pow5mult+0x40>
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <__pow5mult+0xac>)
 8005432:	481e      	ldr	r0, [pc, #120]	; (80054ac <__pow5mult+0xb0>)
 8005434:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005438:	f7fe fe1e 	bl	8004078 <__assert_func>
 800543c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005440:	6004      	str	r4, [r0, #0]
 8005442:	60c4      	str	r4, [r0, #12]
 8005444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800544c:	b94c      	cbnz	r4, 8005462 <__pow5mult+0x66>
 800544e:	f240 2171 	movw	r1, #625	; 0x271
 8005452:	4630      	mov	r0, r6
 8005454:	f7ff ff16 	bl	8005284 <__i2b>
 8005458:	2300      	movs	r3, #0
 800545a:	f8c8 0008 	str.w	r0, [r8, #8]
 800545e:	4604      	mov	r4, r0
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	07eb      	lsls	r3, r5, #31
 8005468:	d50a      	bpl.n	8005480 <__pow5mult+0x84>
 800546a:	4639      	mov	r1, r7
 800546c:	4622      	mov	r2, r4
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ff1e 	bl	80052b0 <__multiply>
 8005474:	4639      	mov	r1, r7
 8005476:	4680      	mov	r8, r0
 8005478:	4630      	mov	r0, r6
 800547a:	f7ff fe47 	bl	800510c <_Bfree>
 800547e:	4647      	mov	r7, r8
 8005480:	106d      	asrs	r5, r5, #1
 8005482:	d00b      	beq.n	800549c <__pow5mult+0xa0>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	b938      	cbnz	r0, 8005498 <__pow5mult+0x9c>
 8005488:	4622      	mov	r2, r4
 800548a:	4621      	mov	r1, r4
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ff0f 	bl	80052b0 <__multiply>
 8005492:	6020      	str	r0, [r4, #0]
 8005494:	f8c0 9000 	str.w	r9, [r0]
 8005498:	4604      	mov	r4, r0
 800549a:	e7e4      	b.n	8005466 <__pow5mult+0x6a>
 800549c:	4638      	mov	r0, r7
 800549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a2:	bf00      	nop
 80054a4:	08005fc0 	.word	0x08005fc0
 80054a8:	08005de9 	.word	0x08005de9
 80054ac:	08005e70 	.word	0x08005e70

080054b0 <__lshift>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	460c      	mov	r4, r1
 80054b6:	6849      	ldr	r1, [r1, #4]
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	4607      	mov	r7, r0
 80054c2:	4691      	mov	r9, r2
 80054c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054c8:	f108 0601 	add.w	r6, r8, #1
 80054cc:	42b3      	cmp	r3, r6
 80054ce:	db0b      	blt.n	80054e8 <__lshift+0x38>
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7ff fddb 	bl	800508c <_Balloc>
 80054d6:	4605      	mov	r5, r0
 80054d8:	b948      	cbnz	r0, 80054ee <__lshift+0x3e>
 80054da:	4602      	mov	r2, r0
 80054dc:	4b28      	ldr	r3, [pc, #160]	; (8005580 <__lshift+0xd0>)
 80054de:	4829      	ldr	r0, [pc, #164]	; (8005584 <__lshift+0xd4>)
 80054e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054e4:	f7fe fdc8 	bl	8004078 <__assert_func>
 80054e8:	3101      	adds	r1, #1
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	e7ee      	b.n	80054cc <__lshift+0x1c>
 80054ee:	2300      	movs	r3, #0
 80054f0:	f100 0114 	add.w	r1, r0, #20
 80054f4:	f100 0210 	add.w	r2, r0, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	4553      	cmp	r3, sl
 80054fc:	db33      	blt.n	8005566 <__lshift+0xb6>
 80054fe:	6920      	ldr	r0, [r4, #16]
 8005500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005504:	f104 0314 	add.w	r3, r4, #20
 8005508:	f019 091f 	ands.w	r9, r9, #31
 800550c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005514:	d02b      	beq.n	800556e <__lshift+0xbe>
 8005516:	f1c9 0e20 	rsb	lr, r9, #32
 800551a:	468a      	mov	sl, r1
 800551c:	2200      	movs	r2, #0
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	fa00 f009 	lsl.w	r0, r0, r9
 8005524:	4302      	orrs	r2, r0
 8005526:	f84a 2b04 	str.w	r2, [sl], #4
 800552a:	f853 2b04 	ldr.w	r2, [r3], #4
 800552e:	459c      	cmp	ip, r3
 8005530:	fa22 f20e 	lsr.w	r2, r2, lr
 8005534:	d8f3      	bhi.n	800551e <__lshift+0x6e>
 8005536:	ebac 0304 	sub.w	r3, ip, r4
 800553a:	3b15      	subs	r3, #21
 800553c:	f023 0303 	bic.w	r3, r3, #3
 8005540:	3304      	adds	r3, #4
 8005542:	f104 0015 	add.w	r0, r4, #21
 8005546:	4584      	cmp	ip, r0
 8005548:	bf38      	it	cc
 800554a:	2304      	movcc	r3, #4
 800554c:	50ca      	str	r2, [r1, r3]
 800554e:	b10a      	cbz	r2, 8005554 <__lshift+0xa4>
 8005550:	f108 0602 	add.w	r6, r8, #2
 8005554:	3e01      	subs	r6, #1
 8005556:	4638      	mov	r0, r7
 8005558:	612e      	str	r6, [r5, #16]
 800555a:	4621      	mov	r1, r4
 800555c:	f7ff fdd6 	bl	800510c <_Bfree>
 8005560:	4628      	mov	r0, r5
 8005562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005566:	f842 0f04 	str.w	r0, [r2, #4]!
 800556a:	3301      	adds	r3, #1
 800556c:	e7c5      	b.n	80054fa <__lshift+0x4a>
 800556e:	3904      	subs	r1, #4
 8005570:	f853 2b04 	ldr.w	r2, [r3], #4
 8005574:	f841 2f04 	str.w	r2, [r1, #4]!
 8005578:	459c      	cmp	ip, r3
 800557a:	d8f9      	bhi.n	8005570 <__lshift+0xc0>
 800557c:	e7ea      	b.n	8005554 <__lshift+0xa4>
 800557e:	bf00      	nop
 8005580:	08005e5f 	.word	0x08005e5f
 8005584:	08005e70 	.word	0x08005e70

08005588 <__mcmp>:
 8005588:	b530      	push	{r4, r5, lr}
 800558a:	6902      	ldr	r2, [r0, #16]
 800558c:	690c      	ldr	r4, [r1, #16]
 800558e:	1b12      	subs	r2, r2, r4
 8005590:	d10e      	bne.n	80055b0 <__mcmp+0x28>
 8005592:	f100 0314 	add.w	r3, r0, #20
 8005596:	3114      	adds	r1, #20
 8005598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800559c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80055a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055a8:	42a5      	cmp	r5, r4
 80055aa:	d003      	beq.n	80055b4 <__mcmp+0x2c>
 80055ac:	d305      	bcc.n	80055ba <__mcmp+0x32>
 80055ae:	2201      	movs	r2, #1
 80055b0:	4610      	mov	r0, r2
 80055b2:	bd30      	pop	{r4, r5, pc}
 80055b4:	4283      	cmp	r3, r0
 80055b6:	d3f3      	bcc.n	80055a0 <__mcmp+0x18>
 80055b8:	e7fa      	b.n	80055b0 <__mcmp+0x28>
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055be:	e7f7      	b.n	80055b0 <__mcmp+0x28>

080055c0 <__mdiff>:
 80055c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	460c      	mov	r4, r1
 80055c6:	4606      	mov	r6, r0
 80055c8:	4611      	mov	r1, r2
 80055ca:	4620      	mov	r0, r4
 80055cc:	4617      	mov	r7, r2
 80055ce:	f7ff ffdb 	bl	8005588 <__mcmp>
 80055d2:	1e05      	subs	r5, r0, #0
 80055d4:	d110      	bne.n	80055f8 <__mdiff+0x38>
 80055d6:	4629      	mov	r1, r5
 80055d8:	4630      	mov	r0, r6
 80055da:	f7ff fd57 	bl	800508c <_Balloc>
 80055de:	b930      	cbnz	r0, 80055ee <__mdiff+0x2e>
 80055e0:	4b39      	ldr	r3, [pc, #228]	; (80056c8 <__mdiff+0x108>)
 80055e2:	4602      	mov	r2, r0
 80055e4:	f240 2132 	movw	r1, #562	; 0x232
 80055e8:	4838      	ldr	r0, [pc, #224]	; (80056cc <__mdiff+0x10c>)
 80055ea:	f7fe fd45 	bl	8004078 <__assert_func>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f8:	bfa4      	itt	ge
 80055fa:	463b      	movge	r3, r7
 80055fc:	4627      	movge	r7, r4
 80055fe:	4630      	mov	r0, r6
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	bfa6      	itte	ge
 8005604:	461c      	movge	r4, r3
 8005606:	2500      	movge	r5, #0
 8005608:	2501      	movlt	r5, #1
 800560a:	f7ff fd3f 	bl	800508c <_Balloc>
 800560e:	b920      	cbnz	r0, 800561a <__mdiff+0x5a>
 8005610:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <__mdiff+0x108>)
 8005612:	4602      	mov	r2, r0
 8005614:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005618:	e7e6      	b.n	80055e8 <__mdiff+0x28>
 800561a:	693e      	ldr	r6, [r7, #16]
 800561c:	60c5      	str	r5, [r0, #12]
 800561e:	6925      	ldr	r5, [r4, #16]
 8005620:	f107 0114 	add.w	r1, r7, #20
 8005624:	f104 0914 	add.w	r9, r4, #20
 8005628:	f100 0e14 	add.w	lr, r0, #20
 800562c:	f107 0210 	add.w	r2, r7, #16
 8005630:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005634:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005638:	46f2      	mov	sl, lr
 800563a:	2700      	movs	r7, #0
 800563c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005644:	fa1f f883 	uxth.w	r8, r3
 8005648:	fa17 f78b 	uxtah	r7, r7, fp
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	eba7 0808 	sub.w	r8, r7, r8
 8005652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800565a:	fa1f f888 	uxth.w	r8, r8
 800565e:	141f      	asrs	r7, r3, #16
 8005660:	454d      	cmp	r5, r9
 8005662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005666:	f84a 3b04 	str.w	r3, [sl], #4
 800566a:	d8e7      	bhi.n	800563c <__mdiff+0x7c>
 800566c:	1b2b      	subs	r3, r5, r4
 800566e:	3b15      	subs	r3, #21
 8005670:	f023 0303 	bic.w	r3, r3, #3
 8005674:	3304      	adds	r3, #4
 8005676:	3415      	adds	r4, #21
 8005678:	42a5      	cmp	r5, r4
 800567a:	bf38      	it	cc
 800567c:	2304      	movcc	r3, #4
 800567e:	4419      	add	r1, r3
 8005680:	4473      	add	r3, lr
 8005682:	469e      	mov	lr, r3
 8005684:	460d      	mov	r5, r1
 8005686:	4565      	cmp	r5, ip
 8005688:	d30e      	bcc.n	80056a8 <__mdiff+0xe8>
 800568a:	f10c 0203 	add.w	r2, ip, #3
 800568e:	1a52      	subs	r2, r2, r1
 8005690:	f022 0203 	bic.w	r2, r2, #3
 8005694:	3903      	subs	r1, #3
 8005696:	458c      	cmp	ip, r1
 8005698:	bf38      	it	cc
 800569a:	2200      	movcc	r2, #0
 800569c:	441a      	add	r2, r3
 800569e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80056a2:	b17b      	cbz	r3, 80056c4 <__mdiff+0x104>
 80056a4:	6106      	str	r6, [r0, #16]
 80056a6:	e7a5      	b.n	80055f4 <__mdiff+0x34>
 80056a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80056ac:	fa17 f488 	uxtah	r4, r7, r8
 80056b0:	1422      	asrs	r2, r4, #16
 80056b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80056b6:	b2a4      	uxth	r4, r4
 80056b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056bc:	f84e 4b04 	str.w	r4, [lr], #4
 80056c0:	1417      	asrs	r7, r2, #16
 80056c2:	e7e0      	b.n	8005686 <__mdiff+0xc6>
 80056c4:	3e01      	subs	r6, #1
 80056c6:	e7ea      	b.n	800569e <__mdiff+0xde>
 80056c8:	08005e5f 	.word	0x08005e5f
 80056cc:	08005e70 	.word	0x08005e70

080056d0 <__d2b>:
 80056d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	4689      	mov	r9, r1
 80056d6:	2101      	movs	r1, #1
 80056d8:	ec57 6b10 	vmov	r6, r7, d0
 80056dc:	4690      	mov	r8, r2
 80056de:	f7ff fcd5 	bl	800508c <_Balloc>
 80056e2:	4604      	mov	r4, r0
 80056e4:	b930      	cbnz	r0, 80056f4 <__d2b+0x24>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <__d2b+0xb0>)
 80056ea:	4826      	ldr	r0, [pc, #152]	; (8005784 <__d2b+0xb4>)
 80056ec:	f240 310a 	movw	r1, #778	; 0x30a
 80056f0:	f7fe fcc2 	bl	8004078 <__assert_func>
 80056f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056fc:	bb35      	cbnz	r5, 800574c <__d2b+0x7c>
 80056fe:	2e00      	cmp	r6, #0
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	d028      	beq.n	8005756 <__d2b+0x86>
 8005704:	4668      	mov	r0, sp
 8005706:	9600      	str	r6, [sp, #0]
 8005708:	f7ff fd8c 	bl	8005224 <__lo0bits>
 800570c:	9900      	ldr	r1, [sp, #0]
 800570e:	b300      	cbz	r0, 8005752 <__d2b+0x82>
 8005710:	9a01      	ldr	r2, [sp, #4]
 8005712:	f1c0 0320 	rsb	r3, r0, #32
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	430b      	orrs	r3, r1
 800571c:	40c2      	lsrs	r2, r0
 800571e:	6163      	str	r3, [r4, #20]
 8005720:	9201      	str	r2, [sp, #4]
 8005722:	9b01      	ldr	r3, [sp, #4]
 8005724:	61a3      	str	r3, [r4, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf14      	ite	ne
 800572a:	2202      	movne	r2, #2
 800572c:	2201      	moveq	r2, #1
 800572e:	6122      	str	r2, [r4, #16]
 8005730:	b1d5      	cbz	r5, 8005768 <__d2b+0x98>
 8005732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005736:	4405      	add	r5, r0
 8005738:	f8c9 5000 	str.w	r5, [r9]
 800573c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005740:	f8c8 0000 	str.w	r0, [r8]
 8005744:	4620      	mov	r0, r4
 8005746:	b003      	add	sp, #12
 8005748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800574c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005750:	e7d5      	b.n	80056fe <__d2b+0x2e>
 8005752:	6161      	str	r1, [r4, #20]
 8005754:	e7e5      	b.n	8005722 <__d2b+0x52>
 8005756:	a801      	add	r0, sp, #4
 8005758:	f7ff fd64 	bl	8005224 <__lo0bits>
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	6163      	str	r3, [r4, #20]
 8005760:	2201      	movs	r2, #1
 8005762:	6122      	str	r2, [r4, #16]
 8005764:	3020      	adds	r0, #32
 8005766:	e7e3      	b.n	8005730 <__d2b+0x60>
 8005768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800576c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005770:	f8c9 0000 	str.w	r0, [r9]
 8005774:	6918      	ldr	r0, [r3, #16]
 8005776:	f7ff fd35 	bl	80051e4 <__hi0bits>
 800577a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800577e:	e7df      	b.n	8005740 <__d2b+0x70>
 8005780:	08005e5f 	.word	0x08005e5f
 8005784:	08005e70 	.word	0x08005e70

08005788 <_calloc_r>:
 8005788:	b513      	push	{r0, r1, r4, lr}
 800578a:	434a      	muls	r2, r1
 800578c:	4611      	mov	r1, r2
 800578e:	9201      	str	r2, [sp, #4]
 8005790:	f7fd fdfa 	bl	8003388 <_malloc_r>
 8005794:	4604      	mov	r4, r0
 8005796:	b118      	cbz	r0, 80057a0 <_calloc_r+0x18>
 8005798:	9a01      	ldr	r2, [sp, #4]
 800579a:	2100      	movs	r1, #0
 800579c:	f7fd fdeb 	bl	8003376 <memset>
 80057a0:	4620      	mov	r0, r4
 80057a2:	b002      	add	sp, #8
 80057a4:	bd10      	pop	{r4, pc}
	...

080057a8 <_free_r>:
 80057a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057aa:	2900      	cmp	r1, #0
 80057ac:	d048      	beq.n	8005840 <_free_r+0x98>
 80057ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b2:	9001      	str	r0, [sp, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f1a1 0404 	sub.w	r4, r1, #4
 80057ba:	bfb8      	it	lt
 80057bc:	18e4      	addlt	r4, r4, r3
 80057be:	f7ff fc59 	bl	8005074 <__malloc_lock>
 80057c2:	4a20      	ldr	r2, [pc, #128]	; (8005844 <_free_r+0x9c>)
 80057c4:	9801      	ldr	r0, [sp, #4]
 80057c6:	6813      	ldr	r3, [r2, #0]
 80057c8:	4615      	mov	r5, r2
 80057ca:	b933      	cbnz	r3, 80057da <_free_r+0x32>
 80057cc:	6063      	str	r3, [r4, #4]
 80057ce:	6014      	str	r4, [r2, #0]
 80057d0:	b003      	add	sp, #12
 80057d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d6:	f7ff bc53 	b.w	8005080 <__malloc_unlock>
 80057da:	42a3      	cmp	r3, r4
 80057dc:	d90b      	bls.n	80057f6 <_free_r+0x4e>
 80057de:	6821      	ldr	r1, [r4, #0]
 80057e0:	1862      	adds	r2, r4, r1
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bf04      	itt	eq
 80057e6:	681a      	ldreq	r2, [r3, #0]
 80057e8:	685b      	ldreq	r3, [r3, #4]
 80057ea:	6063      	str	r3, [r4, #4]
 80057ec:	bf04      	itt	eq
 80057ee:	1852      	addeq	r2, r2, r1
 80057f0:	6022      	streq	r2, [r4, #0]
 80057f2:	602c      	str	r4, [r5, #0]
 80057f4:	e7ec      	b.n	80057d0 <_free_r+0x28>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x58>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x4e>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x78>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1dd      	bne.n	80057d0 <_free_r+0x28>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	4421      	add	r1, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7d7      	b.n	80057d0 <_free_r+0x28>
 8005820:	d902      	bls.n	8005828 <_free_r+0x80>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d3      	b.n	80057d0 <_free_r+0x28>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7c7      	b.n	80057d0 <_free_r+0x28>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	200002fc 	.word	0x200002fc

08005848 <__sfputc_r>:
 8005848:	6893      	ldr	r3, [r2, #8]
 800584a:	3b01      	subs	r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	b410      	push	{r4}
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	da08      	bge.n	8005866 <__sfputc_r+0x1e>
 8005854:	6994      	ldr	r4, [r2, #24]
 8005856:	42a3      	cmp	r3, r4
 8005858:	db01      	blt.n	800585e <__sfputc_r+0x16>
 800585a:	290a      	cmp	r1, #10
 800585c:	d103      	bne.n	8005866 <__sfputc_r+0x1e>
 800585e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005862:	f7fe bb37 	b.w	8003ed4 <__swbuf_r>
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	1c58      	adds	r0, r3, #1
 800586a:	6010      	str	r0, [r2, #0]
 800586c:	7019      	strb	r1, [r3, #0]
 800586e:	4608      	mov	r0, r1
 8005870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005874:	4770      	bx	lr

08005876 <__sfputs_r>:
 8005876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005878:	4606      	mov	r6, r0
 800587a:	460f      	mov	r7, r1
 800587c:	4614      	mov	r4, r2
 800587e:	18d5      	adds	r5, r2, r3
 8005880:	42ac      	cmp	r4, r5
 8005882:	d101      	bne.n	8005888 <__sfputs_r+0x12>
 8005884:	2000      	movs	r0, #0
 8005886:	e007      	b.n	8005898 <__sfputs_r+0x22>
 8005888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800588c:	463a      	mov	r2, r7
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ffda 	bl	8005848 <__sfputc_r>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d1f3      	bne.n	8005880 <__sfputs_r+0xa>
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800589c <_vfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	460d      	mov	r5, r1
 80058a2:	b09d      	sub	sp, #116	; 0x74
 80058a4:	4614      	mov	r4, r2
 80058a6:	4698      	mov	r8, r3
 80058a8:	4606      	mov	r6, r0
 80058aa:	b118      	cbz	r0, 80058b4 <_vfiprintf_r+0x18>
 80058ac:	6983      	ldr	r3, [r0, #24]
 80058ae:	b90b      	cbnz	r3, 80058b4 <_vfiprintf_r+0x18>
 80058b0:	f7fd fc8e 	bl	80031d0 <__sinit>
 80058b4:	4b89      	ldr	r3, [pc, #548]	; (8005adc <_vfiprintf_r+0x240>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	d11b      	bne.n	80058f2 <_vfiprintf_r+0x56>
 80058ba:	6875      	ldr	r5, [r6, #4]
 80058bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058be:	07d9      	lsls	r1, r3, #31
 80058c0:	d405      	bmi.n	80058ce <_vfiprintf_r+0x32>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	059a      	lsls	r2, r3, #22
 80058c6:	d402      	bmi.n	80058ce <_vfiprintf_r+0x32>
 80058c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ca:	f7fd fd44 	bl	8003356 <__retarget_lock_acquire_recursive>
 80058ce:	89ab      	ldrh	r3, [r5, #12]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	d501      	bpl.n	80058d8 <_vfiprintf_r+0x3c>
 80058d4:	692b      	ldr	r3, [r5, #16]
 80058d6:	b9eb      	cbnz	r3, 8005914 <_vfiprintf_r+0x78>
 80058d8:	4629      	mov	r1, r5
 80058da:	4630      	mov	r0, r6
 80058dc:	f7fe fb5e 	bl	8003f9c <__swsetup_r>
 80058e0:	b1c0      	cbz	r0, 8005914 <_vfiprintf_r+0x78>
 80058e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058e4:	07dc      	lsls	r4, r3, #31
 80058e6:	d50e      	bpl.n	8005906 <_vfiprintf_r+0x6a>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ec:	b01d      	add	sp, #116	; 0x74
 80058ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f2:	4b7b      	ldr	r3, [pc, #492]	; (8005ae0 <_vfiprintf_r+0x244>)
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d101      	bne.n	80058fc <_vfiprintf_r+0x60>
 80058f8:	68b5      	ldr	r5, [r6, #8]
 80058fa:	e7df      	b.n	80058bc <_vfiprintf_r+0x20>
 80058fc:	4b79      	ldr	r3, [pc, #484]	; (8005ae4 <_vfiprintf_r+0x248>)
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf08      	it	eq
 8005902:	68f5      	ldreq	r5, [r6, #12]
 8005904:	e7da      	b.n	80058bc <_vfiprintf_r+0x20>
 8005906:	89ab      	ldrh	r3, [r5, #12]
 8005908:	0598      	lsls	r0, r3, #22
 800590a:	d4ed      	bmi.n	80058e8 <_vfiprintf_r+0x4c>
 800590c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800590e:	f7fd fd23 	bl	8003358 <__retarget_lock_release_recursive>
 8005912:	e7e9      	b.n	80058e8 <_vfiprintf_r+0x4c>
 8005914:	2300      	movs	r3, #0
 8005916:	9309      	str	r3, [sp, #36]	; 0x24
 8005918:	2320      	movs	r3, #32
 800591a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800591e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005922:	2330      	movs	r3, #48	; 0x30
 8005924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ae8 <_vfiprintf_r+0x24c>
 8005928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800592c:	f04f 0901 	mov.w	r9, #1
 8005930:	4623      	mov	r3, r4
 8005932:	469a      	mov	sl, r3
 8005934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005938:	b10a      	cbz	r2, 800593e <_vfiprintf_r+0xa2>
 800593a:	2a25      	cmp	r2, #37	; 0x25
 800593c:	d1f9      	bne.n	8005932 <_vfiprintf_r+0x96>
 800593e:	ebba 0b04 	subs.w	fp, sl, r4
 8005942:	d00b      	beq.n	800595c <_vfiprintf_r+0xc0>
 8005944:	465b      	mov	r3, fp
 8005946:	4622      	mov	r2, r4
 8005948:	4629      	mov	r1, r5
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff ff93 	bl	8005876 <__sfputs_r>
 8005950:	3001      	adds	r0, #1
 8005952:	f000 80aa 	beq.w	8005aaa <_vfiprintf_r+0x20e>
 8005956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005958:	445a      	add	r2, fp
 800595a:	9209      	str	r2, [sp, #36]	; 0x24
 800595c:	f89a 3000 	ldrb.w	r3, [sl]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80a2 	beq.w	8005aaa <_vfiprintf_r+0x20e>
 8005966:	2300      	movs	r3, #0
 8005968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005970:	f10a 0a01 	add.w	sl, sl, #1
 8005974:	9304      	str	r3, [sp, #16]
 8005976:	9307      	str	r3, [sp, #28]
 8005978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800597c:	931a      	str	r3, [sp, #104]	; 0x68
 800597e:	4654      	mov	r4, sl
 8005980:	2205      	movs	r2, #5
 8005982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005986:	4858      	ldr	r0, [pc, #352]	; (8005ae8 <_vfiprintf_r+0x24c>)
 8005988:	f7fa fc2a 	bl	80001e0 <memchr>
 800598c:	9a04      	ldr	r2, [sp, #16]
 800598e:	b9d8      	cbnz	r0, 80059c8 <_vfiprintf_r+0x12c>
 8005990:	06d1      	lsls	r1, r2, #27
 8005992:	bf44      	itt	mi
 8005994:	2320      	movmi	r3, #32
 8005996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599a:	0713      	lsls	r3, r2, #28
 800599c:	bf44      	itt	mi
 800599e:	232b      	movmi	r3, #43	; 0x2b
 80059a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059a4:	f89a 3000 	ldrb.w	r3, [sl]
 80059a8:	2b2a      	cmp	r3, #42	; 0x2a
 80059aa:	d015      	beq.n	80059d8 <_vfiprintf_r+0x13c>
 80059ac:	9a07      	ldr	r2, [sp, #28]
 80059ae:	4654      	mov	r4, sl
 80059b0:	2000      	movs	r0, #0
 80059b2:	f04f 0c0a 	mov.w	ip, #10
 80059b6:	4621      	mov	r1, r4
 80059b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059bc:	3b30      	subs	r3, #48	; 0x30
 80059be:	2b09      	cmp	r3, #9
 80059c0:	d94e      	bls.n	8005a60 <_vfiprintf_r+0x1c4>
 80059c2:	b1b0      	cbz	r0, 80059f2 <_vfiprintf_r+0x156>
 80059c4:	9207      	str	r2, [sp, #28]
 80059c6:	e014      	b.n	80059f2 <_vfiprintf_r+0x156>
 80059c8:	eba0 0308 	sub.w	r3, r0, r8
 80059cc:	fa09 f303 	lsl.w	r3, r9, r3
 80059d0:	4313      	orrs	r3, r2
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	46a2      	mov	sl, r4
 80059d6:	e7d2      	b.n	800597e <_vfiprintf_r+0xe2>
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	1d19      	adds	r1, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	9103      	str	r1, [sp, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bfbb      	ittet	lt
 80059e4:	425b      	neglt	r3, r3
 80059e6:	f042 0202 	orrlt.w	r2, r2, #2
 80059ea:	9307      	strge	r3, [sp, #28]
 80059ec:	9307      	strlt	r3, [sp, #28]
 80059ee:	bfb8      	it	lt
 80059f0:	9204      	strlt	r2, [sp, #16]
 80059f2:	7823      	ldrb	r3, [r4, #0]
 80059f4:	2b2e      	cmp	r3, #46	; 0x2e
 80059f6:	d10c      	bne.n	8005a12 <_vfiprintf_r+0x176>
 80059f8:	7863      	ldrb	r3, [r4, #1]
 80059fa:	2b2a      	cmp	r3, #42	; 0x2a
 80059fc:	d135      	bne.n	8005a6a <_vfiprintf_r+0x1ce>
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	1d1a      	adds	r2, r3, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	9203      	str	r2, [sp, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a0e:	3402      	adds	r4, #2
 8005a10:	9305      	str	r3, [sp, #20]
 8005a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005af8 <_vfiprintf_r+0x25c>
 8005a16:	7821      	ldrb	r1, [r4, #0]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f7fa fbe0 	bl	80001e0 <memchr>
 8005a20:	b140      	cbz	r0, 8005a34 <_vfiprintf_r+0x198>
 8005a22:	2340      	movs	r3, #64	; 0x40
 8005a24:	eba0 000a 	sub.w	r0, r0, sl
 8005a28:	fa03 f000 	lsl.w	r0, r3, r0
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	4303      	orrs	r3, r0
 8005a30:	3401      	adds	r4, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	482c      	ldr	r0, [pc, #176]	; (8005aec <_vfiprintf_r+0x250>)
 8005a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a3e:	2206      	movs	r2, #6
 8005a40:	f7fa fbce 	bl	80001e0 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d03f      	beq.n	8005ac8 <_vfiprintf_r+0x22c>
 8005a48:	4b29      	ldr	r3, [pc, #164]	; (8005af0 <_vfiprintf_r+0x254>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_vfiprintf_r+0x1f8>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	443b      	add	r3, r7
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	e767      	b.n	8005930 <_vfiprintf_r+0x94>
 8005a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a64:	460c      	mov	r4, r1
 8005a66:	2001      	movs	r0, #1
 8005a68:	e7a5      	b.n	80059b6 <_vfiprintf_r+0x11a>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	3401      	adds	r4, #1
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4620      	mov	r0, r4
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	; 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_vfiprintf_r+0x1ee>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c5      	beq.n	8005a12 <_vfiprintf_r+0x176>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c3      	b.n	8005a12 <_vfiprintf_r+0x176>
 8005a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8e:	4604      	mov	r4, r0
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7f0      	b.n	8005a76 <_vfiprintf_r+0x1da>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <_vfiprintf_r+0x258>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7fd fd6c 	bl	800357c <_printf_float>
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	1c78      	adds	r0, r7, #1
 8005aa8:	d1d6      	bne.n	8005a58 <_vfiprintf_r+0x1bc>
 8005aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aac:	07d9      	lsls	r1, r3, #31
 8005aae:	d405      	bmi.n	8005abc <_vfiprintf_r+0x220>
 8005ab0:	89ab      	ldrh	r3, [r5, #12]
 8005ab2:	059a      	lsls	r2, r3, #22
 8005ab4:	d402      	bmi.n	8005abc <_vfiprintf_r+0x220>
 8005ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab8:	f7fd fc4e 	bl	8003358 <__retarget_lock_release_recursive>
 8005abc:	89ab      	ldrh	r3, [r5, #12]
 8005abe:	065b      	lsls	r3, r3, #25
 8005ac0:	f53f af12 	bmi.w	80058e8 <_vfiprintf_r+0x4c>
 8005ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ac6:	e711      	b.n	80058ec <_vfiprintf_r+0x50>
 8005ac8:	ab03      	add	r3, sp, #12
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	462a      	mov	r2, r5
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <_vfiprintf_r+0x258>)
 8005ad0:	a904      	add	r1, sp, #16
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7fd fff6 	bl	8003ac4 <_printf_i>
 8005ad8:	e7e4      	b.n	8005aa4 <_vfiprintf_r+0x208>
 8005ada:	bf00      	nop
 8005adc:	08005d28 	.word	0x08005d28
 8005ae0:	08005d48 	.word	0x08005d48
 8005ae4:	08005d08 	.word	0x08005d08
 8005ae8:	08005fcc 	.word	0x08005fcc
 8005aec:	08005fd6 	.word	0x08005fd6
 8005af0:	0800357d 	.word	0x0800357d
 8005af4:	08005877 	.word	0x08005877
 8005af8:	08005fd2 	.word	0x08005fd2

08005afc <_read_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4d07      	ldr	r5, [pc, #28]	; (8005b1c <_read_r+0x20>)
 8005b00:	4604      	mov	r4, r0
 8005b02:	4608      	mov	r0, r1
 8005b04:	4611      	mov	r1, r2
 8005b06:	2200      	movs	r2, #0
 8005b08:	602a      	str	r2, [r5, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f7fd f89c 	bl	8002c48 <_read>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_read_r+0x1e>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_read_r+0x1e>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	200003f0 	.word	0x200003f0

08005b20 <abort>:
 8005b20:	b508      	push	{r3, lr}
 8005b22:	2006      	movs	r0, #6
 8005b24:	f000 f860 	bl	8005be8 <raise>
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f000 f88f 	bl	8005c4c <_exit>
	...

08005b30 <_fstat_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d07      	ldr	r5, [pc, #28]	; (8005b50 <_fstat_r+0x20>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	f7fd f968 	bl	8002e12 <_fstat>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d102      	bne.n	8005b4c <_fstat_r+0x1c>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b103      	cbz	r3, 8005b4c <_fstat_r+0x1c>
 8005b4a:	6023      	str	r3, [r4, #0]
 8005b4c:	bd38      	pop	{r3, r4, r5, pc}
 8005b4e:	bf00      	nop
 8005b50:	200003f0 	.word	0x200003f0

08005b54 <_isatty_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_isatty_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fd fabc 	bl	80030dc <_isatty>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_isatty_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_isatty_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200003f0 	.word	0x200003f0

08005b74 <__ascii_mbtowc>:
 8005b74:	b082      	sub	sp, #8
 8005b76:	b901      	cbnz	r1, 8005b7a <__ascii_mbtowc+0x6>
 8005b78:	a901      	add	r1, sp, #4
 8005b7a:	b142      	cbz	r2, 8005b8e <__ascii_mbtowc+0x1a>
 8005b7c:	b14b      	cbz	r3, 8005b92 <__ascii_mbtowc+0x1e>
 8005b7e:	7813      	ldrb	r3, [r2, #0]
 8005b80:	600b      	str	r3, [r1, #0]
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	1e10      	subs	r0, r2, #0
 8005b86:	bf18      	it	ne
 8005b88:	2001      	movne	r0, #1
 8005b8a:	b002      	add	sp, #8
 8005b8c:	4770      	bx	lr
 8005b8e:	4610      	mov	r0, r2
 8005b90:	e7fb      	b.n	8005b8a <__ascii_mbtowc+0x16>
 8005b92:	f06f 0001 	mvn.w	r0, #1
 8005b96:	e7f8      	b.n	8005b8a <__ascii_mbtowc+0x16>

08005b98 <_raise_r>:
 8005b98:	291f      	cmp	r1, #31
 8005b9a:	b538      	push	{r3, r4, r5, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	d904      	bls.n	8005bac <_raise_r+0x14>
 8005ba2:	2316      	movs	r3, #22
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bae:	b112      	cbz	r2, 8005bb6 <_raise_r+0x1e>
 8005bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bb4:	b94b      	cbnz	r3, 8005bca <_raise_r+0x32>
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 f830 	bl	8005c1c <_getpid_r>
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc6:	f000 b817 	b.w	8005bf8 <_kill_r>
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d00a      	beq.n	8005be4 <_raise_r+0x4c>
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	d103      	bne.n	8005bda <_raise_r+0x42>
 8005bd2:	2316      	movs	r3, #22
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	e7e7      	b.n	8005baa <_raise_r+0x12>
 8005bda:	2400      	movs	r4, #0
 8005bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005be0:	4628      	mov	r0, r5
 8005be2:	4798      	blx	r3
 8005be4:	2000      	movs	r0, #0
 8005be6:	e7e0      	b.n	8005baa <_raise_r+0x12>

08005be8 <raise>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <raise+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f7ff bfd3 	b.w	8005b98 <_raise_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000058 	.word	0x20000058

08005bf8 <_kill_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d07      	ldr	r5, [pc, #28]	; (8005c18 <_kill_r+0x20>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f000 f819 	bl	8005c3c <_kill>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d102      	bne.n	8005c14 <_kill_r+0x1c>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	b103      	cbz	r3, 8005c14 <_kill_r+0x1c>
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	200003f0 	.word	0x200003f0

08005c1c <_getpid_r>:
 8005c1c:	f7fd b8d6 	b.w	8002dcc <_getpid>

08005c20 <__ascii_wctomb>:
 8005c20:	b149      	cbz	r1, 8005c36 <__ascii_wctomb+0x16>
 8005c22:	2aff      	cmp	r2, #255	; 0xff
 8005c24:	bf85      	ittet	hi
 8005c26:	238a      	movhi	r3, #138	; 0x8a
 8005c28:	6003      	strhi	r3, [r0, #0]
 8005c2a:	700a      	strbls	r2, [r1, #0]
 8005c2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005c30:	bf98      	it	ls
 8005c32:	2001      	movls	r0, #1
 8005c34:	4770      	bx	lr
 8005c36:	4608      	mov	r0, r1
 8005c38:	4770      	bx	lr
	...

08005c3c <_kill>:
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <_kill+0xc>)
 8005c3e:	2258      	movs	r2, #88	; 0x58
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c46:	4770      	bx	lr
 8005c48:	200003f0 	.word	0x200003f0

08005c4c <_exit>:
 8005c4c:	e7fe      	b.n	8005c4c <_exit>
	...

08005c50 <_init>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	bf00      	nop
 8005c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c56:	bc08      	pop	{r3}
 8005c58:	469e      	mov	lr, r3
 8005c5a:	4770      	bx	lr

08005c5c <_fini>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr
