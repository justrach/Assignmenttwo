
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08005c98  08005c98  00015c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006130  08006130  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08006130  08006130  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006130  08006130  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000230  08006368  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006368  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c414  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d8d  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a6  00000000  00000000  0003220d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2602  00000000  00000000  0003d9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ffb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  00130008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001338d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  001338f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c80 	.word	0x08005c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08005c80 	.word	0x08005c80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_GPIO_EXTI_Callback>:
uint32_t tickstart;
uint32_t tickstart2;
uint32_t tickstart3;

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb8:	d14f      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0xb2>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbe:	4829      	ldr	r0, [pc, #164]	; (8000c64 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000bc0:	f001 fa8e 	bl	80020e0 <HAL_GPIO_TogglePin>
				printf("\t Blue button is pressed. \n");
 8000bc4:	4828      	ldr	r0, [pc, #160]	; (8000c68 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000bc6:	f003 f943 	bl	8003e50 <puts>
		if (count ==1){
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d105      	bne.n	8000bde <HAL_GPIO_EXTI_Callback+0x36>
			count ++;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e027      	b.n	8000c2e <HAL_GPIO_EXTI_Callback+0x86>
		}
		else if(count ==2) {
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10a      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x54>
			tickstart = HAL_GetTick();
 8000be6:	f000 fea7 	bl	8001938 <HAL_GetTick>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000bee:	6013      	str	r3, [r2, #0]
			count++;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e018      	b.n	8000c2e <HAL_GPIO_EXTI_Callback+0x86>
		} else if(count ==3){
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d114      	bne.n	8000c2e <HAL_GPIO_EXTI_Callback+0x86>
			tickstart2 = HAL_GetTick();
 8000c04:	f000 fe98 	bl	8001938 <HAL_GetTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c0c:	6013      	str	r3, [r2, #0]
			count = 1;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
		    tickstart3= (tickstart2 - tickstart);
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000c20:	6013      	str	r3, [r2, #0]

			printf("The value of the third ticker is %d\n\n\n",tickstart3);
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000c2a:	f003 f88b 	bl	8003d44 <iprintf>
		}

		if(flag == 1){
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d103      	bne.n	8000c3e <HAL_GPIO_EXTI_Callback+0x96>
			flag =0;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
		else if((flag ==0) && ((tickstart2 - tickstart)<50)){
			flag = 1;
		}

	}
}
 8000c3c:	e00d      	b.n	8000c5a <HAL_GPIO_EXTI_Callback+0xb2>
		else if((flag ==0) && ((tickstart2 - tickstart)<50)){
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d109      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0xb2>
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d802      	bhi.n	8000c5a <HAL_GPIO_EXTI_Callback+0xb2>
			flag = 1;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	48000400 	.word	0x48000400
 8000c68:	08005c98 	.word	0x08005c98
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	20000314 	.word	0x20000314
 8000c74:	2000030c 	.word	0x2000030c
 8000c78:	20000310 	.word	0x20000310
 8000c7c:	08005cb4 	.word	0x08005cb4
 8000c80:	20000000 	.word	0x20000000

08000c84 <main>:
int main(void)
{
 8000c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c88:	b08c      	sub	sp, #48	; 0x30
 8000c8a:	af06      	add	r7, sp, #24
	initialise_monitor_handles();
 8000c8c:	f002 f9e2 	bl	8003054 <initialise_monitor_handles>
	HAL_Init();
 8000c90:	f000 fdee 	bl	8001870 <HAL_Init>
	MX_GPIO_Init();
 8000c94:	f000 f876 	bl	8000d84 <MX_GPIO_Init>

	while (1)
	{
		if(flag ==0 ){
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <main+0xec>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1fb      	bne.n	8000c98 <main+0x14>
			BSP_ACCELERO_Init();
 8000ca0:	f000 fb96 	bl	80013d0 <BSP_ACCELERO_Init>
			BSP_TSENSOR_Init();
 8000ca4:	f000 fbea 	bl	800147c <BSP_TSENSOR_Init>
			float accel_data[3];
			int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	809a      	strh	r2, [r3, #4]
			BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fbca 	bl	800144c <BSP_ACCELERO_AccGetXYZ>
			float temp_data;// read temp
			temp_data = BSP_TSENSOR_ReadTemp();
 8000cb8:	f000 fbfc 	bl	80014b4 <BSP_TSENSOR_ReadTemp>
 8000cbc:	ee07 0a90 	vmov	s15, r0
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	edc7 7a05 	vstr	s15, [r7, #20]
			printf("Temperature data is %d", temp_data);
 8000cc8:	6978      	ldr	r0, [r7, #20]
 8000cca:	f7ff fc3d 	bl	8000548 <__aeabi_f2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4828      	ldr	r0, [pc, #160]	; (8000d74 <main+0xf0>)
 8000cd4:	f003 f836 	bl	8003d44 <iprintf>

						 // the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
						 		accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8000cd8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ce4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000d78 <main+0xf4>
 8000ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cec:	edc7 7a02 	vstr	s15, [r7, #8]
						 		accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8000cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cfc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000d78 <main+0xf4>
 8000d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d04:	edc7 7a03 	vstr	s15, [r7, #12]
						 		accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8000d08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d14:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000d78 <main+0xf4>
 8000d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
						 		printf("Accel X : %f; Accel Y : %f; Accel Z : %f; Temperature : %f\n", accel_data[0], accel_data[1], accel_data[2], temp_data);
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fc10 	bl	8000548 <__aeabi_f2d>
 8000d28:	4682      	mov	sl, r0
 8000d2a:	468b      	mov	fp, r1
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fc0a 	bl	8000548 <__aeabi_f2d>
 8000d34:	4604      	mov	r4, r0
 8000d36:	460d      	mov	r5, r1
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fc04 	bl	8000548 <__aeabi_f2d>
 8000d40:	4680      	mov	r8, r0
 8000d42:	4689      	mov	r9, r1
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff fbff 	bl	8000548 <__aeabi_f2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d52:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d56:	e9cd 4500 	strd	r4, r5, [sp]
 8000d5a:	4652      	mov	r2, sl
 8000d5c:	465b      	mov	r3, fp
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <main+0xf8>)
 8000d60:	f002 fff0 	bl	8003d44 <iprintf>



						 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <main+0xfc>)
 8000d6a:	f001 f9b9 	bl	80020e0 <HAL_GPIO_TogglePin>
		if(flag ==0 ){
 8000d6e:	e793      	b.n	8000c98 <main+0x14>
 8000d70:	20000000 	.word	0x20000000
 8000d74:	08005cdc 	.word	0x08005cdc
 8000d78:	42c80000 	.word	0x42c80000
 8000d7c:	08005cf4 	.word	0x08005cf4
 8000d80:	48000400 	.word	0x48000400

08000d84 <MX_GPIO_Init>:
	}

}

static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();	// Enable AHB2 Bus for GPIOB
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); // Reset the LED2_Pin as 0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc0:	4820      	ldr	r0, [pc, #128]	; (8000e44 <MX_GPIO_Init+0xc0>)
 8000dc2:	f001 f975 	bl	80020b0 <HAL_GPIO_WritePin>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

	// Configuration of LED2_Pin (GPIO-B Pin-14) as GPIO output
	GPIO_InitStruct.Pin = LED2_Pin;
 8000dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_GPIO_Init+0xc0>)
 8000df0:	f000 fec0 	bl	8001b74 <HAL_GPIO_Init>

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_GPIO_Init+0xc4>)
 8000dfc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <MX_GPIO_Init+0xc8>)
 8000e0a:	f000 feb3 	bl	8001b74 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f000 fe95 	bl	8001b3e <HAL_NVIC_EnableIRQ>




	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MX_GPIO_Init+0xbc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_GPIO_Init+0xc0>)
 8000e34:	f001 f93c 	bl	80020b0 <HAL_GPIO_WritePin>


}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	10210000 	.word	0x10210000
 8000e4c:	48000800 	.word	0x48000800

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6613      	str	r3, [r2, #96]	; 0x60
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_I2C_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_I2C_MspInit+0x84>)
 8000ef0:	f000 fe40 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efe:	6593      	str	r3, [r2, #88]	; 0x58
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_I2C_MspInit+0x80>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005800 	.word	0x40005800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400

08000f20 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_I2C_MspDeInit+0x30>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10a      	bne.n	8000f48 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_I2C_MspDeInit+0x34>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_I2C_MspDeInit+0x34>)
 8000f38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8000f3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_I2C_MspDeInit+0x38>)
 8000f44:	f000 ffc0 	bl	8001ec8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40005800 	.word	0x40005800
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 fcb0 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f001 f8a9 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fc2:	2040      	movs	r0, #64	; 0x40
 8000fc4:	f001 f8a6 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fc8:	2080      	movs	r0, #128	; 0x80
 8000fca:	f001 f8a3 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd2:	f001 f89f 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fe2:	f001 f897 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000fe6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fea:	f001 f893 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff2:	f001 f88f 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ff6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ffa:	f001 f88b 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ffe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001002:	f001 f887 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}

0800100a <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI1_IRQHandler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800100e:	2002      	movs	r0, #2
 8001010:	f001 f880 	bl	8002114 <HAL_GPIO_EXTI_IRQHandler>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x50>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x16>
		heap_end = &end;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <_sbrk+0x50>)
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <_sbrk+0x54>)
 800102c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <_sbrk+0x50>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <_sbrk+0x50>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	466a      	mov	r2, sp
 800103e:	4293      	cmp	r3, r2
 8001040:	d907      	bls.n	8001052 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001042:	f002 f881 	bl	8003148 <__errno>
 8001046:	4603      	mov	r3, r0
 8001048:	220c      	movs	r2, #12
 800104a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001050:	e006      	b.n	8001060 <_sbrk+0x48>
	}

	heap_end += incr;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <_sbrk+0x50>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <_sbrk+0x50>)
 800105c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000024c 	.word	0x2000024c
 800106c:	200003f8 	.word	0x200003f8

08001070 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <SystemInit+0x64>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <SystemInit+0x64>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <SystemInit+0x68>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <SystemInit+0x68>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <SystemInit+0x68>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <SystemInit+0x68>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <SystemInit+0x68>)
 800109c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <SystemInit+0x68>)
 80010a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <SystemInit+0x68>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <SystemInit+0x68>)
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <SystemInit+0x68>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SystemInit+0x64>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	609a      	str	r2, [r3, #8]
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	40021000 	.word	0x40021000

080010dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
	ldr	r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <LoopForever+0x16>)
	cmp	r2, r3
 8001102:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001106:	f7ff ffb3 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 f919 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110e:	f7ff fdb9 	bl	8000c84 <main>

08001112 <LoopForever>:

LoopForever:
    b LoopForever
 8001112:	e7fe      	b.n	8001112 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001118:	08006138 	.word	0x08006138
	ldr	r0, =_sdata
 800111c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001120:	20000230 	.word	0x20000230
	ldr	r2, =_sbss
 8001124:	20000230 	.word	0x20000230
	ldr	r3, = _ebss
 8001128:	200003f8 	.word	0x200003f8

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <I2Cx_MspInit+0xa8>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <I2Cx_MspInit+0xa8>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <I2Cx_MspInit+0xa8>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001150:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001154:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <I2Cx_MspInit+0xac>)
 800116e:	f000 fd01 	bl	8001b74 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <I2Cx_MspInit+0xac>)
 800117a:	f000 fcfb 	bl	8001b74 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <I2Cx_MspInit+0xa8>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <I2Cx_MspInit+0xa8>)
 8001184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <I2Cx_MspInit+0xa8>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <I2Cx_MspInit+0xa8>)
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <I2Cx_MspInit+0xa8>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <I2Cx_MspInit+0xa8>)
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <I2Cx_MspInit+0xa8>)
 80011a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	210f      	movs	r1, #15
 80011b2:	2021      	movs	r0, #33	; 0x21
 80011b4:	f000 fca7 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011b8:	2021      	movs	r0, #33	; 0x21
 80011ba:	f000 fcc0 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	210f      	movs	r1, #15
 80011c2:	2022      	movs	r0, #34	; 0x22
 80011c4:	f000 fc9f 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80011c8:	2022      	movs	r0, #34	; 0x22
 80011ca:	f000 fcb8 	bl	8001b3e <HAL_NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <I2Cx_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <I2Cx_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff89 	bl	8001130 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 ff90 	bl	8002144 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f001 fc94 	bl	8002b54 <HAL_I2CEx_ConfigAnalogFilter>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005800 	.word	0x40005800
 8001238:	00702681 	.word	0x00702681

0800123c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af04      	add	r7, sp, #16
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	72fb      	strb	r3, [r7, #11]
 800124e:	460b      	mov	r3, r1
 8001250:	813b      	strh	r3, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	b299      	uxth	r1, r3
 800125e:	88f8      	ldrh	r0, [r7, #6]
 8001260:	893a      	ldrh	r2, [r7, #8]
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4603      	mov	r3, r0
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f001 f938 	bl	80024e8 <HAL_I2C_Mem_Read>
 8001278:	4603      	mov	r3, r0
 800127a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	4619      	mov	r1, r3
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f832 	bl	80012f0 <I2Cx_Error>
  }
  return status;
 800128c:	7dfb      	ldrb	r3, [r7, #23]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b08a      	sub	sp, #40	; 0x28
 800129a:	af04      	add	r7, sp, #16
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	4608      	mov	r0, r1
 80012a0:	4611      	mov	r1, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	72fb      	strb	r3, [r7, #11]
 80012a8:	460b      	mov	r3, r1
 80012aa:	813b      	strh	r3, [r7, #8]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	b299      	uxth	r1, r3
 80012b8:	88f8      	ldrh	r0, [r7, #6]
 80012ba:	893a      	ldrh	r2, [r7, #8]
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4603      	mov	r3, r0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fff7 	bl	80022c0 <HAL_I2C_Mem_Write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f805 	bl	80012f0 <I2Cx_Error>
  }
  return status;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 ffb0 	bl	8002262 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff6c 	bl	80011e0 <I2Cx_Init>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <SENSOR_IO_Init+0x10>)
 8001316:	f7ff ff63 	bl	80011e0 <I2Cx_Init>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000398 	.word	0x20000398

08001324 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	460b      	mov	r3, r1
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	b29a      	uxth	r2, r3
 800133a:	79f9      	ldrb	r1, [r7, #7]
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	1d7b      	adds	r3, r7, #5
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <SENSOR_IO_Write+0x30>)
 8001348:	f7ff ffa5 	bl	8001296 <I2Cx_WriteMultiple>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000398 	.word	0x20000398

08001358 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	b29a      	uxth	r2, r3
 8001370:	79f9      	ldrb	r1, [r7, #7]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <SENSOR_IO_Read+0x38>)
 8001380:	f7ff ff5c 	bl	800123c <I2Cx_ReadMultiple>

  return read_value;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000398 	.word	0x20000398

08001394 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af02      	add	r7, sp, #8
 800139a:	603a      	str	r2, [r7, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	460b      	mov	r3, r1
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	79f9      	ldrb	r1, [r7, #7]
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <SENSOR_IO_ReadMultiple+0x38>)
 80013bc:	f7ff ff3e 	bl	800123c <I2Cx_ReadMultiple>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29b      	uxth	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000398 	.word	0x20000398

080013d0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80013da:	2300      	movs	r3, #0
 80013dc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <BSP_ACCELERO_Init+0x74>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b6a      	cmp	r3, #106	; 0x6a
 80013e8:	d002      	beq.n	80013f0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e024      	b.n	800143a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <BSP_ACCELERO_Init+0x78>)
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <BSP_ACCELERO_Init+0x74>)
 80013f4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80013f6:	2330      	movs	r3, #48	; 0x30
 80013f8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80013fe:	2300      	movs	r3, #0
 8001400:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800140e:	797a      	ldrb	r2, [r7, #5]
 8001410:	7abb      	ldrb	r3, [r7, #10]
 8001412:	4313      	orrs	r3, r2
 8001414:	b2db      	uxtb	r3, r3
 8001416:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001418:	7a3b      	ldrb	r3, [r7, #8]
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	b2db      	uxtb	r3, r3
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	b21b      	sxth	r3, r3
 800142c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <BSP_ACCELERO_Init+0x78>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	4610      	mov	r0, r2
 8001438:	4798      	blx	r3
  }  

  return ret;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000001c 	.word	0x2000001c
 8001448:	20000250 	.word	0x20000250

0800144c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
    }
  }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000250 	.word	0x20000250

0800147c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <BSP_TSENSOR_Init+0x30>)
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <BSP_TSENSOR_Init+0x34>)
 800148a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800148c:	f7ff ff40 	bl	8001310 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <BSP_TSENSOR_Init+0x30>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2100      	movs	r1, #0
 8001498:	20be      	movs	r0, #190	; 0xbe
 800149a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000254 	.word	0x20000254
 80014b0:	2000000c 	.word	0x2000000c

080014b4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <BSP_TSENSOR_ReadTemp+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	20be      	movs	r0, #190	; 0xbe
 80014c0:	4798      	blx	r3
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000254 	.word	0x20000254

080014d0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2120      	movs	r1, #32
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff38 	bl	8001358 <SENSOR_IO_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001512:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	2120      	movs	r1, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff01 	bl	8001324 <SENSOR_IO_Write>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b088      	sub	sp, #32
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	b2d8      	uxtb	r0, r3
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	2302      	movs	r3, #2
 800153e:	21b2      	movs	r1, #178	; 0xb2
 8001540:	f7ff ff28 	bl	8001394 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2135      	movs	r1, #53	; 0x35
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff04 	bl	8001358 <SENSOR_IO_Read>
 8001550:	4603      	mov	r3, r0
 8001552:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001554:	7ffb      	ldrb	r3, [r7, #31]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21b      	sxth	r3, r3
 800155a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155e:	b21a      	sxth	r2, r3
 8001560:	7a3b      	ldrb	r3, [r7, #8]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	b21b      	sxth	r3, r3
 800156e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001572:	b21a      	sxth	r2, r3
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800157c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001580:	10db      	asrs	r3, r3, #3
 8001582:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001584:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001588:	10db      	asrs	r3, r3, #3
 800158a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	b2d8      	uxtb	r0, r3
 8001590:	f107 0208 	add.w	r2, r7, #8
 8001594:	2304      	movs	r3, #4
 8001596:	21bc      	movs	r1, #188	; 0xbc
 8001598:	f7ff fefc 	bl	8001394 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800159c:	7a7b      	ldrb	r3, [r7, #9]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	7a3b      	ldrb	r3, [r7, #8]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	b2d8      	uxtb	r0, r3
 80015bc:	f107 0208 	add.w	r2, r7, #8
 80015c0:	2302      	movs	r3, #2
 80015c2:	21aa      	movs	r1, #170	; 0xaa
 80015c4:	f7ff fee6 	bl	8001394 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80015c8:	7a7b      	ldrb	r3, [r7, #9]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7a3b      	ldrb	r3, [r7, #8]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80015d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001602:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001614:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ee07 3a90 	vmov	s15, r3
}
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001646:	2110      	movs	r1, #16
 8001648:	20d4      	movs	r0, #212	; 0xd4
 800164a:	f7ff fe85 	bl	8001358 <SENSOR_IO_Read>
 800164e:	4603      	mov	r3, r0
 8001650:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800165e:	7bba      	ldrb	r2, [r7, #14]
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4313      	orrs	r3, r2
 8001664:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	461a      	mov	r2, r3
 800166a:	2110      	movs	r1, #16
 800166c:	20d4      	movs	r0, #212	; 0xd4
 800166e:	f7ff fe59 	bl	8001324 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001672:	2112      	movs	r1, #18
 8001674:	20d4      	movs	r0, #212	; 0xd4
 8001676:	f7ff fe6f 	bl	8001358 <SENSOR_IO_Read>
 800167a:	4603      	mov	r3, r0
 800167c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800168c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800168e:	7bba      	ldrb	r2, [r7, #14]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	4313      	orrs	r3, r2
 8001694:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	461a      	mov	r2, r3
 800169a:	2112      	movs	r1, #18
 800169c:	20d4      	movs	r0, #212	; 0xd4
 800169e:	f7ff fe41 	bl	8001324 <SENSOR_IO_Write>
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80016b4:	2110      	movs	r1, #16
 80016b6:	20d4      	movs	r0, #212	; 0xd4
 80016b8:	f7ff fe4e 	bl	8001358 <SENSOR_IO_Read>
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	461a      	mov	r2, r3
 80016cc:	2110      	movs	r1, #16
 80016ce:	20d4      	movs	r0, #212	; 0xd4
 80016d0:	f7ff fe28 	bl	8001324 <SENSOR_IO_Write>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80016e0:	f7ff fe16 	bl	8001310 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80016e4:	210f      	movs	r1, #15
 80016e6:	20d4      	movs	r0, #212	; 0xd4
 80016e8:	f7ff fe36 	bl	8001358 <SENSOR_IO_Read>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001700:	2115      	movs	r1, #21
 8001702:	20d4      	movs	r0, #212	; 0xd4
 8001704:	f7ff fe28 	bl	8001358 <SENSOR_IO_Read>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	f023 0310 	bic.w	r3, r3, #16
 8001712:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	461a      	mov	r2, r3
 8001726:	2115      	movs	r1, #21
 8001728:	20d4      	movs	r0, #212	; 0xd4
 800172a:	f7ff fdfb 	bl	8001324 <SENSOR_IO_Write>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800174e:	2110      	movs	r1, #16
 8001750:	20d4      	movs	r0, #212	; 0xd4
 8001752:	f7ff fe01 	bl	8001358 <SENSOR_IO_Read>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800175a:	f107 0208 	add.w	r2, r7, #8
 800175e:	2306      	movs	r3, #6
 8001760:	2128      	movs	r1, #40	; 0x28
 8001762:	20d4      	movs	r0, #212	; 0xd4
 8001764:	f7ff fe16 	bl	8001394 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
 800176c:	e01f      	b.n	80017ae <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	3301      	adds	r3, #1
 8001774:	f107 0220 	add.w	r2, r7, #32
 8001778:	4413      	add	r3, r2
 800177a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800177e:	b29b      	uxth	r3, r3
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b29a      	uxth	r2, r3
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	f107 0120 	add.w	r1, r7, #32
 800178c:	440b      	add	r3, r1
 800178e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b29a      	uxth	r2, r3
 8001798:	7ffb      	ldrb	r3, [r7, #31]
 800179a:	b212      	sxth	r2, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	f107 0120 	add.w	r1, r7, #32
 80017a2:	440b      	add	r3, r1
 80017a4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80017a8:	7ffb      	ldrb	r3, [r7, #31]
 80017aa:	3301      	adds	r3, #1
 80017ac:	77fb      	strb	r3, [r7, #31]
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d9dc      	bls.n	800176e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d828      	bhi.n	8001810 <LSM6DSL_AccReadXYZ+0xd8>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <LSM6DSL_AccReadXYZ+0x8c>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017f9 	.word	0x080017f9
 80017c8:	08001811 	.word	0x08001811
 80017cc:	08001811 	.word	0x08001811
 80017d0:	08001811 	.word	0x08001811
 80017d4:	0800180b 	.word	0x0800180b
 80017d8:	08001811 	.word	0x08001811
 80017dc:	08001811 	.word	0x08001811
 80017e0:	08001811 	.word	0x08001811
 80017e4:	080017ff 	.word	0x080017ff
 80017e8:	08001811 	.word	0x08001811
 80017ec:	08001811 	.word	0x08001811
 80017f0:	08001811 	.word	0x08001811
 80017f4:	08001805 	.word	0x08001805
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <LSM6DSL_AccReadXYZ+0x128>)
 80017fa:	61bb      	str	r3, [r7, #24]
    break;
 80017fc:	e008      	b.n	8001810 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <LSM6DSL_AccReadXYZ+0x12c>)
 8001800:	61bb      	str	r3, [r7, #24]
    break;
 8001802:	e005      	b.n	8001810 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <LSM6DSL_AccReadXYZ+0x130>)
 8001806:	61bb      	str	r3, [r7, #24]
    break;
 8001808:	e002      	b.n	8001810 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <LSM6DSL_AccReadXYZ+0x134>)
 800180c:	61bb      	str	r3, [r7, #24]
    break;    
 800180e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	77fb      	strb	r3, [r7, #31]
 8001814:	e01b      	b.n	800184e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	f107 0220 	add.w	r2, r7, #32
 800181e:	4413      	add	r3, r2
 8001820:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001840:	ee17 2a90 	vmov	r2, s15
 8001844:	b212      	sxth	r2, r2
 8001846:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001848:	7ffb      	ldrb	r3, [r7, #31]
 800184a:	3301      	adds	r3, #1
 800184c:	77fb      	strb	r3, [r7, #31]
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d9e0      	bls.n	8001816 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	3d79db23 	.word	0x3d79db23
 8001864:	3df9db23 	.word	0x3df9db23
 8001868:	3e79db23 	.word	0x3e79db23
 800186c:	3ef9db23 	.word	0x3ef9db23

08001870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187a:	2003      	movs	r0, #3
 800187c:	f000 f938 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001880:	2000      	movs	r0, #0
 8001882:	f000 f80d 	bl	80018a0 <HAL_InitTick>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	e001      	b.n	8001896 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001892:	f7ff fadd 	bl	8000e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001896:	79fb      	ldrb	r3, [r7, #7]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_InitTick+0x68>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d022      	beq.n	80018fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_InitTick+0x6c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_InitTick+0x68>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f946 	bl	8001b5a <HAL_SYSTICK_Config>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10f      	bne.n	80018f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d809      	bhi.n	80018ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018da:	2200      	movs	r2, #0
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e2:	f000 f910 	bl	8001b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_InitTick+0x70>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e007      	b.n	80018fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e004      	b.n	80018fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000054 	.word	0x20000054
 800190c:	20000008 	.word	0x20000008
 8001910:	20000050 	.word	0x20000050

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x1c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_IncTick+0x20>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x1c>)
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	200003e4 	.word	0x200003e4
 8001934:	20000054 	.word	0x20000054

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200003e4 	.word	0x200003e4

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e17f      	b.n	8001e84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8171 	beq.w	8001e7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00b      	beq.n	8001bbc <HAL_GPIO_Init+0x48>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d118      	bne.n	8001c5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x128>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ac 	beq.w	8001e7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x242>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4d      	ldr	r2, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00c      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001d9e:	2307      	movs	r3, #7
 8001da0:	e00a      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001db6:	2300      	movs	r3, #0
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc8:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dfa:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f47f ae78 	bne.w	8001b84 <HAL_GPIO_Init+0x10>
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	48000800 	.word	0x48000800
 8001eb4:	48000c00 	.word	0x48000c00
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	48001400 	.word	0x48001400
 8001ec0:	48001800 	.word	0x48001800
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ed6:	e0cd      	b.n	8002074 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80c0 	beq.w	800206e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001eee:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_GPIO_DeInit+0x1c8>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f16:	d025      	beq.n	8001f64 <HAL_GPIO_DeInit+0x9c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a5e      	ldr	r2, [pc, #376]	; (8002094 <HAL_GPIO_DeInit+0x1cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d01f      	beq.n	8001f60 <HAL_GPIO_DeInit+0x98>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <HAL_GPIO_DeInit+0x1d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d019      	beq.n	8001f5c <HAL_GPIO_DeInit+0x94>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	; (800209c <HAL_GPIO_DeInit+0x1d4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_GPIO_DeInit+0x90>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a5b      	ldr	r2, [pc, #364]	; (80020a0 <HAL_GPIO_DeInit+0x1d8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_DeInit+0x8c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a5a      	ldr	r2, [pc, #360]	; (80020a4 <HAL_GPIO_DeInit+0x1dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_DeInit+0x88>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_GPIO_DeInit+0x1e0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_DeInit+0x84>
 8001f48:	2306      	movs	r3, #6
 8001f4a:	e00c      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	e00a      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f50:	2305      	movs	r3, #5
 8001f52:	e008      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_DeInit+0x9e>
 8001f64:	2300      	movs	r3, #0
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d132      	bne.n	8001fdc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f76:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	494b      	ldr	r1, [pc, #300]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f84:	4b49      	ldr	r3, [pc, #292]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4947      	ldr	r1, [pc, #284]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001f92:	4b46      	ldr	r3, [pc, #280]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4944      	ldr	r1, [pc, #272]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4940      	ldr	r1, [pc, #256]	; (80020ac <HAL_GPIO_DeInit+0x1e4>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001fbe:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_GPIO_DeInit+0x1c8>)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	4830      	ldr	r0, [pc, #192]	; (8002090 <HAL_GPIO_DeInit+0x1c8>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	08d2      	lsrs	r2, r2, #3
 8002010:	4019      	ands	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2103      	movs	r1, #3
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2103      	movs	r1, #3
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205e:	2101      	movs	r1, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f af2b 	bne.w	8001ed8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40010000 	.word	0x40010000
 8002094:	48000400 	.word	0x48000400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	48001000 	.word	0x48001000
 80020a4:	48001400 	.word	0x48001400
 80020a8:	48001800 	.word	0x48001800
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fd38 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e081      	b.n	800225a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fe94 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002194:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e006      	b.n	80021cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d104      	bne.n	80021de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002200:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	ea42 0103 	orr.w	r1, r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	021a      	lsls	r2, r3, #8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e021      	b.n	80022b8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe fe47 	bl	8000f20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	817b      	strh	r3, [r7, #10]
 80022d2:	460b      	mov	r3, r1
 80022d4:	813b      	strh	r3, [r7, #8]
 80022d6:	4613      	mov	r3, r2
 80022d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	f040 80f9 	bne.w	80024da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x34>
 80022ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0ed      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_I2C_Mem_Write+0x4e>
 800230a:	2302      	movs	r3, #2
 800230c:	e0e6      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002316:	f7ff fb0f 	bl	8001938 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2319      	movs	r3, #25
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fac3 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d1      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2221      	movs	r2, #33	; 0x21
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a3a      	ldr	r2, [r7, #32]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002360:	88f8      	ldrh	r0, [r7, #6]
 8002362:	893a      	ldrh	r2, [r7, #8]
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4603      	mov	r3, r0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f9d3 	bl	800271c <I2C_RequestMemoryWrite>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0a9      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d90e      	bls.n	80023b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fba5 	bl	8002af8 <I2C_TransferConfig>
 80023ae:	e00f      	b.n	80023d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb94 	bl	8002af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 faad 	bl	8002934 <I2C_WaitOnTXISFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e07b      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d034      	beq.n	8002488 <HAL_I2C_Mem_Write+0x1c8>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d130      	bne.n	8002488 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fa3f 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e04d      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d90e      	bls.n	8002468 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fb49 	bl	8002af8 <I2C_TransferConfig>
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fb38 	bl	8002af8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d19e      	bne.n	80023d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa8c 	bl	80029b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01a      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_I2C_Mem_Write+0x224>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	fe00e800 	.word	0xfe00e800

080024e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	f040 80fd 	bne.w	800270a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_I2C_Mem_Read+0x34>
 8002516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0f1      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Mem_Read+0x4e>
 8002532:	2302      	movs	r3, #2
 8002534:	e0ea      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800253e:	f7ff f9fb 	bl	8001938 <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2319      	movs	r3, #25
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f9af 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d5      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2222      	movs	r2, #34	; 0x22
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002588:	88f8      	ldrh	r0, [r7, #6]
 800258a:	893a      	ldrh	r2, [r7, #8]
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4603      	mov	r3, r0
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f913 	bl	80027c4 <I2C_RequestMemoryRead>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0ad      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	d90e      	bls.n	80025d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	22ff      	movs	r2, #255	; 0xff
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	8979      	ldrh	r1, [r7, #10]
 80025c8:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_I2C_Mem_Read+0x22c>)
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fa91 	bl	8002af8 <I2C_TransferConfig>
 80025d6:	e00f      	b.n	80025f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	8979      	ldrh	r1, [r7, #10]
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_I2C_Mem_Read+0x22c>)
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa80 	bl	8002af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	2104      	movs	r1, #4
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f956 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07c      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d034      	beq.n	80026b8 <HAL_I2C_Mem_Read+0x1d0>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d130      	bne.n	80026b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f927 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e04d      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d90e      	bls.n	8002698 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	b2da      	uxtb	r2, r3
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa31 	bl	8002af8 <I2C_TransferConfig>
 8002696:	e00f      	b.n	80026b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa20 	bl	8002af8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d19a      	bne.n	80025f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f974 	bl	80029b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e01a      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2220      	movs	r2, #32
 80026dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_I2C_Mem_Read+0x230>)
 80026ea:	400b      	ands	r3, r1
 80026ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	80002400 	.word	0x80002400
 8002718:	fe00e800 	.word	0xfe00e800

0800271c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	8979      	ldrh	r1, [r7, #10]
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <I2C_RequestMemoryWrite+0xa4>)
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f9d7 	bl	8002af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	69b9      	ldr	r1, [r7, #24]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8f0 	bl	8002934 <I2C_WaitOnTXISFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e02c      	b.n	80027b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
 800276e:	e015      	b.n	800279c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002770:	893b      	ldrh	r3, [r7, #8]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29b      	uxth	r3, r3
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	69b9      	ldr	r1, [r7, #24]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8d6 	bl	8002934 <I2C_WaitOnTXISFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e012      	b.n	80027b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002792:	893b      	ldrh	r3, [r7, #8]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f884 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	80002000 	.word	0x80002000

080027c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <I2C_RequestMemoryRead+0xa4>)
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2300      	movs	r3, #0
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f984 	bl	8002af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f89d 	bl	8002934 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e02c      	b.n	800285e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800280a:	893b      	ldrh	r3, [r7, #8]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
 8002814:	e015      	b.n	8002842 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002816:	893b      	ldrh	r3, [r7, #8]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	b29b      	uxth	r3, r3
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f883 	bl	8002934 <I2C_WaitOnTXISFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e012      	b.n	800285e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002838:	893b      	ldrh	r3, [r7, #8]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2200      	movs	r2, #0
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f831 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	80002000 	.word	0x80002000

0800286c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d103      	bne.n	800288a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d007      	beq.n	80028a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	619a      	str	r2, [r3, #24]
  }
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	e022      	b.n	800290c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028cc:	d01e      	beq.n	800290c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7ff f833 	bl	8001938 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d113      	bne.n	800290c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00f      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4013      	ands	r3, r2
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	429a      	cmp	r2, r3
 8002928:	d0cd      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002940:	e02c      	b.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f870 	bl	8002a2c <I2C_IsAcknowledgeFailed>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e02a      	b.n	80029ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d01e      	beq.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe ffeb 	bl	8001938 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d113      	bne.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d1cb      	bne.n	8002942 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c0:	e028      	b.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f830 	bl	8002a2c <I2C_IsAcknowledgeFailed>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e026      	b.n	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe ffaf 	bl	8001938 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d113      	bne.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e007      	b.n	8002a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d1cf      	bne.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d151      	bne.n	8002aea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a46:	e022      	b.n	8002a8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4e:	d01e      	beq.n	8002a8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7fe ff72 	bl	8001938 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <I2C_IsAcknowledgeFailed+0x3a>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d113      	bne.n	8002a8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02e      	b.n	8002aec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d1d5      	bne.n	8002a48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fedd 	bl	800286c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f043 0204 	orr.w	r2, r3, #4
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	fe00e800 	.word	0xfe00e800

08002af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	4613      	mov	r3, r2
 8002b08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	0d5b      	lsrs	r3, r3, #21
 8002b14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <I2C_TransferConfig+0x58>)
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	ea02 0103 	and.w	r1, r2, r3
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b28:	7a7b      	ldrb	r3, [r7, #9]
 8002b2a:	041b      	lsls	r3, r3, #16
 8002b2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	03ff63ff 	.word	0x03ff63ff

08002b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d138      	bne.n	8002bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e032      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <findslot>:
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <findslot+0x2c>)
 8002bee:	b510      	push	{r4, lr}
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	b118      	cbz	r0, 8002bfe <findslot+0x12>
 8002bf6:	6983      	ldr	r3, [r0, #24]
 8002bf8:	b90b      	cbnz	r3, 8002bfe <findslot+0x12>
 8002bfa:	f000 fb03 	bl	8003204 <__sinit>
 8002bfe:	2c13      	cmp	r4, #19
 8002c00:	d807      	bhi.n	8002c12 <findslot+0x26>
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <findslot+0x30>)
 8002c04:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002c08:	3201      	adds	r2, #1
 8002c0a:	d002      	beq.n	8002c12 <findslot+0x26>
 8002c0c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7fc      	b.n	8002c10 <findslot+0x24>
 8002c16:	bf00      	nop
 8002c18:	20000060 	.word	0x20000060
 8002c1c:	20000264 	.word	0x20000264

08002c20 <checkerror>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	4604      	mov	r4, r0
 8002c26:	d109      	bne.n	8002c3c <checkerror+0x1c>
 8002c28:	f000 fa8e 	bl	8003148 <__errno>
 8002c2c:	2613      	movs	r6, #19
 8002c2e:	4605      	mov	r5, r0
 8002c30:	2700      	movs	r7, #0
 8002c32:	4630      	mov	r0, r6
 8002c34:	4639      	mov	r1, r7
 8002c36:	beab      	bkpt	0x00ab
 8002c38:	4606      	mov	r6, r0
 8002c3a:	602e      	str	r6, [r5, #0]
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c40 <error>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	f000 fa80 	bl	8003148 <__errno>
 8002c48:	2613      	movs	r6, #19
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	2700      	movs	r7, #0
 8002c4e:	4630      	mov	r0, r6
 8002c50:	4639      	mov	r1, r7
 8002c52:	beab      	bkpt	0x00ab
 8002c54:	4606      	mov	r6, r0
 8002c56:	602e      	str	r6, [r5, #0]
 8002c58:	4620      	mov	r0, r4
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c5c <_swiread>:
 8002c5c:	b530      	push	{r4, r5, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c64:	9203      	str	r2, [sp, #12]
 8002c66:	2406      	movs	r4, #6
 8002c68:	ad01      	add	r5, sp, #4
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	beab      	bkpt	0x00ab
 8002c70:	4604      	mov	r4, r0
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff ffd4 	bl	8002c20 <checkerror>
 8002c78:	b005      	add	sp, #20
 8002c7a:	bd30      	pop	{r4, r5, pc}

08002c7c <_read>:
 8002c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c7e:	4615      	mov	r5, r2
 8002c80:	9101      	str	r1, [sp, #4]
 8002c82:	f7ff ffb3 	bl	8002bec <findslot>
 8002c86:	9901      	ldr	r1, [sp, #4]
 8002c88:	4604      	mov	r4, r0
 8002c8a:	b938      	cbnz	r0, 8002c9c <_read+0x20>
 8002c8c:	f000 fa5c 	bl	8003148 <__errno>
 8002c90:	2309      	movs	r3, #9
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c98:	b003      	add	sp, #12
 8002c9a:	bd30      	pop	{r4, r5, pc}
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	462a      	mov	r2, r5
 8002ca0:	f7ff ffdc 	bl	8002c5c <_swiread>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d0f7      	beq.n	8002c98 <_read+0x1c>
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	1a2a      	subs	r2, r5, r0
 8002cac:	4413      	add	r3, r2
 8002cae:	6063      	str	r3, [r4, #4]
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	e7f1      	b.n	8002c98 <_read+0x1c>

08002cb4 <_swilseek>:
 8002cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	4616      	mov	r6, r2
 8002cba:	f7ff ff97 	bl	8002bec <findslot>
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	b940      	cbnz	r0, 8002cd4 <_swilseek+0x20>
 8002cc2:	f000 fa41 	bl	8003148 <__errno>
 8002cc6:	2309      	movs	r3, #9
 8002cc8:	6003      	str	r3, [r0, #0]
 8002cca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002cce:	4620      	mov	r0, r4
 8002cd0:	b003      	add	sp, #12
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd4:	2e02      	cmp	r6, #2
 8002cd6:	d903      	bls.n	8002ce0 <_swilseek+0x2c>
 8002cd8:	f000 fa36 	bl	8003148 <__errno>
 8002cdc:	2316      	movs	r3, #22
 8002cde:	e7f3      	b.n	8002cc8 <_swilseek+0x14>
 8002ce0:	2e01      	cmp	r6, #1
 8002ce2:	d112      	bne.n	8002d0a <_swilseek+0x56>
 8002ce4:	6843      	ldr	r3, [r0, #4]
 8002ce6:	18e4      	adds	r4, r4, r3
 8002ce8:	d4f6      	bmi.n	8002cd8 <_swilseek+0x24>
 8002cea:	682b      	ldr	r3, [r5, #0]
 8002cec:	260a      	movs	r6, #10
 8002cee:	e9cd 3400 	strd	r3, r4, [sp]
 8002cf2:	466f      	mov	r7, sp
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	4639      	mov	r1, r7
 8002cf8:	beab      	bkpt	0x00ab
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f7ff ff8f 	bl	8002c20 <checkerror>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	dbe1      	blt.n	8002cca <_swilseek+0x16>
 8002d06:	606c      	str	r4, [r5, #4]
 8002d08:	e7e1      	b.n	8002cce <_swilseek+0x1a>
 8002d0a:	2e02      	cmp	r6, #2
 8002d0c:	d1ed      	bne.n	8002cea <_swilseek+0x36>
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	260c      	movs	r6, #12
 8002d14:	466f      	mov	r7, sp
 8002d16:	4630      	mov	r0, r6
 8002d18:	4639      	mov	r1, r7
 8002d1a:	beab      	bkpt	0x00ab
 8002d1c:	4606      	mov	r6, r0
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f7ff ff7e 	bl	8002c20 <checkerror>
 8002d24:	1c43      	adds	r3, r0, #1
 8002d26:	d0d0      	beq.n	8002cca <_swilseek+0x16>
 8002d28:	4404      	add	r4, r0
 8002d2a:	e7de      	b.n	8002cea <_swilseek+0x36>

08002d2c <_lseek>:
 8002d2c:	f7ff bfc2 	b.w	8002cb4 <_swilseek>

08002d30 <_swiwrite>:
 8002d30:	b530      	push	{r4, r5, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002d38:	9203      	str	r2, [sp, #12]
 8002d3a:	2405      	movs	r4, #5
 8002d3c:	ad01      	add	r5, sp, #4
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	beab      	bkpt	0x00ab
 8002d44:	4604      	mov	r4, r0
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff ff6a 	bl	8002c20 <checkerror>
 8002d4c:	b005      	add	sp, #20
 8002d4e:	bd30      	pop	{r4, r5, pc}

08002d50 <_write>:
 8002d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d52:	4615      	mov	r5, r2
 8002d54:	9101      	str	r1, [sp, #4]
 8002d56:	f7ff ff49 	bl	8002bec <findslot>
 8002d5a:	9901      	ldr	r1, [sp, #4]
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	b930      	cbnz	r0, 8002d6e <_write+0x1e>
 8002d60:	f000 f9f2 	bl	8003148 <__errno>
 8002d64:	2309      	movs	r3, #9
 8002d66:	6003      	str	r3, [r0, #0]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d6c:	e012      	b.n	8002d94 <_write+0x44>
 8002d6e:	6800      	ldr	r0, [r0, #0]
 8002d70:	462a      	mov	r2, r5
 8002d72:	f7ff ffdd 	bl	8002d30 <_swiwrite>
 8002d76:	2800      	cmp	r0, #0
 8002d78:	dbf6      	blt.n	8002d68 <_write+0x18>
 8002d7a:	6862      	ldr	r2, [r4, #4]
 8002d7c:	1a2b      	subs	r3, r5, r0
 8002d7e:	441a      	add	r2, r3
 8002d80:	42a8      	cmp	r0, r5
 8002d82:	6062      	str	r2, [r4, #4]
 8002d84:	d105      	bne.n	8002d92 <_write+0x42>
 8002d86:	2000      	movs	r0, #0
 8002d88:	b003      	add	sp, #12
 8002d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d8e:	f7ff bf57 	b.w	8002c40 <error>
 8002d92:	4618      	mov	r0, r3
 8002d94:	b003      	add	sp, #12
 8002d96:	bd30      	pop	{r4, r5, pc}

08002d98 <_swiclose>:
 8002d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d9a:	2402      	movs	r4, #2
 8002d9c:	9001      	str	r0, [sp, #4]
 8002d9e:	ad01      	add	r5, sp, #4
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	beab      	bkpt	0x00ab
 8002da6:	4604      	mov	r4, r0
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7ff ff39 	bl	8002c20 <checkerror>
 8002dae:	b003      	add	sp, #12
 8002db0:	bd30      	pop	{r4, r5, pc}
	...

08002db4 <_close>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4605      	mov	r5, r0
 8002db8:	f7ff ff18 	bl	8002bec <findslot>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	b930      	cbnz	r0, 8002dce <_close+0x1a>
 8002dc0:	f000 f9c2 	bl	8003148 <__errno>
 8002dc4:	2309      	movs	r3, #9
 8002dc6:	6003      	str	r3, [r0, #0]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
 8002dce:	3d01      	subs	r5, #1
 8002dd0:	2d01      	cmp	r5, #1
 8002dd2:	d809      	bhi.n	8002de8 <_close+0x34>
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <_close+0x48>)
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d104      	bne.n	8002de8 <_close+0x34>
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de2:	6003      	str	r3, [r0, #0]
 8002de4:	2000      	movs	r0, #0
 8002de6:	e7f1      	b.n	8002dcc <_close+0x18>
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	f7ff ffd5 	bl	8002d98 <_swiclose>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d1ec      	bne.n	8002dcc <_close+0x18>
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	e7e8      	b.n	8002dcc <_close+0x18>
 8002dfa:	bf00      	nop
 8002dfc:	20000264 	.word	0x20000264

08002e00 <_getpid>:
 8002e00:	2001      	movs	r0, #1
 8002e02:	4770      	bx	lr

08002e04 <_swistat>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	460c      	mov	r4, r1
 8002e08:	f7ff fef0 	bl	8002bec <findslot>
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	b930      	cbnz	r0, 8002e1e <_swistat+0x1a>
 8002e10:	f000 f99a 	bl	8003148 <__errno>
 8002e14:	2309      	movs	r3, #9
 8002e16:	6003      	str	r3, [r0, #0]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
 8002e1e:	6863      	ldr	r3, [r4, #4]
 8002e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e24:	6063      	str	r3, [r4, #4]
 8002e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e2c:	260c      	movs	r6, #12
 8002e2e:	4630      	mov	r0, r6
 8002e30:	4629      	mov	r1, r5
 8002e32:	beab      	bkpt	0x00ab
 8002e34:	4605      	mov	r5, r0
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7ff fef2 	bl	8002c20 <checkerror>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	bf1c      	itt	ne
 8002e40:	6120      	strne	r0, [r4, #16]
 8002e42:	2000      	movne	r0, #0
 8002e44:	e7ea      	b.n	8002e1c <_swistat+0x18>

08002e46 <_fstat>:
 8002e46:	460b      	mov	r3, r1
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	2258      	movs	r2, #88	; 0x58
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 faaa 	bl	80033aa <memset>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4620      	mov	r0, r4
 8002e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e5e:	f7ff bfd1 	b.w	8002e04 <_swistat>

08002e62 <_stat>:
 8002e62:	b538      	push	{r3, r4, r5, lr}
 8002e64:	460d      	mov	r5, r1
 8002e66:	4604      	mov	r4, r0
 8002e68:	2258      	movs	r2, #88	; 0x58
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 fa9c 	bl	80033aa <memset>
 8002e72:	4620      	mov	r0, r4
 8002e74:	2100      	movs	r1, #0
 8002e76:	f000 f811 	bl	8002e9c <_swiopen>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	d00b      	beq.n	8002e98 <_stat+0x36>
 8002e80:	686b      	ldr	r3, [r5, #4]
 8002e82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e86:	606b      	str	r3, [r5, #4]
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7ff ffbb 	bl	8002e04 <_swistat>
 8002e8e:	4605      	mov	r5, r0
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff ff8f 	bl	8002db4 <_close>
 8002e96:	462c      	mov	r4, r5
 8002e98:	4620      	mov	r0, r4
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}

08002e9c <_swiopen>:
 8002e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <_swiopen+0xb0>)
 8002ea2:	b097      	sub	sp, #92	; 0x5c
 8002ea4:	4681      	mov	r9, r0
 8002ea6:	460f      	mov	r7, r1
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	461e      	mov	r6, r3
 8002eac:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002eb0:	1c61      	adds	r1, r4, #1
 8002eb2:	d037      	beq.n	8002f24 <_swiopen+0x88>
 8002eb4:	3501      	adds	r5, #1
 8002eb6:	2d14      	cmp	r5, #20
 8002eb8:	d1f8      	bne.n	8002eac <_swiopen+0x10>
 8002eba:	f000 f945 	bl	8003148 <__errno>
 8002ebe:	2318      	movs	r3, #24
 8002ec0:	6003      	str	r3, [r0, #0]
 8002ec2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ec6:	e03d      	b.n	8002f44 <_swiopen+0xa8>
 8002ec8:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8002ecc:	f240 6301 	movw	r3, #1537	; 0x601
 8002ed0:	07ba      	lsls	r2, r7, #30
 8002ed2:	bf48      	it	mi
 8002ed4:	f044 0402 	orrmi.w	r4, r4, #2
 8002ed8:	421f      	tst	r7, r3
 8002eda:	bf18      	it	ne
 8002edc:	f044 0404 	orrne.w	r4, r4, #4
 8002ee0:	073b      	lsls	r3, r7, #28
 8002ee2:	bf48      	it	mi
 8002ee4:	f024 0404 	bicmi.w	r4, r4, #4
 8002ee8:	4648      	mov	r0, r9
 8002eea:	bf48      	it	mi
 8002eec:	f044 0408 	orrmi.w	r4, r4, #8
 8002ef0:	f8cd 9000 	str.w	r9, [sp]
 8002ef4:	f7fd f96c 	bl	80001d0 <strlen>
 8002ef8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002efc:	2401      	movs	r4, #1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4641      	mov	r1, r8
 8002f02:	beab      	bkpt	0x00ab
 8002f04:	4604      	mov	r4, r0
 8002f06:	2c00      	cmp	r4, #0
 8002f08:	db07      	blt.n	8002f1a <_swiopen+0x7e>
 8002f0a:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8002f0e:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6073      	str	r3, [r6, #4]
 8002f16:	462c      	mov	r4, r5
 8002f18:	e014      	b.n	8002f44 <_swiopen+0xa8>
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7ff fe90 	bl	8002c40 <error>
 8002f20:	4604      	mov	r4, r0
 8002f22:	e00f      	b.n	8002f44 <_swiopen+0xa8>
 8002f24:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8002f28:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f2c:	46e8      	mov	r8, sp
 8002f2e:	d1cb      	bne.n	8002ec8 <_swiopen+0x2c>
 8002f30:	4641      	mov	r1, r8
 8002f32:	4648      	mov	r0, r9
 8002f34:	f7ff ff95 	bl	8002e62 <_stat>
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d0c5      	beq.n	8002ec8 <_swiopen+0x2c>
 8002f3c:	f000 f904 	bl	8003148 <__errno>
 8002f40:	2311      	movs	r3, #17
 8002f42:	6003      	str	r3, [r0, #0]
 8002f44:	4620      	mov	r0, r4
 8002f46:	b017      	add	sp, #92	; 0x5c
 8002f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f4c:	20000264 	.word	0x20000264

08002f50 <_get_semihosting_exts>:
 8002f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f54:	4606      	mov	r6, r0
 8002f56:	460f      	mov	r7, r1
 8002f58:	482a      	ldr	r0, [pc, #168]	; (8003004 <_get_semihosting_exts+0xb4>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4615      	mov	r5, r2
 8002f5e:	f7ff ff9d 	bl	8002e9c <_swiopen>
 8002f62:	462a      	mov	r2, r5
 8002f64:	4604      	mov	r4, r0
 8002f66:	2100      	movs	r1, #0
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f000 fa1e 	bl	80033aa <memset>
 8002f6e:	1c63      	adds	r3, r4, #1
 8002f70:	d016      	beq.n	8002fa0 <_get_semihosting_exts+0x50>
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff fe3a 	bl	8002bec <findslot>
 8002f78:	f04f 090c 	mov.w	r9, #12
 8002f7c:	4680      	mov	r8, r0
 8002f7e:	4648      	mov	r0, r9
 8002f80:	4641      	mov	r1, r8
 8002f82:	beab      	bkpt	0x00ab
 8002f84:	4680      	mov	r8, r0
 8002f86:	4640      	mov	r0, r8
 8002f88:	f7ff fe4a 	bl	8002c20 <checkerror>
 8002f8c:	2803      	cmp	r0, #3
 8002f8e:	dd02      	ble.n	8002f96 <_get_semihosting_exts+0x46>
 8002f90:	1ec3      	subs	r3, r0, #3
 8002f92:	42ab      	cmp	r3, r5
 8002f94:	dc08      	bgt.n	8002fa8 <_get_semihosting_exts+0x58>
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ff0c 	bl	8002db4 <_close>
 8002f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	b003      	add	sp, #12
 8002fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fa8:	2204      	movs	r2, #4
 8002faa:	eb0d 0102 	add.w	r1, sp, r2
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fe64 	bl	8002c7c <_read>
 8002fb4:	2803      	cmp	r0, #3
 8002fb6:	ddee      	ble.n	8002f96 <_get_semihosting_exts+0x46>
 8002fb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fbc:	2b53      	cmp	r3, #83	; 0x53
 8002fbe:	d1ea      	bne.n	8002f96 <_get_semihosting_exts+0x46>
 8002fc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002fc4:	2b48      	cmp	r3, #72	; 0x48
 8002fc6:	d1e6      	bne.n	8002f96 <_get_semihosting_exts+0x46>
 8002fc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002fcc:	2b46      	cmp	r3, #70	; 0x46
 8002fce:	d1e2      	bne.n	8002f96 <_get_semihosting_exts+0x46>
 8002fd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002fd4:	2b42      	cmp	r3, #66	; 0x42
 8002fd6:	d1de      	bne.n	8002f96 <_get_semihosting_exts+0x46>
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4639      	mov	r1, r7
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff fe69 	bl	8002cb4 <_swilseek>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	dbd7      	blt.n	8002f96 <_get_semihosting_exts+0x46>
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	4631      	mov	r1, r6
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7ff fe46 	bl	8002c7c <_read>
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fede 	bl	8002db4 <_close>
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f7ff fe11 	bl	8002c20 <checkerror>
 8002ffe:	4604      	mov	r4, r0
 8003000:	e7ce      	b.n	8002fa0 <_get_semihosting_exts+0x50>
 8003002:	bf00      	nop
 8003004:	08005d30 	.word	0x08005d30

08003008 <initialise_semihosting_exts>:
 8003008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800300a:	4d0a      	ldr	r5, [pc, #40]	; (8003034 <initialise_semihosting_exts+0x2c>)
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <initialise_semihosting_exts+0x30>)
 800300e:	2100      	movs	r1, #0
 8003010:	2201      	movs	r2, #1
 8003012:	a801      	add	r0, sp, #4
 8003014:	6029      	str	r1, [r5, #0]
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	f7ff ff9a 	bl	8002f50 <_get_semihosting_exts>
 800301c:	2800      	cmp	r0, #0
 800301e:	dd07      	ble.n	8003030 <initialise_semihosting_exts+0x28>
 8003020:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003024:	f003 0201 	and.w	r2, r3, #1
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	b003      	add	sp, #12
 8003032:	bd30      	pop	{r4, r5, pc}
 8003034:	20000058 	.word	0x20000058
 8003038:	2000005c 	.word	0x2000005c

0800303c <_has_ext_stdout_stderr>:
 800303c:	b510      	push	{r4, lr}
 800303e:	4c04      	ldr	r4, [pc, #16]	; (8003050 <_has_ext_stdout_stderr+0x14>)
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	2a00      	cmp	r2, #0
 8003044:	da01      	bge.n	800304a <_has_ext_stdout_stderr+0xe>
 8003046:	f7ff ffdf 	bl	8003008 <initialise_semihosting_exts>
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	bd10      	pop	{r4, pc}
 800304e:	bf00      	nop
 8003050:	2000005c 	.word	0x2000005c

08003054 <initialise_monitor_handles>:
 8003054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003058:	b085      	sub	sp, #20
 800305a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800310c <initialise_monitor_handles+0xb8>
 800305e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003062:	2303      	movs	r3, #3
 8003064:	2400      	movs	r4, #0
 8003066:	9303      	str	r3, [sp, #12]
 8003068:	f10d 0804 	add.w	r8, sp, #4
 800306c:	9402      	str	r4, [sp, #8]
 800306e:	2501      	movs	r5, #1
 8003070:	4628      	mov	r0, r5
 8003072:	4641      	mov	r1, r8
 8003074:	beab      	bkpt	0x00ab
 8003076:	4605      	mov	r5, r0
 8003078:	4e20      	ldr	r6, [pc, #128]	; (80030fc <initialise_monitor_handles+0xa8>)
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <initialise_monitor_handles+0xac>)
 800307c:	6035      	str	r5, [r6, #0]
 800307e:	4623      	mov	r3, r4
 8003080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003084:	4614      	mov	r4, r2
 8003086:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800308a:	3301      	adds	r3, #1
 800308c:	2b14      	cmp	r3, #20
 800308e:	d1fa      	bne.n	8003086 <initialise_monitor_handles+0x32>
 8003090:	f7ff ffd4 	bl	800303c <_has_ext_stdout_stderr>
 8003094:	4d1b      	ldr	r5, [pc, #108]	; (8003104 <initialise_monitor_handles+0xb0>)
 8003096:	b1d0      	cbz	r0, 80030ce <initialise_monitor_handles+0x7a>
 8003098:	f04f 0a03 	mov.w	sl, #3
 800309c:	2304      	movs	r3, #4
 800309e:	f8cd 9004 	str.w	r9, [sp, #4]
 80030a2:	2701      	movs	r7, #1
 80030a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	4638      	mov	r0, r7
 80030ac:	4641      	mov	r1, r8
 80030ae:	beab      	bkpt	0x00ab
 80030b0:	4683      	mov	fp, r0
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <initialise_monitor_handles+0xb4>)
 80030b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80030b8:	f8c3 b000 	str.w	fp, [r3]
 80030bc:	2308      	movs	r3, #8
 80030be:	f8cd a00c 	str.w	sl, [sp, #12]
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	4638      	mov	r0, r7
 80030c6:	4641      	mov	r1, r8
 80030c8:	beab      	bkpt	0x00ab
 80030ca:	4607      	mov	r7, r0
 80030cc:	602f      	str	r7, [r5, #0]
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	bf02      	ittt	eq
 80030d4:	4b0c      	ldreq	r3, [pc, #48]	; (8003108 <initialise_monitor_handles+0xb4>)
 80030d6:	681b      	ldreq	r3, [r3, #0]
 80030d8:	602b      	streq	r3, [r5, #0]
 80030da:	6833      	ldr	r3, [r6, #0]
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	2600      	movs	r6, #0
 80030e0:	6066      	str	r6, [r4, #4]
 80030e2:	f7ff ffab 	bl	800303c <_has_ext_stdout_stderr>
 80030e6:	b130      	cbz	r0, 80030f6 <initialise_monitor_handles+0xa2>
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <initialise_monitor_handles+0xb4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80030f6:	b005      	add	sp, #20
 80030f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fc:	2000025c 	.word	0x2000025c
 8003100:	20000264 	.word	0x20000264
 8003104:	20000258 	.word	0x20000258
 8003108:	20000260 	.word	0x20000260
 800310c:	08005d46 	.word	0x08005d46

08003110 <_isatty>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	f7ff fd6b 	bl	8002bec <findslot>
 8003116:	2509      	movs	r5, #9
 8003118:	4604      	mov	r4, r0
 800311a:	b920      	cbnz	r0, 8003126 <_isatty+0x16>
 800311c:	f000 f814 	bl	8003148 <__errno>
 8003120:	6005      	str	r5, [r0, #0]
 8003122:	4620      	mov	r0, r4
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	4628      	mov	r0, r5
 8003128:	4621      	mov	r1, r4
 800312a:	beab      	bkpt	0x00ab
 800312c:	4604      	mov	r4, r0
 800312e:	2c01      	cmp	r4, #1
 8003130:	d0f7      	beq.n	8003122 <_isatty+0x12>
 8003132:	f000 f809 	bl	8003148 <__errno>
 8003136:	2400      	movs	r4, #0
 8003138:	4605      	mov	r5, r0
 800313a:	2613      	movs	r6, #19
 800313c:	4630      	mov	r0, r6
 800313e:	4621      	mov	r1, r4
 8003140:	beab      	bkpt	0x00ab
 8003142:	4606      	mov	r6, r0
 8003144:	602e      	str	r6, [r5, #0]
 8003146:	e7ec      	b.n	8003122 <_isatty+0x12>

08003148 <__errno>:
 8003148:	4b01      	ldr	r3, [pc, #4]	; (8003150 <__errno+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000060 	.word	0x20000060

08003154 <std>:
 8003154:	2300      	movs	r3, #0
 8003156:	b510      	push	{r4, lr}
 8003158:	4604      	mov	r4, r0
 800315a:	e9c0 3300 	strd	r3, r3, [r0]
 800315e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003162:	6083      	str	r3, [r0, #8]
 8003164:	8181      	strh	r1, [r0, #12]
 8003166:	6643      	str	r3, [r0, #100]	; 0x64
 8003168:	81c2      	strh	r2, [r0, #14]
 800316a:	6183      	str	r3, [r0, #24]
 800316c:	4619      	mov	r1, r3
 800316e:	2208      	movs	r2, #8
 8003170:	305c      	adds	r0, #92	; 0x5c
 8003172:	f000 f91a 	bl	80033aa <memset>
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <std+0x38>)
 8003178:	6263      	str	r3, [r4, #36]	; 0x24
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <std+0x3c>)
 800317c:	62a3      	str	r3, [r4, #40]	; 0x28
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <std+0x40>)
 8003180:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <std+0x44>)
 8003184:	6224      	str	r4, [r4, #32]
 8003186:	6323      	str	r3, [r4, #48]	; 0x30
 8003188:	bd10      	pop	{r4, pc}
 800318a:	bf00      	nop
 800318c:	08003e81 	.word	0x08003e81
 8003190:	08003ea3 	.word	0x08003ea3
 8003194:	08003edb 	.word	0x08003edb
 8003198:	08003eff 	.word	0x08003eff

0800319c <_cleanup_r>:
 800319c:	4901      	ldr	r1, [pc, #4]	; (80031a4 <_cleanup_r+0x8>)
 800319e:	f000 b8af 	b.w	8003300 <_fwalk_reent>
 80031a2:	bf00      	nop
 80031a4:	08004f05 	.word	0x08004f05

080031a8 <__sfmoreglue>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	1e4a      	subs	r2, r1, #1
 80031ac:	2568      	movs	r5, #104	; 0x68
 80031ae:	4355      	muls	r5, r2
 80031b0:	460e      	mov	r6, r1
 80031b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031b6:	f000 f901 	bl	80033bc <_malloc_r>
 80031ba:	4604      	mov	r4, r0
 80031bc:	b140      	cbz	r0, 80031d0 <__sfmoreglue+0x28>
 80031be:	2100      	movs	r1, #0
 80031c0:	e9c0 1600 	strd	r1, r6, [r0]
 80031c4:	300c      	adds	r0, #12
 80031c6:	60a0      	str	r0, [r4, #8]
 80031c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031cc:	f000 f8ed 	bl	80033aa <memset>
 80031d0:	4620      	mov	r0, r4
 80031d2:	bd70      	pop	{r4, r5, r6, pc}

080031d4 <__sfp_lock_acquire>:
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <__sfp_lock_acquire+0x8>)
 80031d6:	f000 b8d8 	b.w	800338a <__retarget_lock_acquire_recursive>
 80031da:	bf00      	nop
 80031dc:	200003f0 	.word	0x200003f0

080031e0 <__sfp_lock_release>:
 80031e0:	4801      	ldr	r0, [pc, #4]	; (80031e8 <__sfp_lock_release+0x8>)
 80031e2:	f000 b8d3 	b.w	800338c <__retarget_lock_release_recursive>
 80031e6:	bf00      	nop
 80031e8:	200003f0 	.word	0x200003f0

080031ec <__sinit_lock_acquire>:
 80031ec:	4801      	ldr	r0, [pc, #4]	; (80031f4 <__sinit_lock_acquire+0x8>)
 80031ee:	f000 b8cc 	b.w	800338a <__retarget_lock_acquire_recursive>
 80031f2:	bf00      	nop
 80031f4:	200003eb 	.word	0x200003eb

080031f8 <__sinit_lock_release>:
 80031f8:	4801      	ldr	r0, [pc, #4]	; (8003200 <__sinit_lock_release+0x8>)
 80031fa:	f000 b8c7 	b.w	800338c <__retarget_lock_release_recursive>
 80031fe:	bf00      	nop
 8003200:	200003eb 	.word	0x200003eb

08003204 <__sinit>:
 8003204:	b510      	push	{r4, lr}
 8003206:	4604      	mov	r4, r0
 8003208:	f7ff fff0 	bl	80031ec <__sinit_lock_acquire>
 800320c:	69a3      	ldr	r3, [r4, #24]
 800320e:	b11b      	cbz	r3, 8003218 <__sinit+0x14>
 8003210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003214:	f7ff bff0 	b.w	80031f8 <__sinit_lock_release>
 8003218:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800321c:	6523      	str	r3, [r4, #80]	; 0x50
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <__sinit+0x68>)
 8003220:	4a13      	ldr	r2, [pc, #76]	; (8003270 <__sinit+0x6c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	62a2      	str	r2, [r4, #40]	; 0x28
 8003226:	42a3      	cmp	r3, r4
 8003228:	bf04      	itt	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	61a3      	streq	r3, [r4, #24]
 800322e:	4620      	mov	r0, r4
 8003230:	f000 f820 	bl	8003274 <__sfp>
 8003234:	6060      	str	r0, [r4, #4]
 8003236:	4620      	mov	r0, r4
 8003238:	f000 f81c 	bl	8003274 <__sfp>
 800323c:	60a0      	str	r0, [r4, #8]
 800323e:	4620      	mov	r0, r4
 8003240:	f000 f818 	bl	8003274 <__sfp>
 8003244:	2200      	movs	r2, #0
 8003246:	60e0      	str	r0, [r4, #12]
 8003248:	2104      	movs	r1, #4
 800324a:	6860      	ldr	r0, [r4, #4]
 800324c:	f7ff ff82 	bl	8003154 <std>
 8003250:	68a0      	ldr	r0, [r4, #8]
 8003252:	2201      	movs	r2, #1
 8003254:	2109      	movs	r1, #9
 8003256:	f7ff ff7d 	bl	8003154 <std>
 800325a:	68e0      	ldr	r0, [r4, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	2112      	movs	r1, #18
 8003260:	f7ff ff78 	bl	8003154 <std>
 8003264:	2301      	movs	r3, #1
 8003266:	61a3      	str	r3, [r4, #24]
 8003268:	e7d2      	b.n	8003210 <__sinit+0xc>
 800326a:	bf00      	nop
 800326c:	08005dac 	.word	0x08005dac
 8003270:	0800319d 	.word	0x0800319d

08003274 <__sfp>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	4607      	mov	r7, r0
 8003278:	f7ff ffac 	bl	80031d4 <__sfp_lock_acquire>
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <__sfp+0x84>)
 800327e:	681e      	ldr	r6, [r3, #0]
 8003280:	69b3      	ldr	r3, [r6, #24]
 8003282:	b913      	cbnz	r3, 800328a <__sfp+0x16>
 8003284:	4630      	mov	r0, r6
 8003286:	f7ff ffbd 	bl	8003204 <__sinit>
 800328a:	3648      	adds	r6, #72	; 0x48
 800328c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	d503      	bpl.n	800329c <__sfp+0x28>
 8003294:	6833      	ldr	r3, [r6, #0]
 8003296:	b30b      	cbz	r3, 80032dc <__sfp+0x68>
 8003298:	6836      	ldr	r6, [r6, #0]
 800329a:	e7f7      	b.n	800328c <__sfp+0x18>
 800329c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032a0:	b9d5      	cbnz	r5, 80032d8 <__sfp+0x64>
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <__sfp+0x88>)
 80032a4:	60e3      	str	r3, [r4, #12]
 80032a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032aa:	6665      	str	r5, [r4, #100]	; 0x64
 80032ac:	f000 f86c 	bl	8003388 <__retarget_lock_init_recursive>
 80032b0:	f7ff ff96 	bl	80031e0 <__sfp_lock_release>
 80032b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80032b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80032bc:	6025      	str	r5, [r4, #0]
 80032be:	61a5      	str	r5, [r4, #24]
 80032c0:	2208      	movs	r2, #8
 80032c2:	4629      	mov	r1, r5
 80032c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032c8:	f000 f86f 	bl	80033aa <memset>
 80032cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032d4:	4620      	mov	r0, r4
 80032d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d8:	3468      	adds	r4, #104	; 0x68
 80032da:	e7d9      	b.n	8003290 <__sfp+0x1c>
 80032dc:	2104      	movs	r1, #4
 80032de:	4638      	mov	r0, r7
 80032e0:	f7ff ff62 	bl	80031a8 <__sfmoreglue>
 80032e4:	4604      	mov	r4, r0
 80032e6:	6030      	str	r0, [r6, #0]
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d1d5      	bne.n	8003298 <__sfp+0x24>
 80032ec:	f7ff ff78 	bl	80031e0 <__sfp_lock_release>
 80032f0:	230c      	movs	r3, #12
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	e7ee      	b.n	80032d4 <__sfp+0x60>
 80032f6:	bf00      	nop
 80032f8:	08005dac 	.word	0x08005dac
 80032fc:	ffff0001 	.word	0xffff0001

08003300 <_fwalk_reent>:
 8003300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003304:	4606      	mov	r6, r0
 8003306:	4688      	mov	r8, r1
 8003308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800330c:	2700      	movs	r7, #0
 800330e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003312:	f1b9 0901 	subs.w	r9, r9, #1
 8003316:	d505      	bpl.n	8003324 <_fwalk_reent+0x24>
 8003318:	6824      	ldr	r4, [r4, #0]
 800331a:	2c00      	cmp	r4, #0
 800331c:	d1f7      	bne.n	800330e <_fwalk_reent+0xe>
 800331e:	4638      	mov	r0, r7
 8003320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003324:	89ab      	ldrh	r3, [r5, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d907      	bls.n	800333a <_fwalk_reent+0x3a>
 800332a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800332e:	3301      	adds	r3, #1
 8003330:	d003      	beq.n	800333a <_fwalk_reent+0x3a>
 8003332:	4629      	mov	r1, r5
 8003334:	4630      	mov	r0, r6
 8003336:	47c0      	blx	r8
 8003338:	4307      	orrs	r7, r0
 800333a:	3568      	adds	r5, #104	; 0x68
 800333c:	e7e9      	b.n	8003312 <_fwalk_reent+0x12>
	...

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4d0d      	ldr	r5, [pc, #52]	; (8003378 <__libc_init_array+0x38>)
 8003344:	4c0d      	ldr	r4, [pc, #52]	; (800337c <__libc_init_array+0x3c>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	2600      	movs	r6, #0
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	4d0b      	ldr	r5, [pc, #44]	; (8003380 <__libc_init_array+0x40>)
 8003352:	4c0c      	ldr	r4, [pc, #48]	; (8003384 <__libc_init_array+0x44>)
 8003354:	f002 fc94 	bl	8005c80 <_init>
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	2600      	movs	r6, #0
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	08006130 	.word	0x08006130
 800337c:	08006130 	.word	0x08006130
 8003380:	08006130 	.word	0x08006130
 8003384:	08006134 	.word	0x08006134

08003388 <__retarget_lock_init_recursive>:
 8003388:	4770      	bx	lr

0800338a <__retarget_lock_acquire_recursive>:
 800338a:	4770      	bx	lr

0800338c <__retarget_lock_release_recursive>:
 800338c:	4770      	bx	lr

0800338e <memcpy>:
 800338e:	440a      	add	r2, r1
 8003390:	4291      	cmp	r1, r2
 8003392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003396:	d100      	bne.n	800339a <memcpy+0xc>
 8003398:	4770      	bx	lr
 800339a:	b510      	push	{r4, lr}
 800339c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a4:	4291      	cmp	r1, r2
 80033a6:	d1f9      	bne.n	800339c <memcpy+0xe>
 80033a8:	bd10      	pop	{r4, pc}

080033aa <memset>:
 80033aa:	4402      	add	r2, r0
 80033ac:	4603      	mov	r3, r0
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d100      	bne.n	80033b4 <memset+0xa>
 80033b2:	4770      	bx	lr
 80033b4:	f803 1b01 	strb.w	r1, [r3], #1
 80033b8:	e7f9      	b.n	80033ae <memset+0x4>
	...

080033bc <_malloc_r>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	1ccd      	adds	r5, r1, #3
 80033c0:	f025 0503 	bic.w	r5, r5, #3
 80033c4:	3508      	adds	r5, #8
 80033c6:	2d0c      	cmp	r5, #12
 80033c8:	bf38      	it	cc
 80033ca:	250c      	movcc	r5, #12
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	4606      	mov	r6, r0
 80033d0:	db01      	blt.n	80033d6 <_malloc_r+0x1a>
 80033d2:	42a9      	cmp	r1, r5
 80033d4:	d903      	bls.n	80033de <_malloc_r+0x22>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	2000      	movs	r0, #0
 80033dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033de:	f001 fe61 	bl	80050a4 <__malloc_lock>
 80033e2:	4921      	ldr	r1, [pc, #132]	; (8003468 <_malloc_r+0xac>)
 80033e4:	680a      	ldr	r2, [r1, #0]
 80033e6:	4614      	mov	r4, r2
 80033e8:	b99c      	cbnz	r4, 8003412 <_malloc_r+0x56>
 80033ea:	4f20      	ldr	r7, [pc, #128]	; (800346c <_malloc_r+0xb0>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b923      	cbnz	r3, 80033fa <_malloc_r+0x3e>
 80033f0:	4621      	mov	r1, r4
 80033f2:	4630      	mov	r0, r6
 80033f4:	f000 fd34 	bl	8003e60 <_sbrk_r>
 80033f8:	6038      	str	r0, [r7, #0]
 80033fa:	4629      	mov	r1, r5
 80033fc:	4630      	mov	r0, r6
 80033fe:	f000 fd2f 	bl	8003e60 <_sbrk_r>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d123      	bne.n	800344e <_malloc_r+0x92>
 8003406:	230c      	movs	r3, #12
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	4630      	mov	r0, r6
 800340c:	f001 fe50 	bl	80050b0 <__malloc_unlock>
 8003410:	e7e3      	b.n	80033da <_malloc_r+0x1e>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	1b5b      	subs	r3, r3, r5
 8003416:	d417      	bmi.n	8003448 <_malloc_r+0x8c>
 8003418:	2b0b      	cmp	r3, #11
 800341a:	d903      	bls.n	8003424 <_malloc_r+0x68>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	441c      	add	r4, r3
 8003420:	6025      	str	r5, [r4, #0]
 8003422:	e004      	b.n	800342e <_malloc_r+0x72>
 8003424:	6863      	ldr	r3, [r4, #4]
 8003426:	42a2      	cmp	r2, r4
 8003428:	bf0c      	ite	eq
 800342a:	600b      	streq	r3, [r1, #0]
 800342c:	6053      	strne	r3, [r2, #4]
 800342e:	4630      	mov	r0, r6
 8003430:	f001 fe3e 	bl	80050b0 <__malloc_unlock>
 8003434:	f104 000b 	add.w	r0, r4, #11
 8003438:	1d23      	adds	r3, r4, #4
 800343a:	f020 0007 	bic.w	r0, r0, #7
 800343e:	1ac2      	subs	r2, r0, r3
 8003440:	d0cc      	beq.n	80033dc <_malloc_r+0x20>
 8003442:	1a1b      	subs	r3, r3, r0
 8003444:	50a3      	str	r3, [r4, r2]
 8003446:	e7c9      	b.n	80033dc <_malloc_r+0x20>
 8003448:	4622      	mov	r2, r4
 800344a:	6864      	ldr	r4, [r4, #4]
 800344c:	e7cc      	b.n	80033e8 <_malloc_r+0x2c>
 800344e:	1cc4      	adds	r4, r0, #3
 8003450:	f024 0403 	bic.w	r4, r4, #3
 8003454:	42a0      	cmp	r0, r4
 8003456:	d0e3      	beq.n	8003420 <_malloc_r+0x64>
 8003458:	1a21      	subs	r1, r4, r0
 800345a:	4630      	mov	r0, r6
 800345c:	f000 fd00 	bl	8003e60 <_sbrk_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d1dd      	bne.n	8003420 <_malloc_r+0x64>
 8003464:	e7cf      	b.n	8003406 <_malloc_r+0x4a>
 8003466:	bf00      	nop
 8003468:	20000304 	.word	0x20000304
 800346c:	20000308 	.word	0x20000308

08003470 <__cvt>:
 8003470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	ec55 4b10 	vmov	r4, r5, d0
 8003478:	2d00      	cmp	r5, #0
 800347a:	460e      	mov	r6, r1
 800347c:	4619      	mov	r1, r3
 800347e:	462b      	mov	r3, r5
 8003480:	bfbb      	ittet	lt
 8003482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003486:	461d      	movlt	r5, r3
 8003488:	2300      	movge	r3, #0
 800348a:	232d      	movlt	r3, #45	; 0x2d
 800348c:	700b      	strb	r3, [r1, #0]
 800348e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003494:	4691      	mov	r9, r2
 8003496:	f023 0820 	bic.w	r8, r3, #32
 800349a:	bfbc      	itt	lt
 800349c:	4622      	movlt	r2, r4
 800349e:	4614      	movlt	r4, r2
 80034a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034a4:	d005      	beq.n	80034b2 <__cvt+0x42>
 80034a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034aa:	d100      	bne.n	80034ae <__cvt+0x3e>
 80034ac:	3601      	adds	r6, #1
 80034ae:	2102      	movs	r1, #2
 80034b0:	e000      	b.n	80034b4 <__cvt+0x44>
 80034b2:	2103      	movs	r1, #3
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	ab02      	add	r3, sp, #8
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	ec45 4b10 	vmov	d0, r4, r5
 80034c0:	4653      	mov	r3, sl
 80034c2:	4632      	mov	r2, r6
 80034c4:	f000 feac 	bl	8004220 <_dtoa_r>
 80034c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034cc:	4607      	mov	r7, r0
 80034ce:	d102      	bne.n	80034d6 <__cvt+0x66>
 80034d0:	f019 0f01 	tst.w	r9, #1
 80034d4:	d022      	beq.n	800351c <__cvt+0xac>
 80034d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034da:	eb07 0906 	add.w	r9, r7, r6
 80034de:	d110      	bne.n	8003502 <__cvt+0x92>
 80034e0:	783b      	ldrb	r3, [r7, #0]
 80034e2:	2b30      	cmp	r3, #48	; 0x30
 80034e4:	d10a      	bne.n	80034fc <__cvt+0x8c>
 80034e6:	2200      	movs	r2, #0
 80034e8:	2300      	movs	r3, #0
 80034ea:	4620      	mov	r0, r4
 80034ec:	4629      	mov	r1, r5
 80034ee:	f7fd faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80034f2:	b918      	cbnz	r0, 80034fc <__cvt+0x8c>
 80034f4:	f1c6 0601 	rsb	r6, r6, #1
 80034f8:	f8ca 6000 	str.w	r6, [sl]
 80034fc:	f8da 3000 	ldr.w	r3, [sl]
 8003500:	4499      	add	r9, r3
 8003502:	2200      	movs	r2, #0
 8003504:	2300      	movs	r3, #0
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fd fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800350e:	b108      	cbz	r0, 8003514 <__cvt+0xa4>
 8003510:	f8cd 900c 	str.w	r9, [sp, #12]
 8003514:	2230      	movs	r2, #48	; 0x30
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	454b      	cmp	r3, r9
 800351a:	d307      	bcc.n	800352c <__cvt+0xbc>
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003520:	1bdb      	subs	r3, r3, r7
 8003522:	4638      	mov	r0, r7
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	b004      	add	sp, #16
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	1c59      	adds	r1, r3, #1
 800352e:	9103      	str	r1, [sp, #12]
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e7f0      	b.n	8003516 <__cvt+0xa6>

08003534 <__exponent>:
 8003534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003536:	4603      	mov	r3, r0
 8003538:	2900      	cmp	r1, #0
 800353a:	bfb8      	it	lt
 800353c:	4249      	neglt	r1, r1
 800353e:	f803 2b02 	strb.w	r2, [r3], #2
 8003542:	bfb4      	ite	lt
 8003544:	222d      	movlt	r2, #45	; 0x2d
 8003546:	222b      	movge	r2, #43	; 0x2b
 8003548:	2909      	cmp	r1, #9
 800354a:	7042      	strb	r2, [r0, #1]
 800354c:	dd2a      	ble.n	80035a4 <__exponent+0x70>
 800354e:	f10d 0407 	add.w	r4, sp, #7
 8003552:	46a4      	mov	ip, r4
 8003554:	270a      	movs	r7, #10
 8003556:	46a6      	mov	lr, r4
 8003558:	460a      	mov	r2, r1
 800355a:	fb91 f6f7 	sdiv	r6, r1, r7
 800355e:	fb07 1516 	mls	r5, r7, r6, r1
 8003562:	3530      	adds	r5, #48	; 0x30
 8003564:	2a63      	cmp	r2, #99	; 0x63
 8003566:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800356a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800356e:	4631      	mov	r1, r6
 8003570:	dcf1      	bgt.n	8003556 <__exponent+0x22>
 8003572:	3130      	adds	r1, #48	; 0x30
 8003574:	f1ae 0502 	sub.w	r5, lr, #2
 8003578:	f804 1c01 	strb.w	r1, [r4, #-1]
 800357c:	1c44      	adds	r4, r0, #1
 800357e:	4629      	mov	r1, r5
 8003580:	4561      	cmp	r1, ip
 8003582:	d30a      	bcc.n	800359a <__exponent+0x66>
 8003584:	f10d 0209 	add.w	r2, sp, #9
 8003588:	eba2 020e 	sub.w	r2, r2, lr
 800358c:	4565      	cmp	r5, ip
 800358e:	bf88      	it	hi
 8003590:	2200      	movhi	r2, #0
 8003592:	4413      	add	r3, r2
 8003594:	1a18      	subs	r0, r3, r0
 8003596:	b003      	add	sp, #12
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800359e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035a2:	e7ed      	b.n	8003580 <__exponent+0x4c>
 80035a4:	2330      	movs	r3, #48	; 0x30
 80035a6:	3130      	adds	r1, #48	; 0x30
 80035a8:	7083      	strb	r3, [r0, #2]
 80035aa:	70c1      	strb	r1, [r0, #3]
 80035ac:	1d03      	adds	r3, r0, #4
 80035ae:	e7f1      	b.n	8003594 <__exponent+0x60>

080035b0 <_printf_float>:
 80035b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	ed2d 8b02 	vpush	{d8}
 80035b8:	b08d      	sub	sp, #52	; 0x34
 80035ba:	460c      	mov	r4, r1
 80035bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80035c0:	4616      	mov	r6, r2
 80035c2:	461f      	mov	r7, r3
 80035c4:	4605      	mov	r5, r0
 80035c6:	f001 fceb 	bl	8004fa0 <_localeconv_r>
 80035ca:	f8d0 a000 	ldr.w	sl, [r0]
 80035ce:	4650      	mov	r0, sl
 80035d0:	f7fc fdfe 	bl	80001d0 <strlen>
 80035d4:	2300      	movs	r3, #0
 80035d6:	930a      	str	r3, [sp, #40]	; 0x28
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	f8d8 3000 	ldr.w	r3, [r8]
 80035e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80035e4:	3307      	adds	r3, #7
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	f103 0208 	add.w	r2, r3, #8
 80035ee:	f8c8 2000 	str.w	r2, [r8]
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80035fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003602:	9307      	str	r3, [sp, #28]
 8003604:	f8cd 8018 	str.w	r8, [sp, #24]
 8003608:	ee08 0a10 	vmov	s16, r0
 800360c:	4b9f      	ldr	r3, [pc, #636]	; (800388c <_printf_float+0x2dc>)
 800360e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003616:	f7fd fa89 	bl	8000b2c <__aeabi_dcmpun>
 800361a:	bb88      	cbnz	r0, 8003680 <_printf_float+0xd0>
 800361c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003620:	4b9a      	ldr	r3, [pc, #616]	; (800388c <_printf_float+0x2dc>)
 8003622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003626:	f7fd fa63 	bl	8000af0 <__aeabi_dcmple>
 800362a:	bb48      	cbnz	r0, 8003680 <_printf_float+0xd0>
 800362c:	2200      	movs	r2, #0
 800362e:	2300      	movs	r3, #0
 8003630:	4640      	mov	r0, r8
 8003632:	4649      	mov	r1, r9
 8003634:	f7fd fa52 	bl	8000adc <__aeabi_dcmplt>
 8003638:	b110      	cbz	r0, 8003640 <_printf_float+0x90>
 800363a:	232d      	movs	r3, #45	; 0x2d
 800363c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003640:	4b93      	ldr	r3, [pc, #588]	; (8003890 <_printf_float+0x2e0>)
 8003642:	4894      	ldr	r0, [pc, #592]	; (8003894 <_printf_float+0x2e4>)
 8003644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003648:	bf94      	ite	ls
 800364a:	4698      	movls	r8, r3
 800364c:	4680      	movhi	r8, r0
 800364e:	2303      	movs	r3, #3
 8003650:	6123      	str	r3, [r4, #16]
 8003652:	9b05      	ldr	r3, [sp, #20]
 8003654:	f023 0204 	bic.w	r2, r3, #4
 8003658:	6022      	str	r2, [r4, #0]
 800365a:	f04f 0900 	mov.w	r9, #0
 800365e:	9700      	str	r7, [sp, #0]
 8003660:	4633      	mov	r3, r6
 8003662:	aa0b      	add	r2, sp, #44	; 0x2c
 8003664:	4621      	mov	r1, r4
 8003666:	4628      	mov	r0, r5
 8003668:	f000 f9d8 	bl	8003a1c <_printf_common>
 800366c:	3001      	adds	r0, #1
 800366e:	f040 8090 	bne.w	8003792 <_printf_float+0x1e2>
 8003672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003676:	b00d      	add	sp, #52	; 0x34
 8003678:	ecbd 8b02 	vpop	{d8}
 800367c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	4640      	mov	r0, r8
 8003686:	4649      	mov	r1, r9
 8003688:	f7fd fa50 	bl	8000b2c <__aeabi_dcmpun>
 800368c:	b140      	cbz	r0, 80036a0 <_printf_float+0xf0>
 800368e:	464b      	mov	r3, r9
 8003690:	2b00      	cmp	r3, #0
 8003692:	bfbc      	itt	lt
 8003694:	232d      	movlt	r3, #45	; 0x2d
 8003696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800369a:	487f      	ldr	r0, [pc, #508]	; (8003898 <_printf_float+0x2e8>)
 800369c:	4b7f      	ldr	r3, [pc, #508]	; (800389c <_printf_float+0x2ec>)
 800369e:	e7d1      	b.n	8003644 <_printf_float+0x94>
 80036a0:	6863      	ldr	r3, [r4, #4]
 80036a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80036a6:	9206      	str	r2, [sp, #24]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	d13f      	bne.n	800372c <_printf_float+0x17c>
 80036ac:	2306      	movs	r3, #6
 80036ae:	6063      	str	r3, [r4, #4]
 80036b0:	9b05      	ldr	r3, [sp, #20]
 80036b2:	6861      	ldr	r1, [r4, #4]
 80036b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036b8:	2300      	movs	r3, #0
 80036ba:	9303      	str	r3, [sp, #12]
 80036bc:	ab0a      	add	r3, sp, #40	; 0x28
 80036be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80036c2:	ab09      	add	r3, sp, #36	; 0x24
 80036c4:	ec49 8b10 	vmov	d0, r8, r9
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6022      	str	r2, [r4, #0]
 80036cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff fecd 	bl	8003470 <__cvt>
 80036d6:	9b06      	ldr	r3, [sp, #24]
 80036d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036da:	2b47      	cmp	r3, #71	; 0x47
 80036dc:	4680      	mov	r8, r0
 80036de:	d108      	bne.n	80036f2 <_printf_float+0x142>
 80036e0:	1cc8      	adds	r0, r1, #3
 80036e2:	db02      	blt.n	80036ea <_printf_float+0x13a>
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	4299      	cmp	r1, r3
 80036e8:	dd41      	ble.n	800376e <_printf_float+0x1be>
 80036ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80036ee:	fa5f fb8b 	uxtb.w	fp, fp
 80036f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80036f6:	d820      	bhi.n	800373a <_printf_float+0x18a>
 80036f8:	3901      	subs	r1, #1
 80036fa:	465a      	mov	r2, fp
 80036fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003700:	9109      	str	r1, [sp, #36]	; 0x24
 8003702:	f7ff ff17 	bl	8003534 <__exponent>
 8003706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003708:	1813      	adds	r3, r2, r0
 800370a:	2a01      	cmp	r2, #1
 800370c:	4681      	mov	r9, r0
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	dc02      	bgt.n	8003718 <_printf_float+0x168>
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	07d2      	lsls	r2, r2, #31
 8003716:	d501      	bpl.n	800371c <_printf_float+0x16c>
 8003718:	3301      	adds	r3, #1
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003720:	2b00      	cmp	r3, #0
 8003722:	d09c      	beq.n	800365e <_printf_float+0xae>
 8003724:	232d      	movs	r3, #45	; 0x2d
 8003726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372a:	e798      	b.n	800365e <_printf_float+0xae>
 800372c:	9a06      	ldr	r2, [sp, #24]
 800372e:	2a47      	cmp	r2, #71	; 0x47
 8003730:	d1be      	bne.n	80036b0 <_printf_float+0x100>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1bc      	bne.n	80036b0 <_printf_float+0x100>
 8003736:	2301      	movs	r3, #1
 8003738:	e7b9      	b.n	80036ae <_printf_float+0xfe>
 800373a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800373e:	d118      	bne.n	8003772 <_printf_float+0x1c2>
 8003740:	2900      	cmp	r1, #0
 8003742:	6863      	ldr	r3, [r4, #4]
 8003744:	dd0b      	ble.n	800375e <_printf_float+0x1ae>
 8003746:	6121      	str	r1, [r4, #16]
 8003748:	b913      	cbnz	r3, 8003750 <_printf_float+0x1a0>
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	07d0      	lsls	r0, r2, #31
 800374e:	d502      	bpl.n	8003756 <_printf_float+0x1a6>
 8003750:	3301      	adds	r3, #1
 8003752:	440b      	add	r3, r1
 8003754:	6123      	str	r3, [r4, #16]
 8003756:	65a1      	str	r1, [r4, #88]	; 0x58
 8003758:	f04f 0900 	mov.w	r9, #0
 800375c:	e7de      	b.n	800371c <_printf_float+0x16c>
 800375e:	b913      	cbnz	r3, 8003766 <_printf_float+0x1b6>
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	07d2      	lsls	r2, r2, #31
 8003764:	d501      	bpl.n	800376a <_printf_float+0x1ba>
 8003766:	3302      	adds	r3, #2
 8003768:	e7f4      	b.n	8003754 <_printf_float+0x1a4>
 800376a:	2301      	movs	r3, #1
 800376c:	e7f2      	b.n	8003754 <_printf_float+0x1a4>
 800376e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003774:	4299      	cmp	r1, r3
 8003776:	db05      	blt.n	8003784 <_printf_float+0x1d4>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	6121      	str	r1, [r4, #16]
 800377c:	07d8      	lsls	r0, r3, #31
 800377e:	d5ea      	bpl.n	8003756 <_printf_float+0x1a6>
 8003780:	1c4b      	adds	r3, r1, #1
 8003782:	e7e7      	b.n	8003754 <_printf_float+0x1a4>
 8003784:	2900      	cmp	r1, #0
 8003786:	bfd4      	ite	le
 8003788:	f1c1 0202 	rsble	r2, r1, #2
 800378c:	2201      	movgt	r2, #1
 800378e:	4413      	add	r3, r2
 8003790:	e7e0      	b.n	8003754 <_printf_float+0x1a4>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	055a      	lsls	r2, r3, #21
 8003796:	d407      	bmi.n	80037a8 <_printf_float+0x1f8>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	4642      	mov	r2, r8
 800379c:	4631      	mov	r1, r6
 800379e:	4628      	mov	r0, r5
 80037a0:	47b8      	blx	r7
 80037a2:	3001      	adds	r0, #1
 80037a4:	d12c      	bne.n	8003800 <_printf_float+0x250>
 80037a6:	e764      	b.n	8003672 <_printf_float+0xc2>
 80037a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037ac:	f240 80e0 	bls.w	8003970 <_printf_float+0x3c0>
 80037b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037b4:	2200      	movs	r2, #0
 80037b6:	2300      	movs	r3, #0
 80037b8:	f7fd f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d034      	beq.n	800382a <_printf_float+0x27a>
 80037c0:	4a37      	ldr	r2, [pc, #220]	; (80038a0 <_printf_float+0x2f0>)
 80037c2:	2301      	movs	r3, #1
 80037c4:	4631      	mov	r1, r6
 80037c6:	4628      	mov	r0, r5
 80037c8:	47b8      	blx	r7
 80037ca:	3001      	adds	r0, #1
 80037cc:	f43f af51 	beq.w	8003672 <_printf_float+0xc2>
 80037d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037d4:	429a      	cmp	r2, r3
 80037d6:	db02      	blt.n	80037de <_printf_float+0x22e>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	07d8      	lsls	r0, r3, #31
 80037dc:	d510      	bpl.n	8003800 <_printf_float+0x250>
 80037de:	ee18 3a10 	vmov	r3, s16
 80037e2:	4652      	mov	r2, sl
 80037e4:	4631      	mov	r1, r6
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	f43f af41 	beq.w	8003672 <_printf_float+0xc2>
 80037f0:	f04f 0800 	mov.w	r8, #0
 80037f4:	f104 091a 	add.w	r9, r4, #26
 80037f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4543      	cmp	r3, r8
 80037fe:	dc09      	bgt.n	8003814 <_printf_float+0x264>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	079b      	lsls	r3, r3, #30
 8003804:	f100 8105 	bmi.w	8003a12 <_printf_float+0x462>
 8003808:	68e0      	ldr	r0, [r4, #12]
 800380a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800380c:	4298      	cmp	r0, r3
 800380e:	bfb8      	it	lt
 8003810:	4618      	movlt	r0, r3
 8003812:	e730      	b.n	8003676 <_printf_float+0xc6>
 8003814:	2301      	movs	r3, #1
 8003816:	464a      	mov	r2, r9
 8003818:	4631      	mov	r1, r6
 800381a:	4628      	mov	r0, r5
 800381c:	47b8      	blx	r7
 800381e:	3001      	adds	r0, #1
 8003820:	f43f af27 	beq.w	8003672 <_printf_float+0xc2>
 8003824:	f108 0801 	add.w	r8, r8, #1
 8003828:	e7e6      	b.n	80037f8 <_printf_float+0x248>
 800382a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800382c:	2b00      	cmp	r3, #0
 800382e:	dc39      	bgt.n	80038a4 <_printf_float+0x2f4>
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <_printf_float+0x2f0>)
 8003832:	2301      	movs	r3, #1
 8003834:	4631      	mov	r1, r6
 8003836:	4628      	mov	r0, r5
 8003838:	47b8      	blx	r7
 800383a:	3001      	adds	r0, #1
 800383c:	f43f af19 	beq.w	8003672 <_printf_float+0xc2>
 8003840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003844:	4313      	orrs	r3, r2
 8003846:	d102      	bne.n	800384e <_printf_float+0x29e>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	07d9      	lsls	r1, r3, #31
 800384c:	d5d8      	bpl.n	8003800 <_printf_float+0x250>
 800384e:	ee18 3a10 	vmov	r3, s16
 8003852:	4652      	mov	r2, sl
 8003854:	4631      	mov	r1, r6
 8003856:	4628      	mov	r0, r5
 8003858:	47b8      	blx	r7
 800385a:	3001      	adds	r0, #1
 800385c:	f43f af09 	beq.w	8003672 <_printf_float+0xc2>
 8003860:	f04f 0900 	mov.w	r9, #0
 8003864:	f104 0a1a 	add.w	sl, r4, #26
 8003868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800386a:	425b      	negs	r3, r3
 800386c:	454b      	cmp	r3, r9
 800386e:	dc01      	bgt.n	8003874 <_printf_float+0x2c4>
 8003870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003872:	e792      	b.n	800379a <_printf_float+0x1ea>
 8003874:	2301      	movs	r3, #1
 8003876:	4652      	mov	r2, sl
 8003878:	4631      	mov	r1, r6
 800387a:	4628      	mov	r0, r5
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	f43f aef7 	beq.w	8003672 <_printf_float+0xc2>
 8003884:	f109 0901 	add.w	r9, r9, #1
 8003888:	e7ee      	b.n	8003868 <_printf_float+0x2b8>
 800388a:	bf00      	nop
 800388c:	7fefffff 	.word	0x7fefffff
 8003890:	08005db0 	.word	0x08005db0
 8003894:	08005db4 	.word	0x08005db4
 8003898:	08005dbc 	.word	0x08005dbc
 800389c:	08005db8 	.word	0x08005db8
 80038a0:	08005dc0 	.word	0x08005dc0
 80038a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038a8:	429a      	cmp	r2, r3
 80038aa:	bfa8      	it	ge
 80038ac:	461a      	movge	r2, r3
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	4691      	mov	r9, r2
 80038b2:	dc37      	bgt.n	8003924 <_printf_float+0x374>
 80038b4:	f04f 0b00 	mov.w	fp, #0
 80038b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038bc:	f104 021a 	add.w	r2, r4, #26
 80038c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038c2:	9305      	str	r3, [sp, #20]
 80038c4:	eba3 0309 	sub.w	r3, r3, r9
 80038c8:	455b      	cmp	r3, fp
 80038ca:	dc33      	bgt.n	8003934 <_printf_float+0x384>
 80038cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038d0:	429a      	cmp	r2, r3
 80038d2:	db3b      	blt.n	800394c <_printf_float+0x39c>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	07da      	lsls	r2, r3, #31
 80038d8:	d438      	bmi.n	800394c <_printf_float+0x39c>
 80038da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038dc:	9b05      	ldr	r3, [sp, #20]
 80038de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	eba2 0901 	sub.w	r9, r2, r1
 80038e6:	4599      	cmp	r9, r3
 80038e8:	bfa8      	it	ge
 80038ea:	4699      	movge	r9, r3
 80038ec:	f1b9 0f00 	cmp.w	r9, #0
 80038f0:	dc35      	bgt.n	800395e <_printf_float+0x3ae>
 80038f2:	f04f 0800 	mov.w	r8, #0
 80038f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038fa:	f104 0a1a 	add.w	sl, r4, #26
 80038fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	eba3 0309 	sub.w	r3, r3, r9
 8003908:	4543      	cmp	r3, r8
 800390a:	f77f af79 	ble.w	8003800 <_printf_float+0x250>
 800390e:	2301      	movs	r3, #1
 8003910:	4652      	mov	r2, sl
 8003912:	4631      	mov	r1, r6
 8003914:	4628      	mov	r0, r5
 8003916:	47b8      	blx	r7
 8003918:	3001      	adds	r0, #1
 800391a:	f43f aeaa 	beq.w	8003672 <_printf_float+0xc2>
 800391e:	f108 0801 	add.w	r8, r8, #1
 8003922:	e7ec      	b.n	80038fe <_printf_float+0x34e>
 8003924:	4613      	mov	r3, r2
 8003926:	4631      	mov	r1, r6
 8003928:	4642      	mov	r2, r8
 800392a:	4628      	mov	r0, r5
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	d1c0      	bne.n	80038b4 <_printf_float+0x304>
 8003932:	e69e      	b.n	8003672 <_printf_float+0xc2>
 8003934:	2301      	movs	r3, #1
 8003936:	4631      	mov	r1, r6
 8003938:	4628      	mov	r0, r5
 800393a:	9205      	str	r2, [sp, #20]
 800393c:	47b8      	blx	r7
 800393e:	3001      	adds	r0, #1
 8003940:	f43f ae97 	beq.w	8003672 <_printf_float+0xc2>
 8003944:	9a05      	ldr	r2, [sp, #20]
 8003946:	f10b 0b01 	add.w	fp, fp, #1
 800394a:	e7b9      	b.n	80038c0 <_printf_float+0x310>
 800394c:	ee18 3a10 	vmov	r3, s16
 8003950:	4652      	mov	r2, sl
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	d1be      	bne.n	80038da <_printf_float+0x32a>
 800395c:	e689      	b.n	8003672 <_printf_float+0xc2>
 800395e:	9a05      	ldr	r2, [sp, #20]
 8003960:	464b      	mov	r3, r9
 8003962:	4442      	add	r2, r8
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	d1c1      	bne.n	80038f2 <_printf_float+0x342>
 800396e:	e680      	b.n	8003672 <_printf_float+0xc2>
 8003970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003972:	2a01      	cmp	r2, #1
 8003974:	dc01      	bgt.n	800397a <_printf_float+0x3ca>
 8003976:	07db      	lsls	r3, r3, #31
 8003978:	d538      	bpl.n	80039ec <_printf_float+0x43c>
 800397a:	2301      	movs	r3, #1
 800397c:	4642      	mov	r2, r8
 800397e:	4631      	mov	r1, r6
 8003980:	4628      	mov	r0, r5
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	f43f ae74 	beq.w	8003672 <_printf_float+0xc2>
 800398a:	ee18 3a10 	vmov	r3, s16
 800398e:	4652      	mov	r2, sl
 8003990:	4631      	mov	r1, r6
 8003992:	4628      	mov	r0, r5
 8003994:	47b8      	blx	r7
 8003996:	3001      	adds	r0, #1
 8003998:	f43f ae6b 	beq.w	8003672 <_printf_float+0xc2>
 800399c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039a0:	2200      	movs	r2, #0
 80039a2:	2300      	movs	r3, #0
 80039a4:	f7fd f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80039a8:	b9d8      	cbnz	r0, 80039e2 <_printf_float+0x432>
 80039aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ac:	f108 0201 	add.w	r2, r8, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	d10e      	bne.n	80039da <_printf_float+0x42a>
 80039bc:	e659      	b.n	8003672 <_printf_float+0xc2>
 80039be:	2301      	movs	r3, #1
 80039c0:	4652      	mov	r2, sl
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b8      	blx	r7
 80039c8:	3001      	adds	r0, #1
 80039ca:	f43f ae52 	beq.w	8003672 <_printf_float+0xc2>
 80039ce:	f108 0801 	add.w	r8, r8, #1
 80039d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4543      	cmp	r3, r8
 80039d8:	dcf1      	bgt.n	80039be <_printf_float+0x40e>
 80039da:	464b      	mov	r3, r9
 80039dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039e0:	e6dc      	b.n	800379c <_printf_float+0x1ec>
 80039e2:	f04f 0800 	mov.w	r8, #0
 80039e6:	f104 0a1a 	add.w	sl, r4, #26
 80039ea:	e7f2      	b.n	80039d2 <_printf_float+0x422>
 80039ec:	2301      	movs	r3, #1
 80039ee:	4642      	mov	r2, r8
 80039f0:	e7df      	b.n	80039b2 <_printf_float+0x402>
 80039f2:	2301      	movs	r3, #1
 80039f4:	464a      	mov	r2, r9
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b8      	blx	r7
 80039fc:	3001      	adds	r0, #1
 80039fe:	f43f ae38 	beq.w	8003672 <_printf_float+0xc2>
 8003a02:	f108 0801 	add.w	r8, r8, #1
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	4543      	cmp	r3, r8
 8003a0e:	dcf0      	bgt.n	80039f2 <_printf_float+0x442>
 8003a10:	e6fa      	b.n	8003808 <_printf_float+0x258>
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	f104 0919 	add.w	r9, r4, #25
 8003a1a:	e7f4      	b.n	8003a06 <_printf_float+0x456>

08003a1c <_printf_common>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	4616      	mov	r6, r2
 8003a22:	4699      	mov	r9, r3
 8003a24:	688a      	ldr	r2, [r1, #8]
 8003a26:	690b      	ldr	r3, [r1, #16]
 8003a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bfb8      	it	lt
 8003a30:	4613      	movlt	r3, r2
 8003a32:	6033      	str	r3, [r6, #0]
 8003a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a38:	4607      	mov	r7, r0
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	b10a      	cbz	r2, 8003a42 <_printf_common+0x26>
 8003a3e:	3301      	adds	r3, #1
 8003a40:	6033      	str	r3, [r6, #0]
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	0699      	lsls	r1, r3, #26
 8003a46:	bf42      	ittt	mi
 8003a48:	6833      	ldrmi	r3, [r6, #0]
 8003a4a:	3302      	addmi	r3, #2
 8003a4c:	6033      	strmi	r3, [r6, #0]
 8003a4e:	6825      	ldr	r5, [r4, #0]
 8003a50:	f015 0506 	ands.w	r5, r5, #6
 8003a54:	d106      	bne.n	8003a64 <_printf_common+0x48>
 8003a56:	f104 0a19 	add.w	sl, r4, #25
 8003a5a:	68e3      	ldr	r3, [r4, #12]
 8003a5c:	6832      	ldr	r2, [r6, #0]
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	42ab      	cmp	r3, r5
 8003a62:	dc26      	bgt.n	8003ab2 <_printf_common+0x96>
 8003a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a68:	1e13      	subs	r3, r2, #0
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	bf18      	it	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	0692      	lsls	r2, r2, #26
 8003a72:	d42b      	bmi.n	8003acc <_printf_common+0xb0>
 8003a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	47c0      	blx	r8
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d01e      	beq.n	8003ac0 <_printf_common+0xa4>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	68e5      	ldr	r5, [r4, #12]
 8003a86:	6832      	ldr	r2, [r6, #0]
 8003a88:	f003 0306 	and.w	r3, r3, #6
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	bf08      	it	eq
 8003a90:	1aad      	subeq	r5, r5, r2
 8003a92:	68a3      	ldr	r3, [r4, #8]
 8003a94:	6922      	ldr	r2, [r4, #16]
 8003a96:	bf0c      	ite	eq
 8003a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a9c:	2500      	movne	r5, #0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	bfc4      	itt	gt
 8003aa2:	1a9b      	subgt	r3, r3, r2
 8003aa4:	18ed      	addgt	r5, r5, r3
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	341a      	adds	r4, #26
 8003aaa:	42b5      	cmp	r5, r6
 8003aac:	d11a      	bne.n	8003ae4 <_printf_common+0xc8>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e008      	b.n	8003ac4 <_printf_common+0xa8>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	4652      	mov	r2, sl
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	4638      	mov	r0, r7
 8003aba:	47c0      	blx	r8
 8003abc:	3001      	adds	r0, #1
 8003abe:	d103      	bne.n	8003ac8 <_printf_common+0xac>
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7c6      	b.n	8003a5a <_printf_common+0x3e>
 8003acc:	18e1      	adds	r1, r4, r3
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	2030      	movs	r0, #48	; 0x30
 8003ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ad6:	4422      	add	r2, r4
 8003ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	e7c7      	b.n	8003a74 <_printf_common+0x58>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	4649      	mov	r1, r9
 8003aea:	4638      	mov	r0, r7
 8003aec:	47c0      	blx	r8
 8003aee:	3001      	adds	r0, #1
 8003af0:	d0e6      	beq.n	8003ac0 <_printf_common+0xa4>
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7d9      	b.n	8003aaa <_printf_common+0x8e>
	...

08003af8 <_printf_i>:
 8003af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	460c      	mov	r4, r1
 8003afe:	4691      	mov	r9, r2
 8003b00:	7e27      	ldrb	r7, [r4, #24]
 8003b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b04:	2f78      	cmp	r7, #120	; 0x78
 8003b06:	4680      	mov	r8, r0
 8003b08:	469a      	mov	sl, r3
 8003b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b0e:	d807      	bhi.n	8003b20 <_printf_i+0x28>
 8003b10:	2f62      	cmp	r7, #98	; 0x62
 8003b12:	d80a      	bhi.n	8003b2a <_printf_i+0x32>
 8003b14:	2f00      	cmp	r7, #0
 8003b16:	f000 80d8 	beq.w	8003cca <_printf_i+0x1d2>
 8003b1a:	2f58      	cmp	r7, #88	; 0x58
 8003b1c:	f000 80a3 	beq.w	8003c66 <_printf_i+0x16e>
 8003b20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b28:	e03a      	b.n	8003ba0 <_printf_i+0xa8>
 8003b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b2e:	2b15      	cmp	r3, #21
 8003b30:	d8f6      	bhi.n	8003b20 <_printf_i+0x28>
 8003b32:	a001      	add	r0, pc, #4	; (adr r0, 8003b38 <_printf_i+0x40>)
 8003b34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b38:	08003b91 	.word	0x08003b91
 8003b3c:	08003ba5 	.word	0x08003ba5
 8003b40:	08003b21 	.word	0x08003b21
 8003b44:	08003b21 	.word	0x08003b21
 8003b48:	08003b21 	.word	0x08003b21
 8003b4c:	08003b21 	.word	0x08003b21
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003b21 	.word	0x08003b21
 8003b58:	08003b21 	.word	0x08003b21
 8003b5c:	08003b21 	.word	0x08003b21
 8003b60:	08003b21 	.word	0x08003b21
 8003b64:	08003cb1 	.word	0x08003cb1
 8003b68:	08003bd5 	.word	0x08003bd5
 8003b6c:	08003c93 	.word	0x08003c93
 8003b70:	08003b21 	.word	0x08003b21
 8003b74:	08003b21 	.word	0x08003b21
 8003b78:	08003cd3 	.word	0x08003cd3
 8003b7c:	08003b21 	.word	0x08003b21
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003b21 	.word	0x08003b21
 8003b88:	08003b21 	.word	0x08003b21
 8003b8c:	08003c9b 	.word	0x08003c9b
 8003b90:	680b      	ldr	r3, [r1, #0]
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	600a      	str	r2, [r1, #0]
 8003b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0a3      	b.n	8003cec <_printf_i+0x1f4>
 8003ba4:	6825      	ldr	r5, [r4, #0]
 8003ba6:	6808      	ldr	r0, [r1, #0]
 8003ba8:	062e      	lsls	r6, r5, #24
 8003baa:	f100 0304 	add.w	r3, r0, #4
 8003bae:	d50a      	bpl.n	8003bc6 <_printf_i+0xce>
 8003bb0:	6805      	ldr	r5, [r0, #0]
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	da03      	bge.n	8003bc0 <_printf_i+0xc8>
 8003bb8:	232d      	movs	r3, #45	; 0x2d
 8003bba:	426d      	negs	r5, r5
 8003bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc0:	485e      	ldr	r0, [pc, #376]	; (8003d3c <_printf_i+0x244>)
 8003bc2:	230a      	movs	r3, #10
 8003bc4:	e019      	b.n	8003bfa <_printf_i+0x102>
 8003bc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bca:	6805      	ldr	r5, [r0, #0]
 8003bcc:	600b      	str	r3, [r1, #0]
 8003bce:	bf18      	it	ne
 8003bd0:	b22d      	sxthne	r5, r5
 8003bd2:	e7ef      	b.n	8003bb4 <_printf_i+0xbc>
 8003bd4:	680b      	ldr	r3, [r1, #0]
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	1d18      	adds	r0, r3, #4
 8003bda:	6008      	str	r0, [r1, #0]
 8003bdc:	0628      	lsls	r0, r5, #24
 8003bde:	d501      	bpl.n	8003be4 <_printf_i+0xec>
 8003be0:	681d      	ldr	r5, [r3, #0]
 8003be2:	e002      	b.n	8003bea <_printf_i+0xf2>
 8003be4:	0669      	lsls	r1, r5, #25
 8003be6:	d5fb      	bpl.n	8003be0 <_printf_i+0xe8>
 8003be8:	881d      	ldrh	r5, [r3, #0]
 8003bea:	4854      	ldr	r0, [pc, #336]	; (8003d3c <_printf_i+0x244>)
 8003bec:	2f6f      	cmp	r7, #111	; 0x6f
 8003bee:	bf0c      	ite	eq
 8003bf0:	2308      	moveq	r3, #8
 8003bf2:	230a      	movne	r3, #10
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bfa:	6866      	ldr	r6, [r4, #4]
 8003bfc:	60a6      	str	r6, [r4, #8]
 8003bfe:	2e00      	cmp	r6, #0
 8003c00:	bfa2      	ittt	ge
 8003c02:	6821      	ldrge	r1, [r4, #0]
 8003c04:	f021 0104 	bicge.w	r1, r1, #4
 8003c08:	6021      	strge	r1, [r4, #0]
 8003c0a:	b90d      	cbnz	r5, 8003c10 <_printf_i+0x118>
 8003c0c:	2e00      	cmp	r6, #0
 8003c0e:	d04d      	beq.n	8003cac <_printf_i+0x1b4>
 8003c10:	4616      	mov	r6, r2
 8003c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c16:	fb03 5711 	mls	r7, r3, r1, r5
 8003c1a:	5dc7      	ldrb	r7, [r0, r7]
 8003c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c20:	462f      	mov	r7, r5
 8003c22:	42bb      	cmp	r3, r7
 8003c24:	460d      	mov	r5, r1
 8003c26:	d9f4      	bls.n	8003c12 <_printf_i+0x11a>
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d10b      	bne.n	8003c44 <_printf_i+0x14c>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	07df      	lsls	r7, r3, #31
 8003c30:	d508      	bpl.n	8003c44 <_printf_i+0x14c>
 8003c32:	6923      	ldr	r3, [r4, #16]
 8003c34:	6861      	ldr	r1, [r4, #4]
 8003c36:	4299      	cmp	r1, r3
 8003c38:	bfde      	ittt	le
 8003c3a:	2330      	movle	r3, #48	; 0x30
 8003c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003c44:	1b92      	subs	r2, r2, r6
 8003c46:	6122      	str	r2, [r4, #16]
 8003c48:	f8cd a000 	str.w	sl, [sp]
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	aa03      	add	r2, sp, #12
 8003c50:	4621      	mov	r1, r4
 8003c52:	4640      	mov	r0, r8
 8003c54:	f7ff fee2 	bl	8003a1c <_printf_common>
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d14c      	bne.n	8003cf6 <_printf_i+0x1fe>
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c60:	b004      	add	sp, #16
 8003c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c66:	4835      	ldr	r0, [pc, #212]	; (8003d3c <_printf_i+0x244>)
 8003c68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	680e      	ldr	r6, [r1, #0]
 8003c70:	061f      	lsls	r7, r3, #24
 8003c72:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c76:	600e      	str	r6, [r1, #0]
 8003c78:	d514      	bpl.n	8003ca4 <_printf_i+0x1ac>
 8003c7a:	07d9      	lsls	r1, r3, #31
 8003c7c:	bf44      	itt	mi
 8003c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c82:	6023      	strmi	r3, [r4, #0]
 8003c84:	b91d      	cbnz	r5, 8003c8e <_printf_i+0x196>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	f023 0320 	bic.w	r3, r3, #32
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	2310      	movs	r3, #16
 8003c90:	e7b0      	b.n	8003bf4 <_printf_i+0xfc>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	f043 0320 	orr.w	r3, r3, #32
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	2378      	movs	r3, #120	; 0x78
 8003c9c:	4828      	ldr	r0, [pc, #160]	; (8003d40 <_printf_i+0x248>)
 8003c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ca2:	e7e3      	b.n	8003c6c <_printf_i+0x174>
 8003ca4:	065e      	lsls	r6, r3, #25
 8003ca6:	bf48      	it	mi
 8003ca8:	b2ad      	uxthmi	r5, r5
 8003caa:	e7e6      	b.n	8003c7a <_printf_i+0x182>
 8003cac:	4616      	mov	r6, r2
 8003cae:	e7bb      	b.n	8003c28 <_printf_i+0x130>
 8003cb0:	680b      	ldr	r3, [r1, #0]
 8003cb2:	6826      	ldr	r6, [r4, #0]
 8003cb4:	6960      	ldr	r0, [r4, #20]
 8003cb6:	1d1d      	adds	r5, r3, #4
 8003cb8:	600d      	str	r5, [r1, #0]
 8003cba:	0635      	lsls	r5, r6, #24
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_i+0x1cc>
 8003cc0:	6018      	str	r0, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <_printf_i+0x1d2>
 8003cc4:	0671      	lsls	r1, r6, #25
 8003cc6:	d5fb      	bpl.n	8003cc0 <_printf_i+0x1c8>
 8003cc8:	8018      	strh	r0, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	4616      	mov	r6, r2
 8003cd0:	e7ba      	b.n	8003c48 <_printf_i+0x150>
 8003cd2:	680b      	ldr	r3, [r1, #0]
 8003cd4:	1d1a      	adds	r2, r3, #4
 8003cd6:	600a      	str	r2, [r1, #0]
 8003cd8:	681e      	ldr	r6, [r3, #0]
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7fc fa7e 	bl	80001e0 <memchr>
 8003ce4:	b108      	cbz	r0, 8003cea <_printf_i+0x1f2>
 8003ce6:	1b80      	subs	r0, r0, r6
 8003ce8:	6060      	str	r0, [r4, #4]
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf4:	e7a8      	b.n	8003c48 <_printf_i+0x150>
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	47d0      	blx	sl
 8003d00:	3001      	adds	r0, #1
 8003d02:	d0ab      	beq.n	8003c5c <_printf_i+0x164>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	079b      	lsls	r3, r3, #30
 8003d08:	d413      	bmi.n	8003d32 <_printf_i+0x23a>
 8003d0a:	68e0      	ldr	r0, [r4, #12]
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	4298      	cmp	r0, r3
 8003d10:	bfb8      	it	lt
 8003d12:	4618      	movlt	r0, r3
 8003d14:	e7a4      	b.n	8003c60 <_printf_i+0x168>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	47d0      	blx	sl
 8003d20:	3001      	adds	r0, #1
 8003d22:	d09b      	beq.n	8003c5c <_printf_i+0x164>
 8003d24:	3501      	adds	r5, #1
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	9903      	ldr	r1, [sp, #12]
 8003d2a:	1a5b      	subs	r3, r3, r1
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dcf2      	bgt.n	8003d16 <_printf_i+0x21e>
 8003d30:	e7eb      	b.n	8003d0a <_printf_i+0x212>
 8003d32:	2500      	movs	r5, #0
 8003d34:	f104 0619 	add.w	r6, r4, #25
 8003d38:	e7f5      	b.n	8003d26 <_printf_i+0x22e>
 8003d3a:	bf00      	nop
 8003d3c:	08005dc2 	.word	0x08005dc2
 8003d40:	08005dd3 	.word	0x08005dd3

08003d44 <iprintf>:
 8003d44:	b40f      	push	{r0, r1, r2, r3}
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <iprintf+0x2c>)
 8003d48:	b513      	push	{r0, r1, r4, lr}
 8003d4a:	681c      	ldr	r4, [r3, #0]
 8003d4c:	b124      	cbz	r4, 8003d58 <iprintf+0x14>
 8003d4e:	69a3      	ldr	r3, [r4, #24]
 8003d50:	b913      	cbnz	r3, 8003d58 <iprintf+0x14>
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fa56 	bl	8003204 <__sinit>
 8003d58:	ab05      	add	r3, sp, #20
 8003d5a:	9a04      	ldr	r2, [sp, #16]
 8003d5c:	68a1      	ldr	r1, [r4, #8]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	4620      	mov	r0, r4
 8003d62:	f001 fdb3 	bl	80058cc <_vfiprintf_r>
 8003d66:	b002      	add	sp, #8
 8003d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d6c:	b004      	add	sp, #16
 8003d6e:	4770      	bx	lr
 8003d70:	20000060 	.word	0x20000060

08003d74 <_puts_r>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	460e      	mov	r6, r1
 8003d78:	4605      	mov	r5, r0
 8003d7a:	b118      	cbz	r0, 8003d84 <_puts_r+0x10>
 8003d7c:	6983      	ldr	r3, [r0, #24]
 8003d7e:	b90b      	cbnz	r3, 8003d84 <_puts_r+0x10>
 8003d80:	f7ff fa40 	bl	8003204 <__sinit>
 8003d84:	69ab      	ldr	r3, [r5, #24]
 8003d86:	68ac      	ldr	r4, [r5, #8]
 8003d88:	b913      	cbnz	r3, 8003d90 <_puts_r+0x1c>
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7ff fa3a 	bl	8003204 <__sinit>
 8003d90:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <_puts_r+0xd0>)
 8003d92:	429c      	cmp	r4, r3
 8003d94:	d120      	bne.n	8003dd8 <_puts_r+0x64>
 8003d96:	686c      	ldr	r4, [r5, #4]
 8003d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d9a:	07db      	lsls	r3, r3, #31
 8003d9c:	d405      	bmi.n	8003daa <_puts_r+0x36>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	0598      	lsls	r0, r3, #22
 8003da2:	d402      	bmi.n	8003daa <_puts_r+0x36>
 8003da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003da6:	f7ff faf0 	bl	800338a <__retarget_lock_acquire_recursive>
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	0719      	lsls	r1, r3, #28
 8003dae:	d51d      	bpl.n	8003dec <_puts_r+0x78>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	b1db      	cbz	r3, 8003dec <_puts_r+0x78>
 8003db4:	3e01      	subs	r6, #1
 8003db6:	68a3      	ldr	r3, [r4, #8]
 8003db8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	bb39      	cbnz	r1, 8003e12 <_puts_r+0x9e>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da38      	bge.n	8003e38 <_puts_r+0xc4>
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	210a      	movs	r1, #10
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f000 f89c 	bl	8003f08 <__swbuf_r>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d011      	beq.n	8003df8 <_puts_r+0x84>
 8003dd4:	250a      	movs	r5, #10
 8003dd6:	e011      	b.n	8003dfc <_puts_r+0x88>
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <_puts_r+0xd4>)
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	d101      	bne.n	8003de2 <_puts_r+0x6e>
 8003dde:	68ac      	ldr	r4, [r5, #8]
 8003de0:	e7da      	b.n	8003d98 <_puts_r+0x24>
 8003de2:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <_puts_r+0xd8>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	bf08      	it	eq
 8003de8:	68ec      	ldreq	r4, [r5, #12]
 8003dea:	e7d5      	b.n	8003d98 <_puts_r+0x24>
 8003dec:	4621      	mov	r1, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 f8ee 	bl	8003fd0 <__swsetup_r>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d0dd      	beq.n	8003db4 <_puts_r+0x40>
 8003df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dfe:	07da      	lsls	r2, r3, #31
 8003e00:	d405      	bmi.n	8003e0e <_puts_r+0x9a>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	059b      	lsls	r3, r3, #22
 8003e06:	d402      	bmi.n	8003e0e <_puts_r+0x9a>
 8003e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e0a:	f7ff fabf 	bl	800338c <__retarget_lock_release_recursive>
 8003e0e:	4628      	mov	r0, r5
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da04      	bge.n	8003e20 <_puts_r+0xac>
 8003e16:	69a2      	ldr	r2, [r4, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	dc06      	bgt.n	8003e2a <_puts_r+0xb6>
 8003e1c:	290a      	cmp	r1, #10
 8003e1e:	d004      	beq.n	8003e2a <_puts_r+0xb6>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	6022      	str	r2, [r4, #0]
 8003e26:	7019      	strb	r1, [r3, #0]
 8003e28:	e7c5      	b.n	8003db6 <_puts_r+0x42>
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f86b 	bl	8003f08 <__swbuf_r>
 8003e32:	3001      	adds	r0, #1
 8003e34:	d1bf      	bne.n	8003db6 <_puts_r+0x42>
 8003e36:	e7df      	b.n	8003df8 <_puts_r+0x84>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	250a      	movs	r5, #10
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	701d      	strb	r5, [r3, #0]
 8003e42:	e7db      	b.n	8003dfc <_puts_r+0x88>
 8003e44:	08005d6c 	.word	0x08005d6c
 8003e48:	08005d8c 	.word	0x08005d8c
 8003e4c:	08005d4c 	.word	0x08005d4c

08003e50 <puts>:
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <puts+0xc>)
 8003e52:	4601      	mov	r1, r0
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f7ff bf8d 	b.w	8003d74 <_puts_r>
 8003e5a:	bf00      	nop
 8003e5c:	20000060 	.word	0x20000060

08003e60 <_sbrk_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d06      	ldr	r5, [pc, #24]	; (8003e7c <_sbrk_r+0x1c>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f7fd f8d4 	bl	8001018 <_sbrk>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_sbrk_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_sbrk_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	200003f4 	.word	0x200003f4

08003e80 <__sread>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	460c      	mov	r4, r1
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	f001 fe50 	bl	8005b2c <_read_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfab      	itete	ge
 8003e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e92:	89a3      	ldrhlt	r3, [r4, #12]
 8003e94:	181b      	addge	r3, r3, r0
 8003e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e9a:	bfac      	ite	ge
 8003e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9e:	81a3      	strhlt	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__swrite>:
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	4605      	mov	r5, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d505      	bpl.n	8003ec0 <__swrite+0x1e>
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	2302      	movs	r3, #2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f001 f874 	bl	8004fa8 <_lseek_r>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	4632      	mov	r2, r6
 8003ece:	463b      	mov	r3, r7
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	f000 b869 	b.w	8003fac <_write_r>

08003eda <__sseek>:
 8003eda:	b510      	push	{r4, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f001 f861 	bl	8004fa8 <_lseek_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	bf15      	itete	ne
 8003eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef6:	81a3      	strheq	r3, [r4, #12]
 8003ef8:	bf18      	it	ne
 8003efa:	81a3      	strhne	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__sclose>:
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 b8f1 	b.w	80040e8 <_close_r>
	...

08003f08 <__swbuf_r>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	4605      	mov	r5, r0
 8003f10:	b118      	cbz	r0, 8003f1a <__swbuf_r+0x12>
 8003f12:	6983      	ldr	r3, [r0, #24]
 8003f14:	b90b      	cbnz	r3, 8003f1a <__swbuf_r+0x12>
 8003f16:	f7ff f975 	bl	8003204 <__sinit>
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <__swbuf_r+0x98>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d12b      	bne.n	8003f78 <__swbuf_r+0x70>
 8003f20:	686c      	ldr	r4, [r5, #4]
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071a      	lsls	r2, r3, #28
 8003f2a:	d52f      	bpl.n	8003f8c <__swbuf_r+0x84>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	b36b      	cbz	r3, 8003f8c <__swbuf_r+0x84>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	1ac0      	subs	r0, r0, r3
 8003f36:	6963      	ldr	r3, [r4, #20]
 8003f38:	b2f6      	uxtb	r6, r6
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	dc04      	bgt.n	8003f4a <__swbuf_r+0x42>
 8003f40:	4621      	mov	r1, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 ffde 	bl	8004f04 <_fflush_r>
 8003f48:	bb30      	cbnz	r0, 8003f98 <__swbuf_r+0x90>
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60a3      	str	r3, [r4, #8]
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	6022      	str	r2, [r4, #0]
 8003f56:	701e      	strb	r6, [r3, #0]
 8003f58:	6963      	ldr	r3, [r4, #20]
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	4283      	cmp	r3, r0
 8003f5e:	d004      	beq.n	8003f6a <__swbuf_r+0x62>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	07db      	lsls	r3, r3, #31
 8003f64:	d506      	bpl.n	8003f74 <__swbuf_r+0x6c>
 8003f66:	2e0a      	cmp	r6, #10
 8003f68:	d104      	bne.n	8003f74 <__swbuf_r+0x6c>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 ffc9 	bl	8004f04 <_fflush_r>
 8003f72:	b988      	cbnz	r0, 8003f98 <__swbuf_r+0x90>
 8003f74:	4638      	mov	r0, r7
 8003f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <__swbuf_r+0x9c>)
 8003f7a:	429c      	cmp	r4, r3
 8003f7c:	d101      	bne.n	8003f82 <__swbuf_r+0x7a>
 8003f7e:	68ac      	ldr	r4, [r5, #8]
 8003f80:	e7cf      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <__swbuf_r+0xa0>)
 8003f84:	429c      	cmp	r4, r3
 8003f86:	bf08      	it	eq
 8003f88:	68ec      	ldreq	r4, [r5, #12]
 8003f8a:	e7ca      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 f81e 	bl	8003fd0 <__swsetup_r>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d0cb      	beq.n	8003f30 <__swbuf_r+0x28>
 8003f98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f9c:	e7ea      	b.n	8003f74 <__swbuf_r+0x6c>
 8003f9e:	bf00      	nop
 8003fa0:	08005d6c 	.word	0x08005d6c
 8003fa4:	08005d8c 	.word	0x08005d8c
 8003fa8:	08005d4c 	.word	0x08005d4c

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d07      	ldr	r5, [pc, #28]	; (8003fcc <_write_r+0x20>)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fe fec8 	bl	8002d50 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	200003f4 	.word	0x200003f4

08003fd0 <__swsetup_r>:
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <__swsetup_r+0xcc>)
 8003fd2:	b570      	push	{r4, r5, r6, lr}
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b125      	cbz	r5, 8003fe6 <__swsetup_r+0x16>
 8003fdc:	69ab      	ldr	r3, [r5, #24]
 8003fde:	b913      	cbnz	r3, 8003fe6 <__swsetup_r+0x16>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff f90f 	bl	8003204 <__sinit>
 8003fe6:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <__swsetup_r+0xd0>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d10f      	bne.n	800400c <__swsetup_r+0x3c>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff4:	0719      	lsls	r1, r3, #28
 8003ff6:	d42c      	bmi.n	8004052 <__swsetup_r+0x82>
 8003ff8:	06dd      	lsls	r5, r3, #27
 8003ffa:	d411      	bmi.n	8004020 <__swsetup_r+0x50>
 8003ffc:	2309      	movs	r3, #9
 8003ffe:	6033      	str	r3, [r6, #0]
 8004000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800400a:	e03e      	b.n	800408a <__swsetup_r+0xba>
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <__swsetup_r+0xd4>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swsetup_r+0x46>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7eb      	b.n	8003fee <__swsetup_r+0x1e>
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <__swsetup_r+0xd8>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7e6      	b.n	8003fee <__swsetup_r+0x1e>
 8004020:	0758      	lsls	r0, r3, #29
 8004022:	d512      	bpl.n	800404a <__swsetup_r+0x7a>
 8004024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004026:	b141      	cbz	r1, 800403a <__swsetup_r+0x6a>
 8004028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800402c:	4299      	cmp	r1, r3
 800402e:	d002      	beq.n	8004036 <__swsetup_r+0x66>
 8004030:	4630      	mov	r0, r6
 8004032:	f001 fbd1 	bl	80057d8 <_free_r>
 8004036:	2300      	movs	r3, #0
 8004038:	6363      	str	r3, [r4, #52]	; 0x34
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	b94b      	cbnz	r3, 800406a <__swsetup_r+0x9a>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d003      	beq.n	800406a <__swsetup_r+0x9a>
 8004062:	4621      	mov	r1, r4
 8004064:	4630      	mov	r0, r6
 8004066:	f000 ffd5 	bl	8005014 <__smakebuf_r>
 800406a:	89a0      	ldrh	r0, [r4, #12]
 800406c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004070:	f010 0301 	ands.w	r3, r0, #1
 8004074:	d00a      	beq.n	800408c <__swsetup_r+0xbc>
 8004076:	2300      	movs	r3, #0
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6963      	ldr	r3, [r4, #20]
 800407c:	425b      	negs	r3, r3
 800407e:	61a3      	str	r3, [r4, #24]
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	b943      	cbnz	r3, 8004096 <__swsetup_r+0xc6>
 8004084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004088:	d1ba      	bne.n	8004000 <__swsetup_r+0x30>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	0781      	lsls	r1, r0, #30
 800408e:	bf58      	it	pl
 8004090:	6963      	ldrpl	r3, [r4, #20]
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	e7f4      	b.n	8004080 <__swsetup_r+0xb0>
 8004096:	2000      	movs	r0, #0
 8004098:	e7f7      	b.n	800408a <__swsetup_r+0xba>
 800409a:	bf00      	nop
 800409c:	20000060 	.word	0x20000060
 80040a0:	08005d6c 	.word	0x08005d6c
 80040a4:	08005d8c 	.word	0x08005d8c
 80040a8:	08005d4c 	.word	0x08005d4c

080040ac <__assert_func>:
 80040ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040ae:	4614      	mov	r4, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <__assert_func+0x2c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4605      	mov	r5, r0
 80040b8:	68d8      	ldr	r0, [r3, #12]
 80040ba:	b14c      	cbz	r4, 80040d0 <__assert_func+0x24>
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <__assert_func+0x30>)
 80040be:	9100      	str	r1, [sp, #0]
 80040c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040c4:	4906      	ldr	r1, [pc, #24]	; (80040e0 <__assert_func+0x34>)
 80040c6:	462b      	mov	r3, r5
 80040c8:	f000 ff58 	bl	8004f7c <fiprintf>
 80040cc:	f001 fd40 	bl	8005b50 <abort>
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <__assert_func+0x38>)
 80040d2:	461c      	mov	r4, r3
 80040d4:	e7f3      	b.n	80040be <__assert_func+0x12>
 80040d6:	bf00      	nop
 80040d8:	20000060 	.word	0x20000060
 80040dc:	08005de4 	.word	0x08005de4
 80040e0:	08005df1 	.word	0x08005df1
 80040e4:	08005e1f 	.word	0x08005e1f

080040e8 <_close_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_close_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fe fe5e 	bl	8002db4 <_close>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_close_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_close_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200003f4 	.word	0x200003f4

08004108 <quorem>:
 8004108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	6903      	ldr	r3, [r0, #16]
 800410e:	690c      	ldr	r4, [r1, #16]
 8004110:	42a3      	cmp	r3, r4
 8004112:	4607      	mov	r7, r0
 8004114:	f2c0 8081 	blt.w	800421a <quorem+0x112>
 8004118:	3c01      	subs	r4, #1
 800411a:	f101 0814 	add.w	r8, r1, #20
 800411e:	f100 0514 	add.w	r5, r0, #20
 8004122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800412c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004130:	3301      	adds	r3, #1
 8004132:	429a      	cmp	r2, r3
 8004134:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800413c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004140:	d331      	bcc.n	80041a6 <quorem+0x9e>
 8004142:	f04f 0e00 	mov.w	lr, #0
 8004146:	4640      	mov	r0, r8
 8004148:	46ac      	mov	ip, r5
 800414a:	46f2      	mov	sl, lr
 800414c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004150:	b293      	uxth	r3, r2
 8004152:	fb06 e303 	mla	r3, r6, r3, lr
 8004156:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800415a:	b29b      	uxth	r3, r3
 800415c:	ebaa 0303 	sub.w	r3, sl, r3
 8004160:	0c12      	lsrs	r2, r2, #16
 8004162:	f8dc a000 	ldr.w	sl, [ip]
 8004166:	fb06 e202 	mla	r2, r6, r2, lr
 800416a:	fa13 f38a 	uxtah	r3, r3, sl
 800416e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004172:	fa1f fa82 	uxth.w	sl, r2
 8004176:	f8dc 2000 	ldr.w	r2, [ip]
 800417a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800417e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004188:	4581      	cmp	r9, r0
 800418a:	f84c 3b04 	str.w	r3, [ip], #4
 800418e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004192:	d2db      	bcs.n	800414c <quorem+0x44>
 8004194:	f855 300b 	ldr.w	r3, [r5, fp]
 8004198:	b92b      	cbnz	r3, 80041a6 <quorem+0x9e>
 800419a:	9b01      	ldr	r3, [sp, #4]
 800419c:	3b04      	subs	r3, #4
 800419e:	429d      	cmp	r5, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	d32e      	bcc.n	8004202 <quorem+0xfa>
 80041a4:	613c      	str	r4, [r7, #16]
 80041a6:	4638      	mov	r0, r7
 80041a8:	f001 fa06 	bl	80055b8 <__mcmp>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	db24      	blt.n	80041fa <quorem+0xf2>
 80041b0:	3601      	adds	r6, #1
 80041b2:	4628      	mov	r0, r5
 80041b4:	f04f 0c00 	mov.w	ip, #0
 80041b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80041bc:	f8d0 e000 	ldr.w	lr, [r0]
 80041c0:	b293      	uxth	r3, r2
 80041c2:	ebac 0303 	sub.w	r3, ip, r3
 80041c6:	0c12      	lsrs	r2, r2, #16
 80041c8:	fa13 f38e 	uxtah	r3, r3, lr
 80041cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80041d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041da:	45c1      	cmp	r9, r8
 80041dc:	f840 3b04 	str.w	r3, [r0], #4
 80041e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041e4:	d2e8      	bcs.n	80041b8 <quorem+0xb0>
 80041e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041ee:	b922      	cbnz	r2, 80041fa <quorem+0xf2>
 80041f0:	3b04      	subs	r3, #4
 80041f2:	429d      	cmp	r5, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	d30a      	bcc.n	800420e <quorem+0x106>
 80041f8:	613c      	str	r4, [r7, #16]
 80041fa:	4630      	mov	r0, r6
 80041fc:	b003      	add	sp, #12
 80041fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	3b04      	subs	r3, #4
 8004206:	2a00      	cmp	r2, #0
 8004208:	d1cc      	bne.n	80041a4 <quorem+0x9c>
 800420a:	3c01      	subs	r4, #1
 800420c:	e7c7      	b.n	800419e <quorem+0x96>
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	3b04      	subs	r3, #4
 8004212:	2a00      	cmp	r2, #0
 8004214:	d1f0      	bne.n	80041f8 <quorem+0xf0>
 8004216:	3c01      	subs	r4, #1
 8004218:	e7eb      	b.n	80041f2 <quorem+0xea>
 800421a:	2000      	movs	r0, #0
 800421c:	e7ee      	b.n	80041fc <quorem+0xf4>
	...

08004220 <_dtoa_r>:
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	ed2d 8b02 	vpush	{d8}
 8004228:	ec57 6b10 	vmov	r6, r7, d0
 800422c:	b095      	sub	sp, #84	; 0x54
 800422e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004230:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004234:	9105      	str	r1, [sp, #20]
 8004236:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800423a:	4604      	mov	r4, r0
 800423c:	9209      	str	r2, [sp, #36]	; 0x24
 800423e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004240:	b975      	cbnz	r5, 8004260 <_dtoa_r+0x40>
 8004242:	2010      	movs	r0, #16
 8004244:	f000 ff26 	bl	8005094 <malloc>
 8004248:	4602      	mov	r2, r0
 800424a:	6260      	str	r0, [r4, #36]	; 0x24
 800424c:	b920      	cbnz	r0, 8004258 <_dtoa_r+0x38>
 800424e:	4bb2      	ldr	r3, [pc, #712]	; (8004518 <_dtoa_r+0x2f8>)
 8004250:	21ea      	movs	r1, #234	; 0xea
 8004252:	48b2      	ldr	r0, [pc, #712]	; (800451c <_dtoa_r+0x2fc>)
 8004254:	f7ff ff2a 	bl	80040ac <__assert_func>
 8004258:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800425c:	6005      	str	r5, [r0, #0]
 800425e:	60c5      	str	r5, [r0, #12]
 8004260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	b151      	cbz	r1, 800427c <_dtoa_r+0x5c>
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	604a      	str	r2, [r1, #4]
 800426a:	2301      	movs	r3, #1
 800426c:	4093      	lsls	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
 8004270:	4620      	mov	r0, r4
 8004272:	f000 ff63 	bl	800513c <_Bfree>
 8004276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	1e3b      	subs	r3, r7, #0
 800427e:	bfb9      	ittee	lt
 8004280:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004284:	9303      	strlt	r3, [sp, #12]
 8004286:	2300      	movge	r3, #0
 8004288:	f8c8 3000 	strge.w	r3, [r8]
 800428c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004290:	4ba3      	ldr	r3, [pc, #652]	; (8004520 <_dtoa_r+0x300>)
 8004292:	bfbc      	itt	lt
 8004294:	2201      	movlt	r2, #1
 8004296:	f8c8 2000 	strlt.w	r2, [r8]
 800429a:	ea33 0309 	bics.w	r3, r3, r9
 800429e:	d11b      	bne.n	80042d8 <_dtoa_r+0xb8>
 80042a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042ac:	4333      	orrs	r3, r6
 80042ae:	f000 857a 	beq.w	8004da6 <_dtoa_r+0xb86>
 80042b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042b4:	b963      	cbnz	r3, 80042d0 <_dtoa_r+0xb0>
 80042b6:	4b9b      	ldr	r3, [pc, #620]	; (8004524 <_dtoa_r+0x304>)
 80042b8:	e024      	b.n	8004304 <_dtoa_r+0xe4>
 80042ba:	4b9b      	ldr	r3, [pc, #620]	; (8004528 <_dtoa_r+0x308>)
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	9800      	ldr	r0, [sp, #0]
 80042c6:	b015      	add	sp, #84	; 0x54
 80042c8:	ecbd 8b02 	vpop	{d8}
 80042cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d0:	4b94      	ldr	r3, [pc, #592]	; (8004524 <_dtoa_r+0x304>)
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	3303      	adds	r3, #3
 80042d6:	e7f3      	b.n	80042c0 <_dtoa_r+0xa0>
 80042d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	ec51 0b17 	vmov	r0, r1, d7
 80042e2:	2300      	movs	r3, #0
 80042e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80042e8:	f7fc fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80042ec:	4680      	mov	r8, r0
 80042ee:	b158      	cbz	r0, 8004308 <_dtoa_r+0xe8>
 80042f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042f2:	2301      	movs	r3, #1
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8551 	beq.w	8004da0 <_dtoa_r+0xb80>
 80042fe:	488b      	ldr	r0, [pc, #556]	; (800452c <_dtoa_r+0x30c>)
 8004300:	6018      	str	r0, [r3, #0]
 8004302:	1e43      	subs	r3, r0, #1
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	e7dd      	b.n	80042c4 <_dtoa_r+0xa4>
 8004308:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800430c:	aa12      	add	r2, sp, #72	; 0x48
 800430e:	a913      	add	r1, sp, #76	; 0x4c
 8004310:	4620      	mov	r0, r4
 8004312:	f001 f9f5 	bl	8005700 <__d2b>
 8004316:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800431a:	4683      	mov	fp, r0
 800431c:	2d00      	cmp	r5, #0
 800431e:	d07c      	beq.n	800441a <_dtoa_r+0x1fa>
 8004320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004322:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800432a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800432e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004332:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800433a:	4b7d      	ldr	r3, [pc, #500]	; (8004530 <_dtoa_r+0x310>)
 800433c:	2200      	movs	r2, #0
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fb ffa1 	bl	8000288 <__aeabi_dsub>
 8004346:	a36e      	add	r3, pc, #440	; (adr r3, 8004500 <_dtoa_r+0x2e0>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fc f954 	bl	80005f8 <__aeabi_dmul>
 8004350:	a36d      	add	r3, pc, #436	; (adr r3, 8004508 <_dtoa_r+0x2e8>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f7fb ff99 	bl	800028c <__adddf3>
 800435a:	4606      	mov	r6, r0
 800435c:	4628      	mov	r0, r5
 800435e:	460f      	mov	r7, r1
 8004360:	f7fc f8e0 	bl	8000524 <__aeabi_i2d>
 8004364:	a36a      	add	r3, pc, #424	; (adr r3, 8004510 <_dtoa_r+0x2f0>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc f945 	bl	80005f8 <__aeabi_dmul>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4630      	mov	r0, r6
 8004374:	4639      	mov	r1, r7
 8004376:	f7fb ff89 	bl	800028c <__adddf3>
 800437a:	4606      	mov	r6, r0
 800437c:	460f      	mov	r7, r1
 800437e:	f7fc fbeb 	bl	8000b58 <__aeabi_d2iz>
 8004382:	2200      	movs	r2, #0
 8004384:	4682      	mov	sl, r0
 8004386:	2300      	movs	r3, #0
 8004388:	4630      	mov	r0, r6
 800438a:	4639      	mov	r1, r7
 800438c:	f7fc fba6 	bl	8000adc <__aeabi_dcmplt>
 8004390:	b148      	cbz	r0, 80043a6 <_dtoa_r+0x186>
 8004392:	4650      	mov	r0, sl
 8004394:	f7fc f8c6 	bl	8000524 <__aeabi_i2d>
 8004398:	4632      	mov	r2, r6
 800439a:	463b      	mov	r3, r7
 800439c:	f7fc fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80043a0:	b908      	cbnz	r0, 80043a6 <_dtoa_r+0x186>
 80043a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043a6:	f1ba 0f16 	cmp.w	sl, #22
 80043aa:	d854      	bhi.n	8004456 <_dtoa_r+0x236>
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <_dtoa_r+0x314>)
 80043ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043ba:	f7fc fb8f 	bl	8000adc <__aeabi_dcmplt>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d04b      	beq.n	800445a <_dtoa_r+0x23a>
 80043c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043c6:	2300      	movs	r3, #0
 80043c8:	930e      	str	r3, [sp, #56]	; 0x38
 80043ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043cc:	1b5d      	subs	r5, r3, r5
 80043ce:	1e6b      	subs	r3, r5, #1
 80043d0:	9304      	str	r3, [sp, #16]
 80043d2:	bf43      	ittte	mi
 80043d4:	2300      	movmi	r3, #0
 80043d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80043da:	9304      	strmi	r3, [sp, #16]
 80043dc:	f04f 0800 	movpl.w	r8, #0
 80043e0:	f1ba 0f00 	cmp.w	sl, #0
 80043e4:	db3b      	blt.n	800445e <_dtoa_r+0x23e>
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80043ec:	4453      	add	r3, sl
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9306      	str	r3, [sp, #24]
 80043f4:	9b05      	ldr	r3, [sp, #20]
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d869      	bhi.n	80044ce <_dtoa_r+0x2ae>
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	bfc4      	itt	gt
 80043fe:	3b04      	subgt	r3, #4
 8004400:	9305      	strgt	r3, [sp, #20]
 8004402:	9b05      	ldr	r3, [sp, #20]
 8004404:	f1a3 0302 	sub.w	r3, r3, #2
 8004408:	bfcc      	ite	gt
 800440a:	2500      	movgt	r5, #0
 800440c:	2501      	movle	r5, #1
 800440e:	2b03      	cmp	r3, #3
 8004410:	d869      	bhi.n	80044e6 <_dtoa_r+0x2c6>
 8004412:	e8df f003 	tbb	[pc, r3]
 8004416:	4e2c      	.short	0x4e2c
 8004418:	5a4c      	.short	0x5a4c
 800441a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800441e:	441d      	add	r5, r3
 8004420:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004424:	2b20      	cmp	r3, #32
 8004426:	bfc1      	itttt	gt
 8004428:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800442c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004430:	fa09 f303 	lslgt.w	r3, r9, r3
 8004434:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004438:	bfda      	itte	le
 800443a:	f1c3 0320 	rsble	r3, r3, #32
 800443e:	fa06 f003 	lslle.w	r0, r6, r3
 8004442:	4318      	orrgt	r0, r3
 8004444:	f7fc f85e 	bl	8000504 <__aeabi_ui2d>
 8004448:	2301      	movs	r3, #1
 800444a:	4606      	mov	r6, r0
 800444c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004450:	3d01      	subs	r5, #1
 8004452:	9310      	str	r3, [sp, #64]	; 0x40
 8004454:	e771      	b.n	800433a <_dtoa_r+0x11a>
 8004456:	2301      	movs	r3, #1
 8004458:	e7b6      	b.n	80043c8 <_dtoa_r+0x1a8>
 800445a:	900e      	str	r0, [sp, #56]	; 0x38
 800445c:	e7b5      	b.n	80043ca <_dtoa_r+0x1aa>
 800445e:	f1ca 0300 	rsb	r3, sl, #0
 8004462:	9306      	str	r3, [sp, #24]
 8004464:	2300      	movs	r3, #0
 8004466:	eba8 080a 	sub.w	r8, r8, sl
 800446a:	930d      	str	r3, [sp, #52]	; 0x34
 800446c:	e7c2      	b.n	80043f4 <_dtoa_r+0x1d4>
 800446e:	2300      	movs	r3, #0
 8004470:	9308      	str	r3, [sp, #32]
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	dc39      	bgt.n	80044ec <_dtoa_r+0x2cc>
 8004478:	f04f 0901 	mov.w	r9, #1
 800447c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004480:	464b      	mov	r3, r9
 8004482:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004486:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004488:	2200      	movs	r2, #0
 800448a:	6042      	str	r2, [r0, #4]
 800448c:	2204      	movs	r2, #4
 800448e:	f102 0614 	add.w	r6, r2, #20
 8004492:	429e      	cmp	r6, r3
 8004494:	6841      	ldr	r1, [r0, #4]
 8004496:	d92f      	bls.n	80044f8 <_dtoa_r+0x2d8>
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fe0f 	bl	80050bc <_Balloc>
 800449e:	9000      	str	r0, [sp, #0]
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d14b      	bne.n	800453c <_dtoa_r+0x31c>
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <_dtoa_r+0x318>)
 80044a6:	4602      	mov	r2, r0
 80044a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044ac:	e6d1      	b.n	8004252 <_dtoa_r+0x32>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7de      	b.n	8004470 <_dtoa_r+0x250>
 80044b2:	2300      	movs	r3, #0
 80044b4:	9308      	str	r3, [sp, #32]
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	eb0a 0903 	add.w	r9, sl, r3
 80044bc:	f109 0301 	add.w	r3, r9, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	bfb8      	it	lt
 80044c6:	2301      	movlt	r3, #1
 80044c8:	e7dd      	b.n	8004486 <_dtoa_r+0x266>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e7f2      	b.n	80044b4 <_dtoa_r+0x294>
 80044ce:	2501      	movs	r5, #1
 80044d0:	2300      	movs	r3, #0
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	9508      	str	r5, [sp, #32]
 80044d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80044da:	2200      	movs	r2, #0
 80044dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80044e0:	2312      	movs	r3, #18
 80044e2:	9209      	str	r2, [sp, #36]	; 0x24
 80044e4:	e7cf      	b.n	8004486 <_dtoa_r+0x266>
 80044e6:	2301      	movs	r3, #1
 80044e8:	9308      	str	r3, [sp, #32]
 80044ea:	e7f4      	b.n	80044d6 <_dtoa_r+0x2b6>
 80044ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80044f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80044f4:	464b      	mov	r3, r9
 80044f6:	e7c6      	b.n	8004486 <_dtoa_r+0x266>
 80044f8:	3101      	adds	r1, #1
 80044fa:	6041      	str	r1, [r0, #4]
 80044fc:	0052      	lsls	r2, r2, #1
 80044fe:	e7c6      	b.n	800448e <_dtoa_r+0x26e>
 8004500:	636f4361 	.word	0x636f4361
 8004504:	3fd287a7 	.word	0x3fd287a7
 8004508:	8b60c8b3 	.word	0x8b60c8b3
 800450c:	3fc68a28 	.word	0x3fc68a28
 8004510:	509f79fb 	.word	0x509f79fb
 8004514:	3fd34413 	.word	0x3fd34413
 8004518:	08005e2d 	.word	0x08005e2d
 800451c:	08005e44 	.word	0x08005e44
 8004520:	7ff00000 	.word	0x7ff00000
 8004524:	08005e29 	.word	0x08005e29
 8004528:	08005e20 	.word	0x08005e20
 800452c:	08005dc1 	.word	0x08005dc1
 8004530:	3ff80000 	.word	0x3ff80000
 8004534:	08005f40 	.word	0x08005f40
 8004538:	08005ea3 	.word	0x08005ea3
 800453c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800453e:	9a00      	ldr	r2, [sp, #0]
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	9b01      	ldr	r3, [sp, #4]
 8004544:	2b0e      	cmp	r3, #14
 8004546:	f200 80ad 	bhi.w	80046a4 <_dtoa_r+0x484>
 800454a:	2d00      	cmp	r5, #0
 800454c:	f000 80aa 	beq.w	80046a4 <_dtoa_r+0x484>
 8004550:	f1ba 0f00 	cmp.w	sl, #0
 8004554:	dd36      	ble.n	80045c4 <_dtoa_r+0x3a4>
 8004556:	4ac3      	ldr	r2, [pc, #780]	; (8004864 <_dtoa_r+0x644>)
 8004558:	f00a 030f 	and.w	r3, sl, #15
 800455c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004560:	ed93 7b00 	vldr	d7, [r3]
 8004564:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004568:	ea4f 172a 	mov.w	r7, sl, asr #4
 800456c:	eeb0 8a47 	vmov.f32	s16, s14
 8004570:	eef0 8a67 	vmov.f32	s17, s15
 8004574:	d016      	beq.n	80045a4 <_dtoa_r+0x384>
 8004576:	4bbc      	ldr	r3, [pc, #752]	; (8004868 <_dtoa_r+0x648>)
 8004578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800457c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004580:	f7fc f964 	bl	800084c <__aeabi_ddiv>
 8004584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004588:	f007 070f 	and.w	r7, r7, #15
 800458c:	2503      	movs	r5, #3
 800458e:	4eb6      	ldr	r6, [pc, #728]	; (8004868 <_dtoa_r+0x648>)
 8004590:	b957      	cbnz	r7, 80045a8 <_dtoa_r+0x388>
 8004592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004596:	ec53 2b18 	vmov	r2, r3, d8
 800459a:	f7fc f957 	bl	800084c <__aeabi_ddiv>
 800459e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045a2:	e029      	b.n	80045f8 <_dtoa_r+0x3d8>
 80045a4:	2502      	movs	r5, #2
 80045a6:	e7f2      	b.n	800458e <_dtoa_r+0x36e>
 80045a8:	07f9      	lsls	r1, r7, #31
 80045aa:	d508      	bpl.n	80045be <_dtoa_r+0x39e>
 80045ac:	ec51 0b18 	vmov	r0, r1, d8
 80045b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80045b4:	f7fc f820 	bl	80005f8 <__aeabi_dmul>
 80045b8:	ec41 0b18 	vmov	d8, r0, r1
 80045bc:	3501      	adds	r5, #1
 80045be:	107f      	asrs	r7, r7, #1
 80045c0:	3608      	adds	r6, #8
 80045c2:	e7e5      	b.n	8004590 <_dtoa_r+0x370>
 80045c4:	f000 80a6 	beq.w	8004714 <_dtoa_r+0x4f4>
 80045c8:	f1ca 0600 	rsb	r6, sl, #0
 80045cc:	4ba5      	ldr	r3, [pc, #660]	; (8004864 <_dtoa_r+0x644>)
 80045ce:	4fa6      	ldr	r7, [pc, #664]	; (8004868 <_dtoa_r+0x648>)
 80045d0:	f006 020f 	and.w	r2, r6, #15
 80045d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045e0:	f7fc f80a 	bl	80005f8 <__aeabi_dmul>
 80045e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e8:	1136      	asrs	r6, r6, #4
 80045ea:	2300      	movs	r3, #0
 80045ec:	2502      	movs	r5, #2
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	f040 8085 	bne.w	80046fe <_dtoa_r+0x4de>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1d2      	bne.n	800459e <_dtoa_r+0x37e>
 80045f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 808c 	beq.w	8004718 <_dtoa_r+0x4f8>
 8004600:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004604:	4b99      	ldr	r3, [pc, #612]	; (800486c <_dtoa_r+0x64c>)
 8004606:	2200      	movs	r2, #0
 8004608:	4630      	mov	r0, r6
 800460a:	4639      	mov	r1, r7
 800460c:	f7fc fa66 	bl	8000adc <__aeabi_dcmplt>
 8004610:	2800      	cmp	r0, #0
 8004612:	f000 8081 	beq.w	8004718 <_dtoa_r+0x4f8>
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d07d      	beq.n	8004718 <_dtoa_r+0x4f8>
 800461c:	f1b9 0f00 	cmp.w	r9, #0
 8004620:	dd3c      	ble.n	800469c <_dtoa_r+0x47c>
 8004622:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004626:	9307      	str	r3, [sp, #28]
 8004628:	2200      	movs	r2, #0
 800462a:	4b91      	ldr	r3, [pc, #580]	; (8004870 <_dtoa_r+0x650>)
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fb ffe2 	bl	80005f8 <__aeabi_dmul>
 8004634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004638:	3501      	adds	r5, #1
 800463a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800463e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004642:	4628      	mov	r0, r5
 8004644:	f7fb ff6e 	bl	8000524 <__aeabi_i2d>
 8004648:	4632      	mov	r2, r6
 800464a:	463b      	mov	r3, r7
 800464c:	f7fb ffd4 	bl	80005f8 <__aeabi_dmul>
 8004650:	4b88      	ldr	r3, [pc, #544]	; (8004874 <_dtoa_r+0x654>)
 8004652:	2200      	movs	r2, #0
 8004654:	f7fb fe1a 	bl	800028c <__adddf3>
 8004658:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800465c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	d15c      	bne.n	8004722 <_dtoa_r+0x502>
 8004668:	4b83      	ldr	r3, [pc, #524]	; (8004878 <_dtoa_r+0x658>)
 800466a:	2200      	movs	r2, #0
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	f7fb fe0a 	bl	8000288 <__aeabi_dsub>
 8004674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	f7fc fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8004680:	2800      	cmp	r0, #0
 8004682:	f040 8296 	bne.w	8004bb2 <_dtoa_r+0x992>
 8004686:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800468a:	4630      	mov	r0, r6
 800468c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004690:	4639      	mov	r1, r7
 8004692:	f7fc fa23 	bl	8000adc <__aeabi_dcmplt>
 8004696:	2800      	cmp	r0, #0
 8004698:	f040 8288 	bne.w	8004bac <_dtoa_r+0x98c>
 800469c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f2c0 8158 	blt.w	800495c <_dtoa_r+0x73c>
 80046ac:	f1ba 0f0e 	cmp.w	sl, #14
 80046b0:	f300 8154 	bgt.w	800495c <_dtoa_r+0x73c>
 80046b4:	4b6b      	ldr	r3, [pc, #428]	; (8004864 <_dtoa_r+0x644>)
 80046b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80046ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f280 80e3 	bge.w	800488c <_dtoa_r+0x66c>
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f300 80df 	bgt.w	800488c <_dtoa_r+0x66c>
 80046ce:	f040 826d 	bne.w	8004bac <_dtoa_r+0x98c>
 80046d2:	4b69      	ldr	r3, [pc, #420]	; (8004878 <_dtoa_r+0x658>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	4640      	mov	r0, r8
 80046d8:	4649      	mov	r1, r9
 80046da:	f7fb ff8d 	bl	80005f8 <__aeabi_dmul>
 80046de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046e2:	f7fc fa0f 	bl	8000b04 <__aeabi_dcmpge>
 80046e6:	9e01      	ldr	r6, [sp, #4]
 80046e8:	4637      	mov	r7, r6
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 8243 	bne.w	8004b76 <_dtoa_r+0x956>
 80046f0:	9d00      	ldr	r5, [sp, #0]
 80046f2:	2331      	movs	r3, #49	; 0x31
 80046f4:	f805 3b01 	strb.w	r3, [r5], #1
 80046f8:	f10a 0a01 	add.w	sl, sl, #1
 80046fc:	e23f      	b.n	8004b7e <_dtoa_r+0x95e>
 80046fe:	07f2      	lsls	r2, r6, #31
 8004700:	d505      	bpl.n	800470e <_dtoa_r+0x4ee>
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004706:	f7fb ff77 	bl	80005f8 <__aeabi_dmul>
 800470a:	3501      	adds	r5, #1
 800470c:	2301      	movs	r3, #1
 800470e:	1076      	asrs	r6, r6, #1
 8004710:	3708      	adds	r7, #8
 8004712:	e76c      	b.n	80045ee <_dtoa_r+0x3ce>
 8004714:	2502      	movs	r5, #2
 8004716:	e76f      	b.n	80045f8 <_dtoa_r+0x3d8>
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	f8cd a01c 	str.w	sl, [sp, #28]
 800471e:	930c      	str	r3, [sp, #48]	; 0x30
 8004720:	e78d      	b.n	800463e <_dtoa_r+0x41e>
 8004722:	9900      	ldr	r1, [sp, #0]
 8004724:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004728:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <_dtoa_r+0x644>)
 800472a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800472e:	4401      	add	r1, r0
 8004730:	9102      	str	r1, [sp, #8]
 8004732:	9908      	ldr	r1, [sp, #32]
 8004734:	eeb0 8a47 	vmov.f32	s16, s14
 8004738:	eef0 8a67 	vmov.f32	s17, s15
 800473c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004740:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004744:	2900      	cmp	r1, #0
 8004746:	d045      	beq.n	80047d4 <_dtoa_r+0x5b4>
 8004748:	494c      	ldr	r1, [pc, #304]	; (800487c <_dtoa_r+0x65c>)
 800474a:	2000      	movs	r0, #0
 800474c:	f7fc f87e 	bl	800084c <__aeabi_ddiv>
 8004750:	ec53 2b18 	vmov	r2, r3, d8
 8004754:	f7fb fd98 	bl	8000288 <__aeabi_dsub>
 8004758:	9d00      	ldr	r5, [sp, #0]
 800475a:	ec41 0b18 	vmov	d8, r0, r1
 800475e:	4639      	mov	r1, r7
 8004760:	4630      	mov	r0, r6
 8004762:	f7fc f9f9 	bl	8000b58 <__aeabi_d2iz>
 8004766:	900c      	str	r0, [sp, #48]	; 0x30
 8004768:	f7fb fedc 	bl	8000524 <__aeabi_i2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4630      	mov	r0, r6
 8004772:	4639      	mov	r1, r7
 8004774:	f7fb fd88 	bl	8000288 <__aeabi_dsub>
 8004778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800477a:	3330      	adds	r3, #48	; 0x30
 800477c:	f805 3b01 	strb.w	r3, [r5], #1
 8004780:	ec53 2b18 	vmov	r2, r3, d8
 8004784:	4606      	mov	r6, r0
 8004786:	460f      	mov	r7, r1
 8004788:	f7fc f9a8 	bl	8000adc <__aeabi_dcmplt>
 800478c:	2800      	cmp	r0, #0
 800478e:	d165      	bne.n	800485c <_dtoa_r+0x63c>
 8004790:	4632      	mov	r2, r6
 8004792:	463b      	mov	r3, r7
 8004794:	4935      	ldr	r1, [pc, #212]	; (800486c <_dtoa_r+0x64c>)
 8004796:	2000      	movs	r0, #0
 8004798:	f7fb fd76 	bl	8000288 <__aeabi_dsub>
 800479c:	ec53 2b18 	vmov	r2, r3, d8
 80047a0:	f7fc f99c 	bl	8000adc <__aeabi_dcmplt>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	f040 80b9 	bne.w	800491c <_dtoa_r+0x6fc>
 80047aa:	9b02      	ldr	r3, [sp, #8]
 80047ac:	429d      	cmp	r5, r3
 80047ae:	f43f af75 	beq.w	800469c <_dtoa_r+0x47c>
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <_dtoa_r+0x650>)
 80047b4:	ec51 0b18 	vmov	r0, r1, d8
 80047b8:	2200      	movs	r2, #0
 80047ba:	f7fb ff1d 	bl	80005f8 <__aeabi_dmul>
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <_dtoa_r+0x650>)
 80047c0:	ec41 0b18 	vmov	d8, r0, r1
 80047c4:	2200      	movs	r2, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	f7fb ff15 	bl	80005f8 <__aeabi_dmul>
 80047ce:	4606      	mov	r6, r0
 80047d0:	460f      	mov	r7, r1
 80047d2:	e7c4      	b.n	800475e <_dtoa_r+0x53e>
 80047d4:	ec51 0b17 	vmov	r0, r1, d7
 80047d8:	f7fb ff0e 	bl	80005f8 <__aeabi_dmul>
 80047dc:	9b02      	ldr	r3, [sp, #8]
 80047de:	9d00      	ldr	r5, [sp, #0]
 80047e0:	930c      	str	r3, [sp, #48]	; 0x30
 80047e2:	ec41 0b18 	vmov	d8, r0, r1
 80047e6:	4639      	mov	r1, r7
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7fc f9b5 	bl	8000b58 <__aeabi_d2iz>
 80047ee:	9011      	str	r0, [sp, #68]	; 0x44
 80047f0:	f7fb fe98 	bl	8000524 <__aeabi_i2d>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fb fd44 	bl	8000288 <__aeabi_dsub>
 8004800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004802:	3330      	adds	r3, #48	; 0x30
 8004804:	f805 3b01 	strb.w	r3, [r5], #1
 8004808:	9b02      	ldr	r3, [sp, #8]
 800480a:	429d      	cmp	r5, r3
 800480c:	4606      	mov	r6, r0
 800480e:	460f      	mov	r7, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	d134      	bne.n	8004880 <_dtoa_r+0x660>
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <_dtoa_r+0x65c>)
 8004818:	ec51 0b18 	vmov	r0, r1, d8
 800481c:	f7fb fd36 	bl	800028c <__adddf3>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4630      	mov	r0, r6
 8004826:	4639      	mov	r1, r7
 8004828:	f7fc f976 	bl	8000b18 <__aeabi_dcmpgt>
 800482c:	2800      	cmp	r0, #0
 800482e:	d175      	bne.n	800491c <_dtoa_r+0x6fc>
 8004830:	ec53 2b18 	vmov	r2, r3, d8
 8004834:	4911      	ldr	r1, [pc, #68]	; (800487c <_dtoa_r+0x65c>)
 8004836:	2000      	movs	r0, #0
 8004838:	f7fb fd26 	bl	8000288 <__aeabi_dsub>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4630      	mov	r0, r6
 8004842:	4639      	mov	r1, r7
 8004844:	f7fc f94a 	bl	8000adc <__aeabi_dcmplt>
 8004848:	2800      	cmp	r0, #0
 800484a:	f43f af27 	beq.w	800469c <_dtoa_r+0x47c>
 800484e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004850:	1e6b      	subs	r3, r5, #1
 8004852:	930c      	str	r3, [sp, #48]	; 0x30
 8004854:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004858:	2b30      	cmp	r3, #48	; 0x30
 800485a:	d0f8      	beq.n	800484e <_dtoa_r+0x62e>
 800485c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004860:	e04a      	b.n	80048f8 <_dtoa_r+0x6d8>
 8004862:	bf00      	nop
 8004864:	08005f40 	.word	0x08005f40
 8004868:	08005f18 	.word	0x08005f18
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	40240000 	.word	0x40240000
 8004874:	401c0000 	.word	0x401c0000
 8004878:	40140000 	.word	0x40140000
 800487c:	3fe00000 	.word	0x3fe00000
 8004880:	4baf      	ldr	r3, [pc, #700]	; (8004b40 <_dtoa_r+0x920>)
 8004882:	f7fb feb9 	bl	80005f8 <__aeabi_dmul>
 8004886:	4606      	mov	r6, r0
 8004888:	460f      	mov	r7, r1
 800488a:	e7ac      	b.n	80047e6 <_dtoa_r+0x5c6>
 800488c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004890:	9d00      	ldr	r5, [sp, #0]
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	4630      	mov	r0, r6
 8004898:	4639      	mov	r1, r7
 800489a:	f7fb ffd7 	bl	800084c <__aeabi_ddiv>
 800489e:	f7fc f95b 	bl	8000b58 <__aeabi_d2iz>
 80048a2:	9002      	str	r0, [sp, #8]
 80048a4:	f7fb fe3e 	bl	8000524 <__aeabi_i2d>
 80048a8:	4642      	mov	r2, r8
 80048aa:	464b      	mov	r3, r9
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4630      	mov	r0, r6
 80048b6:	4639      	mov	r1, r7
 80048b8:	f7fb fce6 	bl	8000288 <__aeabi_dsub>
 80048bc:	9e02      	ldr	r6, [sp, #8]
 80048be:	9f01      	ldr	r7, [sp, #4]
 80048c0:	3630      	adds	r6, #48	; 0x30
 80048c2:	f805 6b01 	strb.w	r6, [r5], #1
 80048c6:	9e00      	ldr	r6, [sp, #0]
 80048c8:	1bae      	subs	r6, r5, r6
 80048ca:	42b7      	cmp	r7, r6
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	d137      	bne.n	8004942 <_dtoa_r+0x722>
 80048d2:	f7fb fcdb 	bl	800028c <__adddf3>
 80048d6:	4642      	mov	r2, r8
 80048d8:	464b      	mov	r3, r9
 80048da:	4606      	mov	r6, r0
 80048dc:	460f      	mov	r7, r1
 80048de:	f7fc f91b 	bl	8000b18 <__aeabi_dcmpgt>
 80048e2:	b9c8      	cbnz	r0, 8004918 <_dtoa_r+0x6f8>
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fc f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80048f0:	b110      	cbz	r0, 80048f8 <_dtoa_r+0x6d8>
 80048f2:	9b02      	ldr	r3, [sp, #8]
 80048f4:	07d9      	lsls	r1, r3, #31
 80048f6:	d40f      	bmi.n	8004918 <_dtoa_r+0x6f8>
 80048f8:	4620      	mov	r0, r4
 80048fa:	4659      	mov	r1, fp
 80048fc:	f000 fc1e 	bl	800513c <_Bfree>
 8004900:	2300      	movs	r3, #0
 8004902:	702b      	strb	r3, [r5, #0]
 8004904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004906:	f10a 0001 	add.w	r0, sl, #1
 800490a:	6018      	str	r0, [r3, #0]
 800490c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800490e:	2b00      	cmp	r3, #0
 8004910:	f43f acd8 	beq.w	80042c4 <_dtoa_r+0xa4>
 8004914:	601d      	str	r5, [r3, #0]
 8004916:	e4d5      	b.n	80042c4 <_dtoa_r+0xa4>
 8004918:	f8cd a01c 	str.w	sl, [sp, #28]
 800491c:	462b      	mov	r3, r5
 800491e:	461d      	mov	r5, r3
 8004920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004924:	2a39      	cmp	r2, #57	; 0x39
 8004926:	d108      	bne.n	800493a <_dtoa_r+0x71a>
 8004928:	9a00      	ldr	r2, [sp, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d1f7      	bne.n	800491e <_dtoa_r+0x6fe>
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	9900      	ldr	r1, [sp, #0]
 8004932:	3201      	adds	r2, #1
 8004934:	9207      	str	r2, [sp, #28]
 8004936:	2230      	movs	r2, #48	; 0x30
 8004938:	700a      	strb	r2, [r1, #0]
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	3201      	adds	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e78c      	b.n	800485c <_dtoa_r+0x63c>
 8004942:	4b7f      	ldr	r3, [pc, #508]	; (8004b40 <_dtoa_r+0x920>)
 8004944:	2200      	movs	r2, #0
 8004946:	f7fb fe57 	bl	80005f8 <__aeabi_dmul>
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	4606      	mov	r6, r0
 8004950:	460f      	mov	r7, r1
 8004952:	f7fc f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004956:	2800      	cmp	r0, #0
 8004958:	d09b      	beq.n	8004892 <_dtoa_r+0x672>
 800495a:	e7cd      	b.n	80048f8 <_dtoa_r+0x6d8>
 800495c:	9a08      	ldr	r2, [sp, #32]
 800495e:	2a00      	cmp	r2, #0
 8004960:	f000 80c4 	beq.w	8004aec <_dtoa_r+0x8cc>
 8004964:	9a05      	ldr	r2, [sp, #20]
 8004966:	2a01      	cmp	r2, #1
 8004968:	f300 80a8 	bgt.w	8004abc <_dtoa_r+0x89c>
 800496c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800496e:	2a00      	cmp	r2, #0
 8004970:	f000 80a0 	beq.w	8004ab4 <_dtoa_r+0x894>
 8004974:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004978:	9e06      	ldr	r6, [sp, #24]
 800497a:	4645      	mov	r5, r8
 800497c:	9a04      	ldr	r2, [sp, #16]
 800497e:	2101      	movs	r1, #1
 8004980:	441a      	add	r2, r3
 8004982:	4620      	mov	r0, r4
 8004984:	4498      	add	r8, r3
 8004986:	9204      	str	r2, [sp, #16]
 8004988:	f000 fc94 	bl	80052b4 <__i2b>
 800498c:	4607      	mov	r7, r0
 800498e:	2d00      	cmp	r5, #0
 8004990:	dd0b      	ble.n	80049aa <_dtoa_r+0x78a>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	dd08      	ble.n	80049aa <_dtoa_r+0x78a>
 8004998:	42ab      	cmp	r3, r5
 800499a:	9a04      	ldr	r2, [sp, #16]
 800499c:	bfa8      	it	ge
 800499e:	462b      	movge	r3, r5
 80049a0:	eba8 0803 	sub.w	r8, r8, r3
 80049a4:	1aed      	subs	r5, r5, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	b1fb      	cbz	r3, 80049ee <_dtoa_r+0x7ce>
 80049ae:	9b08      	ldr	r3, [sp, #32]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 809f 	beq.w	8004af4 <_dtoa_r+0x8d4>
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	dd11      	ble.n	80049de <_dtoa_r+0x7be>
 80049ba:	4639      	mov	r1, r7
 80049bc:	4632      	mov	r2, r6
 80049be:	4620      	mov	r0, r4
 80049c0:	f000 fd34 	bl	800542c <__pow5mult>
 80049c4:	465a      	mov	r2, fp
 80049c6:	4601      	mov	r1, r0
 80049c8:	4607      	mov	r7, r0
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 fc88 	bl	80052e0 <__multiply>
 80049d0:	4659      	mov	r1, fp
 80049d2:	9007      	str	r0, [sp, #28]
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fbb1 	bl	800513c <_Bfree>
 80049da:	9b07      	ldr	r3, [sp, #28]
 80049dc:	469b      	mov	fp, r3
 80049de:	9b06      	ldr	r3, [sp, #24]
 80049e0:	1b9a      	subs	r2, r3, r6
 80049e2:	d004      	beq.n	80049ee <_dtoa_r+0x7ce>
 80049e4:	4659      	mov	r1, fp
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 fd20 	bl	800542c <__pow5mult>
 80049ec:	4683      	mov	fp, r0
 80049ee:	2101      	movs	r1, #1
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 fc5f 	bl	80052b4 <__i2b>
 80049f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	4606      	mov	r6, r0
 80049fc:	dd7c      	ble.n	8004af8 <_dtoa_r+0x8d8>
 80049fe:	461a      	mov	r2, r3
 8004a00:	4601      	mov	r1, r0
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 fd12 	bl	800542c <__pow5mult>
 8004a08:	9b05      	ldr	r3, [sp, #20]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	dd76      	ble.n	8004afe <_dtoa_r+0x8de>
 8004a10:	2300      	movs	r3, #0
 8004a12:	9306      	str	r3, [sp, #24]
 8004a14:	6933      	ldr	r3, [r6, #16]
 8004a16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a1a:	6918      	ldr	r0, [r3, #16]
 8004a1c:	f000 fbfa 	bl	8005214 <__hi0bits>
 8004a20:	f1c0 0020 	rsb	r0, r0, #32
 8004a24:	9b04      	ldr	r3, [sp, #16]
 8004a26:	4418      	add	r0, r3
 8004a28:	f010 001f 	ands.w	r0, r0, #31
 8004a2c:	f000 8086 	beq.w	8004b3c <_dtoa_r+0x91c>
 8004a30:	f1c0 0320 	rsb	r3, r0, #32
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	dd7f      	ble.n	8004b38 <_dtoa_r+0x918>
 8004a38:	f1c0 001c 	rsb	r0, r0, #28
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	4403      	add	r3, r0
 8004a40:	4480      	add	r8, r0
 8004a42:	4405      	add	r5, r0
 8004a44:	9304      	str	r3, [sp, #16]
 8004a46:	f1b8 0f00 	cmp.w	r8, #0
 8004a4a:	dd05      	ble.n	8004a58 <_dtoa_r+0x838>
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	4642      	mov	r2, r8
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fd45 	bl	80054e0 <__lshift>
 8004a56:	4683      	mov	fp, r0
 8004a58:	9b04      	ldr	r3, [sp, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	dd05      	ble.n	8004a6a <_dtoa_r+0x84a>
 8004a5e:	4631      	mov	r1, r6
 8004a60:	461a      	mov	r2, r3
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 fd3c 	bl	80054e0 <__lshift>
 8004a68:	4606      	mov	r6, r0
 8004a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d069      	beq.n	8004b44 <_dtoa_r+0x924>
 8004a70:	4631      	mov	r1, r6
 8004a72:	4658      	mov	r0, fp
 8004a74:	f000 fda0 	bl	80055b8 <__mcmp>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	da63      	bge.n	8004b44 <_dtoa_r+0x924>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4659      	mov	r1, fp
 8004a80:	220a      	movs	r2, #10
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 fb7c 	bl	8005180 <__multadd>
 8004a88:	9b08      	ldr	r3, [sp, #32]
 8004a8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a8e:	4683      	mov	fp, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 818f 	beq.w	8004db4 <_dtoa_r+0xb94>
 8004a96:	4639      	mov	r1, r7
 8004a98:	2300      	movs	r3, #0
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 fb6f 	bl	8005180 <__multadd>
 8004aa2:	f1b9 0f00 	cmp.w	r9, #0
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	f300 808e 	bgt.w	8004bc8 <_dtoa_r+0x9a8>
 8004aac:	9b05      	ldr	r3, [sp, #20]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	dc50      	bgt.n	8004b54 <_dtoa_r+0x934>
 8004ab2:	e089      	b.n	8004bc8 <_dtoa_r+0x9a8>
 8004ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004aba:	e75d      	b.n	8004978 <_dtoa_r+0x758>
 8004abc:	9b01      	ldr	r3, [sp, #4]
 8004abe:	1e5e      	subs	r6, r3, #1
 8004ac0:	9b06      	ldr	r3, [sp, #24]
 8004ac2:	42b3      	cmp	r3, r6
 8004ac4:	bfbf      	itttt	lt
 8004ac6:	9b06      	ldrlt	r3, [sp, #24]
 8004ac8:	9606      	strlt	r6, [sp, #24]
 8004aca:	1af2      	sublt	r2, r6, r3
 8004acc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004ace:	bfb6      	itet	lt
 8004ad0:	189b      	addlt	r3, r3, r2
 8004ad2:	1b9e      	subge	r6, r3, r6
 8004ad4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004ad6:	9b01      	ldr	r3, [sp, #4]
 8004ad8:	bfb8      	it	lt
 8004ada:	2600      	movlt	r6, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfb5      	itete	lt
 8004ae0:	eba8 0503 	sublt.w	r5, r8, r3
 8004ae4:	9b01      	ldrge	r3, [sp, #4]
 8004ae6:	2300      	movlt	r3, #0
 8004ae8:	4645      	movge	r5, r8
 8004aea:	e747      	b.n	800497c <_dtoa_r+0x75c>
 8004aec:	9e06      	ldr	r6, [sp, #24]
 8004aee:	9f08      	ldr	r7, [sp, #32]
 8004af0:	4645      	mov	r5, r8
 8004af2:	e74c      	b.n	800498e <_dtoa_r+0x76e>
 8004af4:	9a06      	ldr	r2, [sp, #24]
 8004af6:	e775      	b.n	80049e4 <_dtoa_r+0x7c4>
 8004af8:	9b05      	ldr	r3, [sp, #20]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	dc18      	bgt.n	8004b30 <_dtoa_r+0x910>
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	b9b3      	cbnz	r3, 8004b30 <_dtoa_r+0x910>
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b08:	b9a3      	cbnz	r3, 8004b34 <_dtoa_r+0x914>
 8004b0a:	9b03      	ldr	r3, [sp, #12]
 8004b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	051b      	lsls	r3, r3, #20
 8004b14:	b12b      	cbz	r3, 8004b22 <_dtoa_r+0x902>
 8004b16:	9b04      	ldr	r3, [sp, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	f108 0801 	add.w	r8, r8, #1
 8004b20:	2301      	movs	r3, #1
 8004b22:	9306      	str	r3, [sp, #24]
 8004b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f47f af74 	bne.w	8004a14 <_dtoa_r+0x7f4>
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	e779      	b.n	8004a24 <_dtoa_r+0x804>
 8004b30:	2300      	movs	r3, #0
 8004b32:	e7f6      	b.n	8004b22 <_dtoa_r+0x902>
 8004b34:	9b02      	ldr	r3, [sp, #8]
 8004b36:	e7f4      	b.n	8004b22 <_dtoa_r+0x902>
 8004b38:	d085      	beq.n	8004a46 <_dtoa_r+0x826>
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	301c      	adds	r0, #28
 8004b3e:	e77d      	b.n	8004a3c <_dtoa_r+0x81c>
 8004b40:	40240000 	.word	0x40240000
 8004b44:	9b01      	ldr	r3, [sp, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	dc38      	bgt.n	8004bbc <_dtoa_r+0x99c>
 8004b4a:	9b05      	ldr	r3, [sp, #20]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	dd35      	ble.n	8004bbc <_dtoa_r+0x99c>
 8004b50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004b54:	f1b9 0f00 	cmp.w	r9, #0
 8004b58:	d10d      	bne.n	8004b76 <_dtoa_r+0x956>
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	2205      	movs	r2, #5
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fb0d 	bl	8005180 <__multadd>
 8004b66:	4601      	mov	r1, r0
 8004b68:	4606      	mov	r6, r0
 8004b6a:	4658      	mov	r0, fp
 8004b6c:	f000 fd24 	bl	80055b8 <__mcmp>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f73f adbd 	bgt.w	80046f0 <_dtoa_r+0x4d0>
 8004b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b78:	9d00      	ldr	r5, [sp, #0]
 8004b7a:	ea6f 0a03 	mvn.w	sl, r3
 8004b7e:	f04f 0800 	mov.w	r8, #0
 8004b82:	4631      	mov	r1, r6
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 fad9 	bl	800513c <_Bfree>
 8004b8a:	2f00      	cmp	r7, #0
 8004b8c:	f43f aeb4 	beq.w	80048f8 <_dtoa_r+0x6d8>
 8004b90:	f1b8 0f00 	cmp.w	r8, #0
 8004b94:	d005      	beq.n	8004ba2 <_dtoa_r+0x982>
 8004b96:	45b8      	cmp	r8, r7
 8004b98:	d003      	beq.n	8004ba2 <_dtoa_r+0x982>
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f000 facd 	bl	800513c <_Bfree>
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 fac9 	bl	800513c <_Bfree>
 8004baa:	e6a5      	b.n	80048f8 <_dtoa_r+0x6d8>
 8004bac:	2600      	movs	r6, #0
 8004bae:	4637      	mov	r7, r6
 8004bb0:	e7e1      	b.n	8004b76 <_dtoa_r+0x956>
 8004bb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004bb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004bb8:	4637      	mov	r7, r6
 8004bba:	e599      	b.n	80046f0 <_dtoa_r+0x4d0>
 8004bbc:	9b08      	ldr	r3, [sp, #32]
 8004bbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80fd 	beq.w	8004dc2 <_dtoa_r+0xba2>
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	dd05      	ble.n	8004bd8 <_dtoa_r+0x9b8>
 8004bcc:	4639      	mov	r1, r7
 8004bce:	462a      	mov	r2, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f000 fc85 	bl	80054e0 <__lshift>
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	9b06      	ldr	r3, [sp, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d05c      	beq.n	8004c98 <_dtoa_r+0xa78>
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fa6b 	bl	80050bc <_Balloc>
 8004be6:	4605      	mov	r5, r0
 8004be8:	b928      	cbnz	r0, 8004bf6 <_dtoa_r+0x9d6>
 8004bea:	4b80      	ldr	r3, [pc, #512]	; (8004dec <_dtoa_r+0xbcc>)
 8004bec:	4602      	mov	r2, r0
 8004bee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004bf2:	f7ff bb2e 	b.w	8004252 <_dtoa_r+0x32>
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	3202      	adds	r2, #2
 8004bfa:	0092      	lsls	r2, r2, #2
 8004bfc:	f107 010c 	add.w	r1, r7, #12
 8004c00:	300c      	adds	r0, #12
 8004c02:	f7fe fbc4 	bl	800338e <memcpy>
 8004c06:	2201      	movs	r2, #1
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 fc68 	bl	80054e0 <__lshift>
 8004c10:	9b00      	ldr	r3, [sp, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	9b00      	ldr	r3, [sp, #0]
 8004c18:	444b      	add	r3, r9
 8004c1a:	9307      	str	r3, [sp, #28]
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	46b8      	mov	r8, r7
 8004c24:	9306      	str	r3, [sp, #24]
 8004c26:	4607      	mov	r7, r0
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	4658      	mov	r0, fp
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	f7ff fa69 	bl	8004108 <quorem>
 8004c36:	4603      	mov	r3, r0
 8004c38:	3330      	adds	r3, #48	; 0x30
 8004c3a:	9004      	str	r0, [sp, #16]
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	4658      	mov	r0, fp
 8004c40:	9308      	str	r3, [sp, #32]
 8004c42:	f000 fcb9 	bl	80055b8 <__mcmp>
 8004c46:	463a      	mov	r2, r7
 8004c48:	4681      	mov	r9, r0
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 fccf 	bl	80055f0 <__mdiff>
 8004c52:	68c2      	ldr	r2, [r0, #12]
 8004c54:	9b08      	ldr	r3, [sp, #32]
 8004c56:	4605      	mov	r5, r0
 8004c58:	bb02      	cbnz	r2, 8004c9c <_dtoa_r+0xa7c>
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	4658      	mov	r0, fp
 8004c5e:	f000 fcab 	bl	80055b8 <__mcmp>
 8004c62:	9b08      	ldr	r3, [sp, #32]
 8004c64:	4602      	mov	r2, r0
 8004c66:	4629      	mov	r1, r5
 8004c68:	4620      	mov	r0, r4
 8004c6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004c6e:	f000 fa65 	bl	800513c <_Bfree>
 8004c72:	9b05      	ldr	r3, [sp, #20]
 8004c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c76:	9d01      	ldr	r5, [sp, #4]
 8004c78:	ea43 0102 	orr.w	r1, r3, r2
 8004c7c:	9b06      	ldr	r3, [sp, #24]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	9b08      	ldr	r3, [sp, #32]
 8004c82:	d10d      	bne.n	8004ca0 <_dtoa_r+0xa80>
 8004c84:	2b39      	cmp	r3, #57	; 0x39
 8004c86:	d029      	beq.n	8004cdc <_dtoa_r+0xabc>
 8004c88:	f1b9 0f00 	cmp.w	r9, #0
 8004c8c:	dd01      	ble.n	8004c92 <_dtoa_r+0xa72>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	3331      	adds	r3, #49	; 0x31
 8004c92:	9a02      	ldr	r2, [sp, #8]
 8004c94:	7013      	strb	r3, [r2, #0]
 8004c96:	e774      	b.n	8004b82 <_dtoa_r+0x962>
 8004c98:	4638      	mov	r0, r7
 8004c9a:	e7b9      	b.n	8004c10 <_dtoa_r+0x9f0>
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	e7e2      	b.n	8004c66 <_dtoa_r+0xa46>
 8004ca0:	f1b9 0f00 	cmp.w	r9, #0
 8004ca4:	db06      	blt.n	8004cb4 <_dtoa_r+0xa94>
 8004ca6:	9905      	ldr	r1, [sp, #20]
 8004ca8:	ea41 0909 	orr.w	r9, r1, r9
 8004cac:	9906      	ldr	r1, [sp, #24]
 8004cae:	ea59 0101 	orrs.w	r1, r9, r1
 8004cb2:	d120      	bne.n	8004cf6 <_dtoa_r+0xad6>
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	ddec      	ble.n	8004c92 <_dtoa_r+0xa72>
 8004cb8:	4659      	mov	r1, fp
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	f000 fc0e 	bl	80054e0 <__lshift>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4683      	mov	fp, r0
 8004cc8:	f000 fc76 	bl	80055b8 <__mcmp>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	dc02      	bgt.n	8004cd8 <_dtoa_r+0xab8>
 8004cd2:	d1de      	bne.n	8004c92 <_dtoa_r+0xa72>
 8004cd4:	07da      	lsls	r2, r3, #31
 8004cd6:	d5dc      	bpl.n	8004c92 <_dtoa_r+0xa72>
 8004cd8:	2b39      	cmp	r3, #57	; 0x39
 8004cda:	d1d8      	bne.n	8004c8e <_dtoa_r+0xa6e>
 8004cdc:	9a02      	ldr	r2, [sp, #8]
 8004cde:	2339      	movs	r3, #57	; 0x39
 8004ce0:	7013      	strb	r3, [r2, #0]
 8004ce2:	462b      	mov	r3, r5
 8004ce4:	461d      	mov	r5, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004cec:	2a39      	cmp	r2, #57	; 0x39
 8004cee:	d050      	beq.n	8004d92 <_dtoa_r+0xb72>
 8004cf0:	3201      	adds	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e745      	b.n	8004b82 <_dtoa_r+0x962>
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	dd03      	ble.n	8004d02 <_dtoa_r+0xae2>
 8004cfa:	2b39      	cmp	r3, #57	; 0x39
 8004cfc:	d0ee      	beq.n	8004cdc <_dtoa_r+0xabc>
 8004cfe:	3301      	adds	r3, #1
 8004d00:	e7c7      	b.n	8004c92 <_dtoa_r+0xa72>
 8004d02:	9a01      	ldr	r2, [sp, #4]
 8004d04:	9907      	ldr	r1, [sp, #28]
 8004d06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d0a:	428a      	cmp	r2, r1
 8004d0c:	d02a      	beq.n	8004d64 <_dtoa_r+0xb44>
 8004d0e:	4659      	mov	r1, fp
 8004d10:	2300      	movs	r3, #0
 8004d12:	220a      	movs	r2, #10
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 fa33 	bl	8005180 <__multadd>
 8004d1a:	45b8      	cmp	r8, r7
 8004d1c:	4683      	mov	fp, r0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	f04f 020a 	mov.w	r2, #10
 8004d26:	4641      	mov	r1, r8
 8004d28:	4620      	mov	r0, r4
 8004d2a:	d107      	bne.n	8004d3c <_dtoa_r+0xb1c>
 8004d2c:	f000 fa28 	bl	8005180 <__multadd>
 8004d30:	4680      	mov	r8, r0
 8004d32:	4607      	mov	r7, r0
 8004d34:	9b01      	ldr	r3, [sp, #4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	e775      	b.n	8004c28 <_dtoa_r+0xa08>
 8004d3c:	f000 fa20 	bl	8005180 <__multadd>
 8004d40:	4639      	mov	r1, r7
 8004d42:	4680      	mov	r8, r0
 8004d44:	2300      	movs	r3, #0
 8004d46:	220a      	movs	r2, #10
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fa19 	bl	8005180 <__multadd>
 8004d4e:	4607      	mov	r7, r0
 8004d50:	e7f0      	b.n	8004d34 <_dtoa_r+0xb14>
 8004d52:	f1b9 0f00 	cmp.w	r9, #0
 8004d56:	9a00      	ldr	r2, [sp, #0]
 8004d58:	bfcc      	ite	gt
 8004d5a:	464d      	movgt	r5, r9
 8004d5c:	2501      	movle	r5, #1
 8004d5e:	4415      	add	r5, r2
 8004d60:	f04f 0800 	mov.w	r8, #0
 8004d64:	4659      	mov	r1, fp
 8004d66:	2201      	movs	r2, #1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	f000 fbb8 	bl	80054e0 <__lshift>
 8004d70:	4631      	mov	r1, r6
 8004d72:	4683      	mov	fp, r0
 8004d74:	f000 fc20 	bl	80055b8 <__mcmp>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	dcb2      	bgt.n	8004ce2 <_dtoa_r+0xac2>
 8004d7c:	d102      	bne.n	8004d84 <_dtoa_r+0xb64>
 8004d7e:	9b01      	ldr	r3, [sp, #4]
 8004d80:	07db      	lsls	r3, r3, #31
 8004d82:	d4ae      	bmi.n	8004ce2 <_dtoa_r+0xac2>
 8004d84:	462b      	mov	r3, r5
 8004d86:	461d      	mov	r5, r3
 8004d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d8c:	2a30      	cmp	r2, #48	; 0x30
 8004d8e:	d0fa      	beq.n	8004d86 <_dtoa_r+0xb66>
 8004d90:	e6f7      	b.n	8004b82 <_dtoa_r+0x962>
 8004d92:	9a00      	ldr	r2, [sp, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1a5      	bne.n	8004ce4 <_dtoa_r+0xac4>
 8004d98:	f10a 0a01 	add.w	sl, sl, #1
 8004d9c:	2331      	movs	r3, #49	; 0x31
 8004d9e:	e779      	b.n	8004c94 <_dtoa_r+0xa74>
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <_dtoa_r+0xbd0>)
 8004da2:	f7ff baaf 	b.w	8004304 <_dtoa_r+0xe4>
 8004da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f aa86 	bne.w	80042ba <_dtoa_r+0x9a>
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <_dtoa_r+0xbd4>)
 8004db0:	f7ff baa8 	b.w	8004304 <_dtoa_r+0xe4>
 8004db4:	f1b9 0f00 	cmp.w	r9, #0
 8004db8:	dc03      	bgt.n	8004dc2 <_dtoa_r+0xba2>
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	f73f aec9 	bgt.w	8004b54 <_dtoa_r+0x934>
 8004dc2:	9d00      	ldr	r5, [sp, #0]
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4658      	mov	r0, fp
 8004dc8:	f7ff f99e 	bl	8004108 <quorem>
 8004dcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8004dd4:	9a00      	ldr	r2, [sp, #0]
 8004dd6:	1aaa      	subs	r2, r5, r2
 8004dd8:	4591      	cmp	r9, r2
 8004dda:	ddba      	ble.n	8004d52 <_dtoa_r+0xb32>
 8004ddc:	4659      	mov	r1, fp
 8004dde:	2300      	movs	r3, #0
 8004de0:	220a      	movs	r2, #10
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 f9cc 	bl	8005180 <__multadd>
 8004de8:	4683      	mov	fp, r0
 8004dea:	e7eb      	b.n	8004dc4 <_dtoa_r+0xba4>
 8004dec:	08005ea3 	.word	0x08005ea3
 8004df0:	08005dc0 	.word	0x08005dc0
 8004df4:	08005e20 	.word	0x08005e20

08004df8 <__sflush_r>:
 8004df8:	898a      	ldrh	r2, [r1, #12]
 8004dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	4605      	mov	r5, r0
 8004e00:	0710      	lsls	r0, r2, #28
 8004e02:	460c      	mov	r4, r1
 8004e04:	d458      	bmi.n	8004eb8 <__sflush_r+0xc0>
 8004e06:	684b      	ldr	r3, [r1, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dc05      	bgt.n	8004e18 <__sflush_r+0x20>
 8004e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dc02      	bgt.n	8004e18 <__sflush_r+0x20>
 8004e12:	2000      	movs	r0, #0
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d0f9      	beq.n	8004e12 <__sflush_r+0x1a>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e24:	682f      	ldr	r7, [r5, #0]
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	d032      	beq.n	8004e90 <__sflush_r+0x98>
 8004e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	075a      	lsls	r2, r3, #29
 8004e30:	d505      	bpl.n	8004e3e <__sflush_r+0x46>
 8004e32:	6863      	ldr	r3, [r4, #4]
 8004e34:	1ac0      	subs	r0, r0, r3
 8004e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e38:	b10b      	cbz	r3, 8004e3e <__sflush_r+0x46>
 8004e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e3c:	1ac0      	subs	r0, r0, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4602      	mov	r2, r0
 8004e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b0      	blx	r6
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	d106      	bne.n	8004e5e <__sflush_r+0x66>
 8004e50:	6829      	ldr	r1, [r5, #0]
 8004e52:	291d      	cmp	r1, #29
 8004e54:	d82c      	bhi.n	8004eb0 <__sflush_r+0xb8>
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <__sflush_r+0x108>)
 8004e58:	40ca      	lsrs	r2, r1
 8004e5a:	07d6      	lsls	r6, r2, #31
 8004e5c:	d528      	bpl.n	8004eb0 <__sflush_r+0xb8>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	6062      	str	r2, [r4, #4]
 8004e62:	04d9      	lsls	r1, r3, #19
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	d504      	bpl.n	8004e74 <__sflush_r+0x7c>
 8004e6a:	1c42      	adds	r2, r0, #1
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0x7a>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	b903      	cbnz	r3, 8004e74 <__sflush_r+0x7c>
 8004e72:	6560      	str	r0, [r4, #84]	; 0x54
 8004e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e76:	602f      	str	r7, [r5, #0]
 8004e78:	2900      	cmp	r1, #0
 8004e7a:	d0ca      	beq.n	8004e12 <__sflush_r+0x1a>
 8004e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d002      	beq.n	8004e8a <__sflush_r+0x92>
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 fca7 	bl	80057d8 <_free_r>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004e8e:	e7c1      	b.n	8004e14 <__sflush_r+0x1c>
 8004e90:	6a21      	ldr	r1, [r4, #32]
 8004e92:	2301      	movs	r3, #1
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b0      	blx	r6
 8004e98:	1c41      	adds	r1, r0, #1
 8004e9a:	d1c7      	bne.n	8004e2c <__sflush_r+0x34>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0c4      	beq.n	8004e2c <__sflush_r+0x34>
 8004ea2:	2b1d      	cmp	r3, #29
 8004ea4:	d001      	beq.n	8004eaa <__sflush_r+0xb2>
 8004ea6:	2b16      	cmp	r3, #22
 8004ea8:	d101      	bne.n	8004eae <__sflush_r+0xb6>
 8004eaa:	602f      	str	r7, [r5, #0]
 8004eac:	e7b1      	b.n	8004e12 <__sflush_r+0x1a>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	e7ad      	b.n	8004e14 <__sflush_r+0x1c>
 8004eb8:	690f      	ldr	r7, [r1, #16]
 8004eba:	2f00      	cmp	r7, #0
 8004ebc:	d0a9      	beq.n	8004e12 <__sflush_r+0x1a>
 8004ebe:	0793      	lsls	r3, r2, #30
 8004ec0:	680e      	ldr	r6, [r1, #0]
 8004ec2:	bf08      	it	eq
 8004ec4:	694b      	ldreq	r3, [r1, #20]
 8004ec6:	600f      	str	r7, [r1, #0]
 8004ec8:	bf18      	it	ne
 8004eca:	2300      	movne	r3, #0
 8004ecc:	eba6 0807 	sub.w	r8, r6, r7
 8004ed0:	608b      	str	r3, [r1, #8]
 8004ed2:	f1b8 0f00 	cmp.w	r8, #0
 8004ed6:	dd9c      	ble.n	8004e12 <__sflush_r+0x1a>
 8004ed8:	6a21      	ldr	r1, [r4, #32]
 8004eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004edc:	4643      	mov	r3, r8
 8004ede:	463a      	mov	r2, r7
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b0      	blx	r6
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	dc06      	bgt.n	8004ef6 <__sflush_r+0xfe>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef4:	e78e      	b.n	8004e14 <__sflush_r+0x1c>
 8004ef6:	4407      	add	r7, r0
 8004ef8:	eba8 0800 	sub.w	r8, r8, r0
 8004efc:	e7e9      	b.n	8004ed2 <__sflush_r+0xda>
 8004efe:	bf00      	nop
 8004f00:	20400001 	.word	0x20400001

08004f04 <_fflush_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	690b      	ldr	r3, [r1, #16]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	b913      	cbnz	r3, 8004f14 <_fflush_r+0x10>
 8004f0e:	2500      	movs	r5, #0
 8004f10:	4628      	mov	r0, r5
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	b118      	cbz	r0, 8004f1e <_fflush_r+0x1a>
 8004f16:	6983      	ldr	r3, [r0, #24]
 8004f18:	b90b      	cbnz	r3, 8004f1e <_fflush_r+0x1a>
 8004f1a:	f7fe f973 	bl	8003204 <__sinit>
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <_fflush_r+0x6c>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	d11b      	bne.n	8004f5c <_fflush_r+0x58>
 8004f24:	686c      	ldr	r4, [r5, #4]
 8004f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ef      	beq.n	8004f0e <_fflush_r+0xa>
 8004f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f30:	07d0      	lsls	r0, r2, #31
 8004f32:	d404      	bmi.n	8004f3e <_fflush_r+0x3a>
 8004f34:	0599      	lsls	r1, r3, #22
 8004f36:	d402      	bmi.n	8004f3e <_fflush_r+0x3a>
 8004f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f3a:	f7fe fa26 	bl	800338a <__retarget_lock_acquire_recursive>
 8004f3e:	4628      	mov	r0, r5
 8004f40:	4621      	mov	r1, r4
 8004f42:	f7ff ff59 	bl	8004df8 <__sflush_r>
 8004f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f48:	07da      	lsls	r2, r3, #31
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	d4e0      	bmi.n	8004f10 <_fflush_r+0xc>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	059b      	lsls	r3, r3, #22
 8004f52:	d4dd      	bmi.n	8004f10 <_fflush_r+0xc>
 8004f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f56:	f7fe fa19 	bl	800338c <__retarget_lock_release_recursive>
 8004f5a:	e7d9      	b.n	8004f10 <_fflush_r+0xc>
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <_fflush_r+0x70>)
 8004f5e:	429c      	cmp	r4, r3
 8004f60:	d101      	bne.n	8004f66 <_fflush_r+0x62>
 8004f62:	68ac      	ldr	r4, [r5, #8]
 8004f64:	e7df      	b.n	8004f26 <_fflush_r+0x22>
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <_fflush_r+0x74>)
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	bf08      	it	eq
 8004f6c:	68ec      	ldreq	r4, [r5, #12]
 8004f6e:	e7da      	b.n	8004f26 <_fflush_r+0x22>
 8004f70:	08005d6c 	.word	0x08005d6c
 8004f74:	08005d8c 	.word	0x08005d8c
 8004f78:	08005d4c 	.word	0x08005d4c

08004f7c <fiprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b503      	push	{r0, r1, lr}
 8004f80:	4601      	mov	r1, r0
 8004f82:	ab03      	add	r3, sp, #12
 8004f84:	4805      	ldr	r0, [pc, #20]	; (8004f9c <fiprintf+0x20>)
 8004f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	f000 fc9d 	bl	80058cc <_vfiprintf_r>
 8004f92:	b002      	add	sp, #8
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	20000060 	.word	0x20000060

08004fa0 <_localeconv_r>:
 8004fa0:	4800      	ldr	r0, [pc, #0]	; (8004fa4 <_localeconv_r+0x4>)
 8004fa2:	4770      	bx	lr
 8004fa4:	200001b4 	.word	0x200001b4

08004fa8 <_lseek_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_lseek_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fd feb8 	bl	8002d2c <_lseek>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_lseek_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_lseek_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	200003f4 	.word	0x200003f4

08004fcc <__swhatbuf_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	460e      	mov	r6, r1
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	da07      	bge.n	8004fee <__swhatbuf_r+0x22>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	89b3      	ldrh	r3, [r6, #12]
 8004fe4:	061a      	lsls	r2, r3, #24
 8004fe6:	d410      	bmi.n	800500a <__swhatbuf_r+0x3e>
 8004fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fec:	e00e      	b.n	800500c <__swhatbuf_r+0x40>
 8004fee:	466a      	mov	r2, sp
 8004ff0:	f000 fdb6 	bl	8005b60 <_fstat_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	dbf2      	blt.n	8004fde <__swhatbuf_r+0x12>
 8004ff8:	9a01      	ldr	r2, [sp, #4]
 8004ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005002:	425a      	negs	r2, r3
 8005004:	415a      	adcs	r2, r3
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	e7ee      	b.n	8004fe8 <__swhatbuf_r+0x1c>
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	2000      	movs	r0, #0
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	b016      	add	sp, #88	; 0x58
 8005012:	bd70      	pop	{r4, r5, r6, pc}

08005014 <__smakebuf_r>:
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005018:	079d      	lsls	r5, r3, #30
 800501a:	4606      	mov	r6, r0
 800501c:	460c      	mov	r4, r1
 800501e:	d507      	bpl.n	8005030 <__smakebuf_r+0x1c>
 8005020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2301      	movs	r3, #1
 800502a:	6163      	str	r3, [r4, #20]
 800502c:	b002      	add	sp, #8
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	ab01      	add	r3, sp, #4
 8005032:	466a      	mov	r2, sp
 8005034:	f7ff ffca 	bl	8004fcc <__swhatbuf_r>
 8005038:	9900      	ldr	r1, [sp, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	4630      	mov	r0, r6
 800503e:	f7fe f9bd 	bl	80033bc <_malloc_r>
 8005042:	b948      	cbnz	r0, 8005058 <__smakebuf_r+0x44>
 8005044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005048:	059a      	lsls	r2, r3, #22
 800504a:	d4ef      	bmi.n	800502c <__smakebuf_r+0x18>
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	e7e3      	b.n	8005020 <__smakebuf_r+0xc>
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <__smakebuf_r+0x7c>)
 800505a:	62b3      	str	r3, [r6, #40]	; 0x28
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	6163      	str	r3, [r4, #20]
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	6120      	str	r0, [r4, #16]
 800506e:	b15b      	cbz	r3, 8005088 <__smakebuf_r+0x74>
 8005070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005074:	4630      	mov	r0, r6
 8005076:	f000 fd85 	bl	8005b84 <_isatty_r>
 800507a:	b128      	cbz	r0, 8005088 <__smakebuf_r+0x74>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	89a0      	ldrh	r0, [r4, #12]
 800508a:	4305      	orrs	r5, r0
 800508c:	81a5      	strh	r5, [r4, #12]
 800508e:	e7cd      	b.n	800502c <__smakebuf_r+0x18>
 8005090:	0800319d 	.word	0x0800319d

08005094 <malloc>:
 8005094:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <malloc+0xc>)
 8005096:	4601      	mov	r1, r0
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	f7fe b98f 	b.w	80033bc <_malloc_r>
 800509e:	bf00      	nop
 80050a0:	20000060 	.word	0x20000060

080050a4 <__malloc_lock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_lock+0x8>)
 80050a6:	f7fe b970 	b.w	800338a <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200003ec 	.word	0x200003ec

080050b0 <__malloc_unlock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_unlock+0x8>)
 80050b2:	f7fe b96b 	b.w	800338c <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200003ec 	.word	0x200003ec

080050bc <_Balloc>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050c0:	4604      	mov	r4, r0
 80050c2:	460d      	mov	r5, r1
 80050c4:	b976      	cbnz	r6, 80050e4 <_Balloc+0x28>
 80050c6:	2010      	movs	r0, #16
 80050c8:	f7ff ffe4 	bl	8005094 <malloc>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6260      	str	r0, [r4, #36]	; 0x24
 80050d0:	b920      	cbnz	r0, 80050dc <_Balloc+0x20>
 80050d2:	4b18      	ldr	r3, [pc, #96]	; (8005134 <_Balloc+0x78>)
 80050d4:	4818      	ldr	r0, [pc, #96]	; (8005138 <_Balloc+0x7c>)
 80050d6:	2166      	movs	r1, #102	; 0x66
 80050d8:	f7fe ffe8 	bl	80040ac <__assert_func>
 80050dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e0:	6006      	str	r6, [r0, #0]
 80050e2:	60c6      	str	r6, [r0, #12]
 80050e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050e6:	68f3      	ldr	r3, [r6, #12]
 80050e8:	b183      	cbz	r3, 800510c <_Balloc+0x50>
 80050ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050f2:	b9b8      	cbnz	r0, 8005124 <_Balloc+0x68>
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f605 	lsl.w	r6, r1, r5
 80050fa:	1d72      	adds	r2, r6, #5
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 fb5a 	bl	80057b8 <_calloc_r>
 8005104:	b160      	cbz	r0, 8005120 <_Balloc+0x64>
 8005106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800510a:	e00e      	b.n	800512a <_Balloc+0x6e>
 800510c:	2221      	movs	r2, #33	; 0x21
 800510e:	2104      	movs	r1, #4
 8005110:	4620      	mov	r0, r4
 8005112:	f000 fb51 	bl	80057b8 <_calloc_r>
 8005116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005118:	60f0      	str	r0, [r6, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e4      	bne.n	80050ea <_Balloc+0x2e>
 8005120:	2000      	movs	r0, #0
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	6802      	ldr	r2, [r0, #0]
 8005126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800512a:	2300      	movs	r3, #0
 800512c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005130:	e7f7      	b.n	8005122 <_Balloc+0x66>
 8005132:	bf00      	nop
 8005134:	08005e2d 	.word	0x08005e2d
 8005138:	08005eb4 	.word	0x08005eb4

0800513c <_Bfree>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005140:	4605      	mov	r5, r0
 8005142:	460c      	mov	r4, r1
 8005144:	b976      	cbnz	r6, 8005164 <_Bfree+0x28>
 8005146:	2010      	movs	r0, #16
 8005148:	f7ff ffa4 	bl	8005094 <malloc>
 800514c:	4602      	mov	r2, r0
 800514e:	6268      	str	r0, [r5, #36]	; 0x24
 8005150:	b920      	cbnz	r0, 800515c <_Bfree+0x20>
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <_Bfree+0x3c>)
 8005154:	4809      	ldr	r0, [pc, #36]	; (800517c <_Bfree+0x40>)
 8005156:	218a      	movs	r1, #138	; 0x8a
 8005158:	f7fe ffa8 	bl	80040ac <__assert_func>
 800515c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005160:	6006      	str	r6, [r0, #0]
 8005162:	60c6      	str	r6, [r0, #12]
 8005164:	b13c      	cbz	r4, 8005176 <_Bfree+0x3a>
 8005166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005168:	6862      	ldr	r2, [r4, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005170:	6021      	str	r1, [r4, #0]
 8005172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	08005e2d 	.word	0x08005e2d
 800517c:	08005eb4 	.word	0x08005eb4

08005180 <__multadd>:
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	690e      	ldr	r6, [r1, #16]
 8005186:	4607      	mov	r7, r0
 8005188:	4698      	mov	r8, r3
 800518a:	460c      	mov	r4, r1
 800518c:	f101 0014 	add.w	r0, r1, #20
 8005190:	2300      	movs	r3, #0
 8005192:	6805      	ldr	r5, [r0, #0]
 8005194:	b2a9      	uxth	r1, r5
 8005196:	fb02 8101 	mla	r1, r2, r1, r8
 800519a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800519e:	0c2d      	lsrs	r5, r5, #16
 80051a0:	fb02 c505 	mla	r5, r2, r5, ip
 80051a4:	b289      	uxth	r1, r1
 80051a6:	3301      	adds	r3, #1
 80051a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80051ac:	429e      	cmp	r6, r3
 80051ae:	f840 1b04 	str.w	r1, [r0], #4
 80051b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80051b6:	dcec      	bgt.n	8005192 <__multadd+0x12>
 80051b8:	f1b8 0f00 	cmp.w	r8, #0
 80051bc:	d022      	beq.n	8005204 <__multadd+0x84>
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	42b3      	cmp	r3, r6
 80051c2:	dc19      	bgt.n	80051f8 <__multadd+0x78>
 80051c4:	6861      	ldr	r1, [r4, #4]
 80051c6:	4638      	mov	r0, r7
 80051c8:	3101      	adds	r1, #1
 80051ca:	f7ff ff77 	bl	80050bc <_Balloc>
 80051ce:	4605      	mov	r5, r0
 80051d0:	b928      	cbnz	r0, 80051de <__multadd+0x5e>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <__multadd+0x8c>)
 80051d6:	480e      	ldr	r0, [pc, #56]	; (8005210 <__multadd+0x90>)
 80051d8:	21b5      	movs	r1, #181	; 0xb5
 80051da:	f7fe ff67 	bl	80040ac <__assert_func>
 80051de:	6922      	ldr	r2, [r4, #16]
 80051e0:	3202      	adds	r2, #2
 80051e2:	f104 010c 	add.w	r1, r4, #12
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	300c      	adds	r0, #12
 80051ea:	f7fe f8d0 	bl	800338e <memcpy>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7ff ffa3 	bl	800513c <_Bfree>
 80051f6:	462c      	mov	r4, r5
 80051f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051fc:	3601      	adds	r6, #1
 80051fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8005202:	6126      	str	r6, [r4, #16]
 8005204:	4620      	mov	r0, r4
 8005206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520a:	bf00      	nop
 800520c:	08005ea3 	.word	0x08005ea3
 8005210:	08005eb4 	.word	0x08005eb4

08005214 <__hi0bits>:
 8005214:	0c03      	lsrs	r3, r0, #16
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	b9d3      	cbnz	r3, 8005250 <__hi0bits+0x3c>
 800521a:	0400      	lsls	r0, r0, #16
 800521c:	2310      	movs	r3, #16
 800521e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005222:	bf04      	itt	eq
 8005224:	0200      	lsleq	r0, r0, #8
 8005226:	3308      	addeq	r3, #8
 8005228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800522c:	bf04      	itt	eq
 800522e:	0100      	lsleq	r0, r0, #4
 8005230:	3304      	addeq	r3, #4
 8005232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005236:	bf04      	itt	eq
 8005238:	0080      	lsleq	r0, r0, #2
 800523a:	3302      	addeq	r3, #2
 800523c:	2800      	cmp	r0, #0
 800523e:	db05      	blt.n	800524c <__hi0bits+0x38>
 8005240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005244:	f103 0301 	add.w	r3, r3, #1
 8005248:	bf08      	it	eq
 800524a:	2320      	moveq	r3, #32
 800524c:	4618      	mov	r0, r3
 800524e:	4770      	bx	lr
 8005250:	2300      	movs	r3, #0
 8005252:	e7e4      	b.n	800521e <__hi0bits+0xa>

08005254 <__lo0bits>:
 8005254:	6803      	ldr	r3, [r0, #0]
 8005256:	f013 0207 	ands.w	r2, r3, #7
 800525a:	4601      	mov	r1, r0
 800525c:	d00b      	beq.n	8005276 <__lo0bits+0x22>
 800525e:	07da      	lsls	r2, r3, #31
 8005260:	d424      	bmi.n	80052ac <__lo0bits+0x58>
 8005262:	0798      	lsls	r0, r3, #30
 8005264:	bf49      	itett	mi
 8005266:	085b      	lsrmi	r3, r3, #1
 8005268:	089b      	lsrpl	r3, r3, #2
 800526a:	2001      	movmi	r0, #1
 800526c:	600b      	strmi	r3, [r1, #0]
 800526e:	bf5c      	itt	pl
 8005270:	600b      	strpl	r3, [r1, #0]
 8005272:	2002      	movpl	r0, #2
 8005274:	4770      	bx	lr
 8005276:	b298      	uxth	r0, r3
 8005278:	b9b0      	cbnz	r0, 80052a8 <__lo0bits+0x54>
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	2010      	movs	r0, #16
 800527e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005282:	bf04      	itt	eq
 8005284:	0a1b      	lsreq	r3, r3, #8
 8005286:	3008      	addeq	r0, #8
 8005288:	071a      	lsls	r2, r3, #28
 800528a:	bf04      	itt	eq
 800528c:	091b      	lsreq	r3, r3, #4
 800528e:	3004      	addeq	r0, #4
 8005290:	079a      	lsls	r2, r3, #30
 8005292:	bf04      	itt	eq
 8005294:	089b      	lsreq	r3, r3, #2
 8005296:	3002      	addeq	r0, #2
 8005298:	07da      	lsls	r2, r3, #31
 800529a:	d403      	bmi.n	80052a4 <__lo0bits+0x50>
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	f100 0001 	add.w	r0, r0, #1
 80052a2:	d005      	beq.n	80052b0 <__lo0bits+0x5c>
 80052a4:	600b      	str	r3, [r1, #0]
 80052a6:	4770      	bx	lr
 80052a8:	4610      	mov	r0, r2
 80052aa:	e7e8      	b.n	800527e <__lo0bits+0x2a>
 80052ac:	2000      	movs	r0, #0
 80052ae:	4770      	bx	lr
 80052b0:	2020      	movs	r0, #32
 80052b2:	4770      	bx	lr

080052b4 <__i2b>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	460c      	mov	r4, r1
 80052b8:	2101      	movs	r1, #1
 80052ba:	f7ff feff 	bl	80050bc <_Balloc>
 80052be:	4602      	mov	r2, r0
 80052c0:	b928      	cbnz	r0, 80052ce <__i2b+0x1a>
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <__i2b+0x24>)
 80052c4:	4805      	ldr	r0, [pc, #20]	; (80052dc <__i2b+0x28>)
 80052c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052ca:	f7fe feef 	bl	80040ac <__assert_func>
 80052ce:	2301      	movs	r3, #1
 80052d0:	6144      	str	r4, [r0, #20]
 80052d2:	6103      	str	r3, [r0, #16]
 80052d4:	bd10      	pop	{r4, pc}
 80052d6:	bf00      	nop
 80052d8:	08005ea3 	.word	0x08005ea3
 80052dc:	08005eb4 	.word	0x08005eb4

080052e0 <__multiply>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	4614      	mov	r4, r2
 80052e6:	690a      	ldr	r2, [r1, #16]
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	bfb8      	it	lt
 80052ee:	460b      	movlt	r3, r1
 80052f0:	460d      	mov	r5, r1
 80052f2:	bfbc      	itt	lt
 80052f4:	4625      	movlt	r5, r4
 80052f6:	461c      	movlt	r4, r3
 80052f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005300:	68ab      	ldr	r3, [r5, #8]
 8005302:	6869      	ldr	r1, [r5, #4]
 8005304:	eb0a 0709 	add.w	r7, sl, r9
 8005308:	42bb      	cmp	r3, r7
 800530a:	b085      	sub	sp, #20
 800530c:	bfb8      	it	lt
 800530e:	3101      	addlt	r1, #1
 8005310:	f7ff fed4 	bl	80050bc <_Balloc>
 8005314:	b930      	cbnz	r0, 8005324 <__multiply+0x44>
 8005316:	4602      	mov	r2, r0
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <__multiply+0x144>)
 800531a:	4843      	ldr	r0, [pc, #268]	; (8005428 <__multiply+0x148>)
 800531c:	f240 115d 	movw	r1, #349	; 0x15d
 8005320:	f7fe fec4 	bl	80040ac <__assert_func>
 8005324:	f100 0614 	add.w	r6, r0, #20
 8005328:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800532c:	4633      	mov	r3, r6
 800532e:	2200      	movs	r2, #0
 8005330:	4543      	cmp	r3, r8
 8005332:	d31e      	bcc.n	8005372 <__multiply+0x92>
 8005334:	f105 0c14 	add.w	ip, r5, #20
 8005338:	f104 0314 	add.w	r3, r4, #20
 800533c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005340:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005344:	9202      	str	r2, [sp, #8]
 8005346:	ebac 0205 	sub.w	r2, ip, r5
 800534a:	3a15      	subs	r2, #21
 800534c:	f022 0203 	bic.w	r2, r2, #3
 8005350:	3204      	adds	r2, #4
 8005352:	f105 0115 	add.w	r1, r5, #21
 8005356:	458c      	cmp	ip, r1
 8005358:	bf38      	it	cc
 800535a:	2204      	movcc	r2, #4
 800535c:	9201      	str	r2, [sp, #4]
 800535e:	9a02      	ldr	r2, [sp, #8]
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	429a      	cmp	r2, r3
 8005364:	d808      	bhi.n	8005378 <__multiply+0x98>
 8005366:	2f00      	cmp	r7, #0
 8005368:	dc55      	bgt.n	8005416 <__multiply+0x136>
 800536a:	6107      	str	r7, [r0, #16]
 800536c:	b005      	add	sp, #20
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	f843 2b04 	str.w	r2, [r3], #4
 8005376:	e7db      	b.n	8005330 <__multiply+0x50>
 8005378:	f8b3 a000 	ldrh.w	sl, [r3]
 800537c:	f1ba 0f00 	cmp.w	sl, #0
 8005380:	d020      	beq.n	80053c4 <__multiply+0xe4>
 8005382:	f105 0e14 	add.w	lr, r5, #20
 8005386:	46b1      	mov	r9, r6
 8005388:	2200      	movs	r2, #0
 800538a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800538e:	f8d9 b000 	ldr.w	fp, [r9]
 8005392:	b2a1      	uxth	r1, r4
 8005394:	fa1f fb8b 	uxth.w	fp, fp
 8005398:	fb0a b101 	mla	r1, sl, r1, fp
 800539c:	4411      	add	r1, r2
 800539e:	f8d9 2000 	ldr.w	r2, [r9]
 80053a2:	0c24      	lsrs	r4, r4, #16
 80053a4:	0c12      	lsrs	r2, r2, #16
 80053a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80053aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80053ae:	b289      	uxth	r1, r1
 80053b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80053b4:	45f4      	cmp	ip, lr
 80053b6:	f849 1b04 	str.w	r1, [r9], #4
 80053ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80053be:	d8e4      	bhi.n	800538a <__multiply+0xaa>
 80053c0:	9901      	ldr	r1, [sp, #4]
 80053c2:	5072      	str	r2, [r6, r1]
 80053c4:	9a03      	ldr	r2, [sp, #12]
 80053c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80053ca:	3304      	adds	r3, #4
 80053cc:	f1b9 0f00 	cmp.w	r9, #0
 80053d0:	d01f      	beq.n	8005412 <__multiply+0x132>
 80053d2:	6834      	ldr	r4, [r6, #0]
 80053d4:	f105 0114 	add.w	r1, r5, #20
 80053d8:	46b6      	mov	lr, r6
 80053da:	f04f 0a00 	mov.w	sl, #0
 80053de:	880a      	ldrh	r2, [r1, #0]
 80053e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80053e4:	fb09 b202 	mla	r2, r9, r2, fp
 80053e8:	4492      	add	sl, r2
 80053ea:	b2a4      	uxth	r4, r4
 80053ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053f0:	f84e 4b04 	str.w	r4, [lr], #4
 80053f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80053f8:	f8be 2000 	ldrh.w	r2, [lr]
 80053fc:	0c24      	lsrs	r4, r4, #16
 80053fe:	fb09 2404 	mla	r4, r9, r4, r2
 8005402:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005406:	458c      	cmp	ip, r1
 8005408:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800540c:	d8e7      	bhi.n	80053de <__multiply+0xfe>
 800540e:	9a01      	ldr	r2, [sp, #4]
 8005410:	50b4      	str	r4, [r6, r2]
 8005412:	3604      	adds	r6, #4
 8005414:	e7a3      	b.n	800535e <__multiply+0x7e>
 8005416:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1a5      	bne.n	800536a <__multiply+0x8a>
 800541e:	3f01      	subs	r7, #1
 8005420:	e7a1      	b.n	8005366 <__multiply+0x86>
 8005422:	bf00      	nop
 8005424:	08005ea3 	.word	0x08005ea3
 8005428:	08005eb4 	.word	0x08005eb4

0800542c <__pow5mult>:
 800542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005430:	4615      	mov	r5, r2
 8005432:	f012 0203 	ands.w	r2, r2, #3
 8005436:	4606      	mov	r6, r0
 8005438:	460f      	mov	r7, r1
 800543a:	d007      	beq.n	800544c <__pow5mult+0x20>
 800543c:	4c25      	ldr	r4, [pc, #148]	; (80054d4 <__pow5mult+0xa8>)
 800543e:	3a01      	subs	r2, #1
 8005440:	2300      	movs	r3, #0
 8005442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005446:	f7ff fe9b 	bl	8005180 <__multadd>
 800544a:	4607      	mov	r7, r0
 800544c:	10ad      	asrs	r5, r5, #2
 800544e:	d03d      	beq.n	80054cc <__pow5mult+0xa0>
 8005450:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005452:	b97c      	cbnz	r4, 8005474 <__pow5mult+0x48>
 8005454:	2010      	movs	r0, #16
 8005456:	f7ff fe1d 	bl	8005094 <malloc>
 800545a:	4602      	mov	r2, r0
 800545c:	6270      	str	r0, [r6, #36]	; 0x24
 800545e:	b928      	cbnz	r0, 800546c <__pow5mult+0x40>
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <__pow5mult+0xac>)
 8005462:	481e      	ldr	r0, [pc, #120]	; (80054dc <__pow5mult+0xb0>)
 8005464:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005468:	f7fe fe20 	bl	80040ac <__assert_func>
 800546c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005470:	6004      	str	r4, [r0, #0]
 8005472:	60c4      	str	r4, [r0, #12]
 8005474:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800547c:	b94c      	cbnz	r4, 8005492 <__pow5mult+0x66>
 800547e:	f240 2171 	movw	r1, #625	; 0x271
 8005482:	4630      	mov	r0, r6
 8005484:	f7ff ff16 	bl	80052b4 <__i2b>
 8005488:	2300      	movs	r3, #0
 800548a:	f8c8 0008 	str.w	r0, [r8, #8]
 800548e:	4604      	mov	r4, r0
 8005490:	6003      	str	r3, [r0, #0]
 8005492:	f04f 0900 	mov.w	r9, #0
 8005496:	07eb      	lsls	r3, r5, #31
 8005498:	d50a      	bpl.n	80054b0 <__pow5mult+0x84>
 800549a:	4639      	mov	r1, r7
 800549c:	4622      	mov	r2, r4
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ff1e 	bl	80052e0 <__multiply>
 80054a4:	4639      	mov	r1, r7
 80054a6:	4680      	mov	r8, r0
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff fe47 	bl	800513c <_Bfree>
 80054ae:	4647      	mov	r7, r8
 80054b0:	106d      	asrs	r5, r5, #1
 80054b2:	d00b      	beq.n	80054cc <__pow5mult+0xa0>
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	b938      	cbnz	r0, 80054c8 <__pow5mult+0x9c>
 80054b8:	4622      	mov	r2, r4
 80054ba:	4621      	mov	r1, r4
 80054bc:	4630      	mov	r0, r6
 80054be:	f7ff ff0f 	bl	80052e0 <__multiply>
 80054c2:	6020      	str	r0, [r4, #0]
 80054c4:	f8c0 9000 	str.w	r9, [r0]
 80054c8:	4604      	mov	r4, r0
 80054ca:	e7e4      	b.n	8005496 <__pow5mult+0x6a>
 80054cc:	4638      	mov	r0, r7
 80054ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d2:	bf00      	nop
 80054d4:	08006008 	.word	0x08006008
 80054d8:	08005e2d 	.word	0x08005e2d
 80054dc:	08005eb4 	.word	0x08005eb4

080054e0 <__lshift>:
 80054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	6849      	ldr	r1, [r1, #4]
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	4607      	mov	r7, r0
 80054f2:	4691      	mov	r9, r2
 80054f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054f8:	f108 0601 	add.w	r6, r8, #1
 80054fc:	42b3      	cmp	r3, r6
 80054fe:	db0b      	blt.n	8005518 <__lshift+0x38>
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff fddb 	bl	80050bc <_Balloc>
 8005506:	4605      	mov	r5, r0
 8005508:	b948      	cbnz	r0, 800551e <__lshift+0x3e>
 800550a:	4602      	mov	r2, r0
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <__lshift+0xd0>)
 800550e:	4829      	ldr	r0, [pc, #164]	; (80055b4 <__lshift+0xd4>)
 8005510:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005514:	f7fe fdca 	bl	80040ac <__assert_func>
 8005518:	3101      	adds	r1, #1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	e7ee      	b.n	80054fc <__lshift+0x1c>
 800551e:	2300      	movs	r3, #0
 8005520:	f100 0114 	add.w	r1, r0, #20
 8005524:	f100 0210 	add.w	r2, r0, #16
 8005528:	4618      	mov	r0, r3
 800552a:	4553      	cmp	r3, sl
 800552c:	db33      	blt.n	8005596 <__lshift+0xb6>
 800552e:	6920      	ldr	r0, [r4, #16]
 8005530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005534:	f104 0314 	add.w	r3, r4, #20
 8005538:	f019 091f 	ands.w	r9, r9, #31
 800553c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005544:	d02b      	beq.n	800559e <__lshift+0xbe>
 8005546:	f1c9 0e20 	rsb	lr, r9, #32
 800554a:	468a      	mov	sl, r1
 800554c:	2200      	movs	r2, #0
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	fa00 f009 	lsl.w	r0, r0, r9
 8005554:	4302      	orrs	r2, r0
 8005556:	f84a 2b04 	str.w	r2, [sl], #4
 800555a:	f853 2b04 	ldr.w	r2, [r3], #4
 800555e:	459c      	cmp	ip, r3
 8005560:	fa22 f20e 	lsr.w	r2, r2, lr
 8005564:	d8f3      	bhi.n	800554e <__lshift+0x6e>
 8005566:	ebac 0304 	sub.w	r3, ip, r4
 800556a:	3b15      	subs	r3, #21
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	3304      	adds	r3, #4
 8005572:	f104 0015 	add.w	r0, r4, #21
 8005576:	4584      	cmp	ip, r0
 8005578:	bf38      	it	cc
 800557a:	2304      	movcc	r3, #4
 800557c:	50ca      	str	r2, [r1, r3]
 800557e:	b10a      	cbz	r2, 8005584 <__lshift+0xa4>
 8005580:	f108 0602 	add.w	r6, r8, #2
 8005584:	3e01      	subs	r6, #1
 8005586:	4638      	mov	r0, r7
 8005588:	612e      	str	r6, [r5, #16]
 800558a:	4621      	mov	r1, r4
 800558c:	f7ff fdd6 	bl	800513c <_Bfree>
 8005590:	4628      	mov	r0, r5
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	f842 0f04 	str.w	r0, [r2, #4]!
 800559a:	3301      	adds	r3, #1
 800559c:	e7c5      	b.n	800552a <__lshift+0x4a>
 800559e:	3904      	subs	r1, #4
 80055a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80055a8:	459c      	cmp	ip, r3
 80055aa:	d8f9      	bhi.n	80055a0 <__lshift+0xc0>
 80055ac:	e7ea      	b.n	8005584 <__lshift+0xa4>
 80055ae:	bf00      	nop
 80055b0:	08005ea3 	.word	0x08005ea3
 80055b4:	08005eb4 	.word	0x08005eb4

080055b8 <__mcmp>:
 80055b8:	b530      	push	{r4, r5, lr}
 80055ba:	6902      	ldr	r2, [r0, #16]
 80055bc:	690c      	ldr	r4, [r1, #16]
 80055be:	1b12      	subs	r2, r2, r4
 80055c0:	d10e      	bne.n	80055e0 <__mcmp+0x28>
 80055c2:	f100 0314 	add.w	r3, r0, #20
 80055c6:	3114      	adds	r1, #20
 80055c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80055cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80055d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055d8:	42a5      	cmp	r5, r4
 80055da:	d003      	beq.n	80055e4 <__mcmp+0x2c>
 80055dc:	d305      	bcc.n	80055ea <__mcmp+0x32>
 80055de:	2201      	movs	r2, #1
 80055e0:	4610      	mov	r0, r2
 80055e2:	bd30      	pop	{r4, r5, pc}
 80055e4:	4283      	cmp	r3, r0
 80055e6:	d3f3      	bcc.n	80055d0 <__mcmp+0x18>
 80055e8:	e7fa      	b.n	80055e0 <__mcmp+0x28>
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055ee:	e7f7      	b.n	80055e0 <__mcmp+0x28>

080055f0 <__mdiff>:
 80055f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	460c      	mov	r4, r1
 80055f6:	4606      	mov	r6, r0
 80055f8:	4611      	mov	r1, r2
 80055fa:	4620      	mov	r0, r4
 80055fc:	4617      	mov	r7, r2
 80055fe:	f7ff ffdb 	bl	80055b8 <__mcmp>
 8005602:	1e05      	subs	r5, r0, #0
 8005604:	d110      	bne.n	8005628 <__mdiff+0x38>
 8005606:	4629      	mov	r1, r5
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff fd57 	bl	80050bc <_Balloc>
 800560e:	b930      	cbnz	r0, 800561e <__mdiff+0x2e>
 8005610:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <__mdiff+0x108>)
 8005612:	4602      	mov	r2, r0
 8005614:	f240 2132 	movw	r1, #562	; 0x232
 8005618:	4838      	ldr	r0, [pc, #224]	; (80056fc <__mdiff+0x10c>)
 800561a:	f7fe fd47 	bl	80040ac <__assert_func>
 800561e:	2301      	movs	r3, #1
 8005620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	bfa4      	itt	ge
 800562a:	463b      	movge	r3, r7
 800562c:	4627      	movge	r7, r4
 800562e:	4630      	mov	r0, r6
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	bfa6      	itte	ge
 8005634:	461c      	movge	r4, r3
 8005636:	2500      	movge	r5, #0
 8005638:	2501      	movlt	r5, #1
 800563a:	f7ff fd3f 	bl	80050bc <_Balloc>
 800563e:	b920      	cbnz	r0, 800564a <__mdiff+0x5a>
 8005640:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <__mdiff+0x108>)
 8005642:	4602      	mov	r2, r0
 8005644:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005648:	e7e6      	b.n	8005618 <__mdiff+0x28>
 800564a:	693e      	ldr	r6, [r7, #16]
 800564c:	60c5      	str	r5, [r0, #12]
 800564e:	6925      	ldr	r5, [r4, #16]
 8005650:	f107 0114 	add.w	r1, r7, #20
 8005654:	f104 0914 	add.w	r9, r4, #20
 8005658:	f100 0e14 	add.w	lr, r0, #20
 800565c:	f107 0210 	add.w	r2, r7, #16
 8005660:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005664:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005668:	46f2      	mov	sl, lr
 800566a:	2700      	movs	r7, #0
 800566c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005674:	fa1f f883 	uxth.w	r8, r3
 8005678:	fa17 f78b 	uxtah	r7, r7, fp
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	eba7 0808 	sub.w	r8, r7, r8
 8005682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800568a:	fa1f f888 	uxth.w	r8, r8
 800568e:	141f      	asrs	r7, r3, #16
 8005690:	454d      	cmp	r5, r9
 8005692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005696:	f84a 3b04 	str.w	r3, [sl], #4
 800569a:	d8e7      	bhi.n	800566c <__mdiff+0x7c>
 800569c:	1b2b      	subs	r3, r5, r4
 800569e:	3b15      	subs	r3, #21
 80056a0:	f023 0303 	bic.w	r3, r3, #3
 80056a4:	3304      	adds	r3, #4
 80056a6:	3415      	adds	r4, #21
 80056a8:	42a5      	cmp	r5, r4
 80056aa:	bf38      	it	cc
 80056ac:	2304      	movcc	r3, #4
 80056ae:	4419      	add	r1, r3
 80056b0:	4473      	add	r3, lr
 80056b2:	469e      	mov	lr, r3
 80056b4:	460d      	mov	r5, r1
 80056b6:	4565      	cmp	r5, ip
 80056b8:	d30e      	bcc.n	80056d8 <__mdiff+0xe8>
 80056ba:	f10c 0203 	add.w	r2, ip, #3
 80056be:	1a52      	subs	r2, r2, r1
 80056c0:	f022 0203 	bic.w	r2, r2, #3
 80056c4:	3903      	subs	r1, #3
 80056c6:	458c      	cmp	ip, r1
 80056c8:	bf38      	it	cc
 80056ca:	2200      	movcc	r2, #0
 80056cc:	441a      	add	r2, r3
 80056ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80056d2:	b17b      	cbz	r3, 80056f4 <__mdiff+0x104>
 80056d4:	6106      	str	r6, [r0, #16]
 80056d6:	e7a5      	b.n	8005624 <__mdiff+0x34>
 80056d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80056dc:	fa17 f488 	uxtah	r4, r7, r8
 80056e0:	1422      	asrs	r2, r4, #16
 80056e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80056e6:	b2a4      	uxth	r4, r4
 80056e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056ec:	f84e 4b04 	str.w	r4, [lr], #4
 80056f0:	1417      	asrs	r7, r2, #16
 80056f2:	e7e0      	b.n	80056b6 <__mdiff+0xc6>
 80056f4:	3e01      	subs	r6, #1
 80056f6:	e7ea      	b.n	80056ce <__mdiff+0xde>
 80056f8:	08005ea3 	.word	0x08005ea3
 80056fc:	08005eb4 	.word	0x08005eb4

08005700 <__d2b>:
 8005700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005704:	4689      	mov	r9, r1
 8005706:	2101      	movs	r1, #1
 8005708:	ec57 6b10 	vmov	r6, r7, d0
 800570c:	4690      	mov	r8, r2
 800570e:	f7ff fcd5 	bl	80050bc <_Balloc>
 8005712:	4604      	mov	r4, r0
 8005714:	b930      	cbnz	r0, 8005724 <__d2b+0x24>
 8005716:	4602      	mov	r2, r0
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <__d2b+0xb0>)
 800571a:	4826      	ldr	r0, [pc, #152]	; (80057b4 <__d2b+0xb4>)
 800571c:	f240 310a 	movw	r1, #778	; 0x30a
 8005720:	f7fe fcc4 	bl	80040ac <__assert_func>
 8005724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800572c:	bb35      	cbnz	r5, 800577c <__d2b+0x7c>
 800572e:	2e00      	cmp	r6, #0
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	d028      	beq.n	8005786 <__d2b+0x86>
 8005734:	4668      	mov	r0, sp
 8005736:	9600      	str	r6, [sp, #0]
 8005738:	f7ff fd8c 	bl	8005254 <__lo0bits>
 800573c:	9900      	ldr	r1, [sp, #0]
 800573e:	b300      	cbz	r0, 8005782 <__d2b+0x82>
 8005740:	9a01      	ldr	r2, [sp, #4]
 8005742:	f1c0 0320 	rsb	r3, r0, #32
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	430b      	orrs	r3, r1
 800574c:	40c2      	lsrs	r2, r0
 800574e:	6163      	str	r3, [r4, #20]
 8005750:	9201      	str	r2, [sp, #4]
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	61a3      	str	r3, [r4, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2202      	movne	r2, #2
 800575c:	2201      	moveq	r2, #1
 800575e:	6122      	str	r2, [r4, #16]
 8005760:	b1d5      	cbz	r5, 8005798 <__d2b+0x98>
 8005762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005766:	4405      	add	r5, r0
 8005768:	f8c9 5000 	str.w	r5, [r9]
 800576c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005770:	f8c8 0000 	str.w	r0, [r8]
 8005774:	4620      	mov	r0, r4
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005780:	e7d5      	b.n	800572e <__d2b+0x2e>
 8005782:	6161      	str	r1, [r4, #20]
 8005784:	e7e5      	b.n	8005752 <__d2b+0x52>
 8005786:	a801      	add	r0, sp, #4
 8005788:	f7ff fd64 	bl	8005254 <__lo0bits>
 800578c:	9b01      	ldr	r3, [sp, #4]
 800578e:	6163      	str	r3, [r4, #20]
 8005790:	2201      	movs	r2, #1
 8005792:	6122      	str	r2, [r4, #16]
 8005794:	3020      	adds	r0, #32
 8005796:	e7e3      	b.n	8005760 <__d2b+0x60>
 8005798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800579c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057a0:	f8c9 0000 	str.w	r0, [r9]
 80057a4:	6918      	ldr	r0, [r3, #16]
 80057a6:	f7ff fd35 	bl	8005214 <__hi0bits>
 80057aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057ae:	e7df      	b.n	8005770 <__d2b+0x70>
 80057b0:	08005ea3 	.word	0x08005ea3
 80057b4:	08005eb4 	.word	0x08005eb4

080057b8 <_calloc_r>:
 80057b8:	b513      	push	{r0, r1, r4, lr}
 80057ba:	434a      	muls	r2, r1
 80057bc:	4611      	mov	r1, r2
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	f7fd fdfc 	bl	80033bc <_malloc_r>
 80057c4:	4604      	mov	r4, r0
 80057c6:	b118      	cbz	r0, 80057d0 <_calloc_r+0x18>
 80057c8:	9a01      	ldr	r2, [sp, #4]
 80057ca:	2100      	movs	r1, #0
 80057cc:	f7fd fded 	bl	80033aa <memset>
 80057d0:	4620      	mov	r0, r4
 80057d2:	b002      	add	sp, #8
 80057d4:	bd10      	pop	{r4, pc}
	...

080057d8 <_free_r>:
 80057d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057da:	2900      	cmp	r1, #0
 80057dc:	d048      	beq.n	8005870 <_free_r+0x98>
 80057de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e2:	9001      	str	r0, [sp, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f1a1 0404 	sub.w	r4, r1, #4
 80057ea:	bfb8      	it	lt
 80057ec:	18e4      	addlt	r4, r4, r3
 80057ee:	f7ff fc59 	bl	80050a4 <__malloc_lock>
 80057f2:	4a20      	ldr	r2, [pc, #128]	; (8005874 <_free_r+0x9c>)
 80057f4:	9801      	ldr	r0, [sp, #4]
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	4615      	mov	r5, r2
 80057fa:	b933      	cbnz	r3, 800580a <_free_r+0x32>
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6014      	str	r4, [r2, #0]
 8005800:	b003      	add	sp, #12
 8005802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005806:	f7ff bc53 	b.w	80050b0 <__malloc_unlock>
 800580a:	42a3      	cmp	r3, r4
 800580c:	d90b      	bls.n	8005826 <_free_r+0x4e>
 800580e:	6821      	ldr	r1, [r4, #0]
 8005810:	1862      	adds	r2, r4, r1
 8005812:	4293      	cmp	r3, r2
 8005814:	bf04      	itt	eq
 8005816:	681a      	ldreq	r2, [r3, #0]
 8005818:	685b      	ldreq	r3, [r3, #4]
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	bf04      	itt	eq
 800581e:	1852      	addeq	r2, r2, r1
 8005820:	6022      	streq	r2, [r4, #0]
 8005822:	602c      	str	r4, [r5, #0]
 8005824:	e7ec      	b.n	8005800 <_free_r+0x28>
 8005826:	461a      	mov	r2, r3
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b10b      	cbz	r3, 8005830 <_free_r+0x58>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d9fa      	bls.n	8005826 <_free_r+0x4e>
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	1855      	adds	r5, r2, r1
 8005834:	42a5      	cmp	r5, r4
 8005836:	d10b      	bne.n	8005850 <_free_r+0x78>
 8005838:	6824      	ldr	r4, [r4, #0]
 800583a:	4421      	add	r1, r4
 800583c:	1854      	adds	r4, r2, r1
 800583e:	42a3      	cmp	r3, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	d1dd      	bne.n	8005800 <_free_r+0x28>
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	4421      	add	r1, r4
 800584c:	6011      	str	r1, [r2, #0]
 800584e:	e7d7      	b.n	8005800 <_free_r+0x28>
 8005850:	d902      	bls.n	8005858 <_free_r+0x80>
 8005852:	230c      	movs	r3, #12
 8005854:	6003      	str	r3, [r0, #0]
 8005856:	e7d3      	b.n	8005800 <_free_r+0x28>
 8005858:	6825      	ldr	r5, [r4, #0]
 800585a:	1961      	adds	r1, r4, r5
 800585c:	428b      	cmp	r3, r1
 800585e:	bf04      	itt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	bf04      	itt	eq
 8005868:	1949      	addeq	r1, r1, r5
 800586a:	6021      	streq	r1, [r4, #0]
 800586c:	6054      	str	r4, [r2, #4]
 800586e:	e7c7      	b.n	8005800 <_free_r+0x28>
 8005870:	b003      	add	sp, #12
 8005872:	bd30      	pop	{r4, r5, pc}
 8005874:	20000304 	.word	0x20000304

08005878 <__sfputc_r>:
 8005878:	6893      	ldr	r3, [r2, #8]
 800587a:	3b01      	subs	r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	b410      	push	{r4}
 8005880:	6093      	str	r3, [r2, #8]
 8005882:	da08      	bge.n	8005896 <__sfputc_r+0x1e>
 8005884:	6994      	ldr	r4, [r2, #24]
 8005886:	42a3      	cmp	r3, r4
 8005888:	db01      	blt.n	800588e <__sfputc_r+0x16>
 800588a:	290a      	cmp	r1, #10
 800588c:	d103      	bne.n	8005896 <__sfputc_r+0x1e>
 800588e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005892:	f7fe bb39 	b.w	8003f08 <__swbuf_r>
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	1c58      	adds	r0, r3, #1
 800589a:	6010      	str	r0, [r2, #0]
 800589c:	7019      	strb	r1, [r3, #0]
 800589e:	4608      	mov	r0, r1
 80058a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <__sfputs_r>:
 80058a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a8:	4606      	mov	r6, r0
 80058aa:	460f      	mov	r7, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	18d5      	adds	r5, r2, r3
 80058b0:	42ac      	cmp	r4, r5
 80058b2:	d101      	bne.n	80058b8 <__sfputs_r+0x12>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e007      	b.n	80058c8 <__sfputs_r+0x22>
 80058b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058bc:	463a      	mov	r2, r7
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ffda 	bl	8005878 <__sfputc_r>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d1f3      	bne.n	80058b0 <__sfputs_r+0xa>
 80058c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058cc <_vfiprintf_r>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	460d      	mov	r5, r1
 80058d2:	b09d      	sub	sp, #116	; 0x74
 80058d4:	4614      	mov	r4, r2
 80058d6:	4698      	mov	r8, r3
 80058d8:	4606      	mov	r6, r0
 80058da:	b118      	cbz	r0, 80058e4 <_vfiprintf_r+0x18>
 80058dc:	6983      	ldr	r3, [r0, #24]
 80058de:	b90b      	cbnz	r3, 80058e4 <_vfiprintf_r+0x18>
 80058e0:	f7fd fc90 	bl	8003204 <__sinit>
 80058e4:	4b89      	ldr	r3, [pc, #548]	; (8005b0c <_vfiprintf_r+0x240>)
 80058e6:	429d      	cmp	r5, r3
 80058e8:	d11b      	bne.n	8005922 <_vfiprintf_r+0x56>
 80058ea:	6875      	ldr	r5, [r6, #4]
 80058ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ee:	07d9      	lsls	r1, r3, #31
 80058f0:	d405      	bmi.n	80058fe <_vfiprintf_r+0x32>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	059a      	lsls	r2, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_vfiprintf_r+0x32>
 80058f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fa:	f7fd fd46 	bl	800338a <__retarget_lock_acquire_recursive>
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	071b      	lsls	r3, r3, #28
 8005902:	d501      	bpl.n	8005908 <_vfiprintf_r+0x3c>
 8005904:	692b      	ldr	r3, [r5, #16]
 8005906:	b9eb      	cbnz	r3, 8005944 <_vfiprintf_r+0x78>
 8005908:	4629      	mov	r1, r5
 800590a:	4630      	mov	r0, r6
 800590c:	f7fe fb60 	bl	8003fd0 <__swsetup_r>
 8005910:	b1c0      	cbz	r0, 8005944 <_vfiprintf_r+0x78>
 8005912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005914:	07dc      	lsls	r4, r3, #31
 8005916:	d50e      	bpl.n	8005936 <_vfiprintf_r+0x6a>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	b01d      	add	sp, #116	; 0x74
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <_vfiprintf_r+0x244>)
 8005924:	429d      	cmp	r5, r3
 8005926:	d101      	bne.n	800592c <_vfiprintf_r+0x60>
 8005928:	68b5      	ldr	r5, [r6, #8]
 800592a:	e7df      	b.n	80058ec <_vfiprintf_r+0x20>
 800592c:	4b79      	ldr	r3, [pc, #484]	; (8005b14 <_vfiprintf_r+0x248>)
 800592e:	429d      	cmp	r5, r3
 8005930:	bf08      	it	eq
 8005932:	68f5      	ldreq	r5, [r6, #12]
 8005934:	e7da      	b.n	80058ec <_vfiprintf_r+0x20>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	0598      	lsls	r0, r3, #22
 800593a:	d4ed      	bmi.n	8005918 <_vfiprintf_r+0x4c>
 800593c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593e:	f7fd fd25 	bl	800338c <__retarget_lock_release_recursive>
 8005942:	e7e9      	b.n	8005918 <_vfiprintf_r+0x4c>
 8005944:	2300      	movs	r3, #0
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
 8005948:	2320      	movs	r3, #32
 800594a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800594e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005952:	2330      	movs	r3, #48	; 0x30
 8005954:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b18 <_vfiprintf_r+0x24c>
 8005958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800595c:	f04f 0901 	mov.w	r9, #1
 8005960:	4623      	mov	r3, r4
 8005962:	469a      	mov	sl, r3
 8005964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005968:	b10a      	cbz	r2, 800596e <_vfiprintf_r+0xa2>
 800596a:	2a25      	cmp	r2, #37	; 0x25
 800596c:	d1f9      	bne.n	8005962 <_vfiprintf_r+0x96>
 800596e:	ebba 0b04 	subs.w	fp, sl, r4
 8005972:	d00b      	beq.n	800598c <_vfiprintf_r+0xc0>
 8005974:	465b      	mov	r3, fp
 8005976:	4622      	mov	r2, r4
 8005978:	4629      	mov	r1, r5
 800597a:	4630      	mov	r0, r6
 800597c:	f7ff ff93 	bl	80058a6 <__sfputs_r>
 8005980:	3001      	adds	r0, #1
 8005982:	f000 80aa 	beq.w	8005ada <_vfiprintf_r+0x20e>
 8005986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005988:	445a      	add	r2, fp
 800598a:	9209      	str	r2, [sp, #36]	; 0x24
 800598c:	f89a 3000 	ldrb.w	r3, [sl]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80a2 	beq.w	8005ada <_vfiprintf_r+0x20e>
 8005996:	2300      	movs	r3, #0
 8005998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800599c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a0:	f10a 0a01 	add.w	sl, sl, #1
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	9307      	str	r3, [sp, #28]
 80059a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ac:	931a      	str	r3, [sp, #104]	; 0x68
 80059ae:	4654      	mov	r4, sl
 80059b0:	2205      	movs	r2, #5
 80059b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b6:	4858      	ldr	r0, [pc, #352]	; (8005b18 <_vfiprintf_r+0x24c>)
 80059b8:	f7fa fc12 	bl	80001e0 <memchr>
 80059bc:	9a04      	ldr	r2, [sp, #16]
 80059be:	b9d8      	cbnz	r0, 80059f8 <_vfiprintf_r+0x12c>
 80059c0:	06d1      	lsls	r1, r2, #27
 80059c2:	bf44      	itt	mi
 80059c4:	2320      	movmi	r3, #32
 80059c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ca:	0713      	lsls	r3, r2, #28
 80059cc:	bf44      	itt	mi
 80059ce:	232b      	movmi	r3, #43	; 0x2b
 80059d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d4:	f89a 3000 	ldrb.w	r3, [sl]
 80059d8:	2b2a      	cmp	r3, #42	; 0x2a
 80059da:	d015      	beq.n	8005a08 <_vfiprintf_r+0x13c>
 80059dc:	9a07      	ldr	r2, [sp, #28]
 80059de:	4654      	mov	r4, sl
 80059e0:	2000      	movs	r0, #0
 80059e2:	f04f 0c0a 	mov.w	ip, #10
 80059e6:	4621      	mov	r1, r4
 80059e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ec:	3b30      	subs	r3, #48	; 0x30
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	d94e      	bls.n	8005a90 <_vfiprintf_r+0x1c4>
 80059f2:	b1b0      	cbz	r0, 8005a22 <_vfiprintf_r+0x156>
 80059f4:	9207      	str	r2, [sp, #28]
 80059f6:	e014      	b.n	8005a22 <_vfiprintf_r+0x156>
 80059f8:	eba0 0308 	sub.w	r3, r0, r8
 80059fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005a00:	4313      	orrs	r3, r2
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	46a2      	mov	sl, r4
 8005a06:	e7d2      	b.n	80059ae <_vfiprintf_r+0xe2>
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	1d19      	adds	r1, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	9103      	str	r1, [sp, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfbb      	ittet	lt
 8005a14:	425b      	neglt	r3, r3
 8005a16:	f042 0202 	orrlt.w	r2, r2, #2
 8005a1a:	9307      	strge	r3, [sp, #28]
 8005a1c:	9307      	strlt	r3, [sp, #28]
 8005a1e:	bfb8      	it	lt
 8005a20:	9204      	strlt	r2, [sp, #16]
 8005a22:	7823      	ldrb	r3, [r4, #0]
 8005a24:	2b2e      	cmp	r3, #46	; 0x2e
 8005a26:	d10c      	bne.n	8005a42 <_vfiprintf_r+0x176>
 8005a28:	7863      	ldrb	r3, [r4, #1]
 8005a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a2c:	d135      	bne.n	8005a9a <_vfiprintf_r+0x1ce>
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	9203      	str	r2, [sp, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfb8      	it	lt
 8005a3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a3e:	3402      	adds	r4, #2
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b28 <_vfiprintf_r+0x25c>
 8005a46:	7821      	ldrb	r1, [r4, #0]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fbc8 	bl	80001e0 <memchr>
 8005a50:	b140      	cbz	r0, 8005a64 <_vfiprintf_r+0x198>
 8005a52:	2340      	movs	r3, #64	; 0x40
 8005a54:	eba0 000a 	sub.w	r0, r0, sl
 8005a58:	fa03 f000 	lsl.w	r0, r3, r0
 8005a5c:	9b04      	ldr	r3, [sp, #16]
 8005a5e:	4303      	orrs	r3, r0
 8005a60:	3401      	adds	r4, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a68:	482c      	ldr	r0, [pc, #176]	; (8005b1c <_vfiprintf_r+0x250>)
 8005a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a6e:	2206      	movs	r2, #6
 8005a70:	f7fa fbb6 	bl	80001e0 <memchr>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d03f      	beq.n	8005af8 <_vfiprintf_r+0x22c>
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <_vfiprintf_r+0x254>)
 8005a7a:	bb1b      	cbnz	r3, 8005ac4 <_vfiprintf_r+0x1f8>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	3307      	adds	r3, #7
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	3308      	adds	r3, #8
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8a:	443b      	add	r3, r7
 8005a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8e:	e767      	b.n	8005960 <_vfiprintf_r+0x94>
 8005a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a94:	460c      	mov	r4, r1
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7a5      	b.n	80059e6 <_vfiprintf_r+0x11a>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	3401      	adds	r4, #1
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f04f 0c0a 	mov.w	ip, #10
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aac:	3a30      	subs	r2, #48	; 0x30
 8005aae:	2a09      	cmp	r2, #9
 8005ab0:	d903      	bls.n	8005aba <_vfiprintf_r+0x1ee>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0c5      	beq.n	8005a42 <_vfiprintf_r+0x176>
 8005ab6:	9105      	str	r1, [sp, #20]
 8005ab8:	e7c3      	b.n	8005a42 <_vfiprintf_r+0x176>
 8005aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005abe:	4604      	mov	r4, r0
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e7f0      	b.n	8005aa6 <_vfiprintf_r+0x1da>
 8005ac4:	ab03      	add	r3, sp, #12
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <_vfiprintf_r+0x258>)
 8005acc:	a904      	add	r1, sp, #16
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7fd fd6e 	bl	80035b0 <_printf_float>
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	1c78      	adds	r0, r7, #1
 8005ad8:	d1d6      	bne.n	8005a88 <_vfiprintf_r+0x1bc>
 8005ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005adc:	07d9      	lsls	r1, r3, #31
 8005ade:	d405      	bmi.n	8005aec <_vfiprintf_r+0x220>
 8005ae0:	89ab      	ldrh	r3, [r5, #12]
 8005ae2:	059a      	lsls	r2, r3, #22
 8005ae4:	d402      	bmi.n	8005aec <_vfiprintf_r+0x220>
 8005ae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae8:	f7fd fc50 	bl	800338c <__retarget_lock_release_recursive>
 8005aec:	89ab      	ldrh	r3, [r5, #12]
 8005aee:	065b      	lsls	r3, r3, #25
 8005af0:	f53f af12 	bmi.w	8005918 <_vfiprintf_r+0x4c>
 8005af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af6:	e711      	b.n	800591c <_vfiprintf_r+0x50>
 8005af8:	ab03      	add	r3, sp, #12
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <_vfiprintf_r+0x258>)
 8005b00:	a904      	add	r1, sp, #16
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fd fff8 	bl	8003af8 <_printf_i>
 8005b08:	e7e4      	b.n	8005ad4 <_vfiprintf_r+0x208>
 8005b0a:	bf00      	nop
 8005b0c:	08005d6c 	.word	0x08005d6c
 8005b10:	08005d8c 	.word	0x08005d8c
 8005b14:	08005d4c 	.word	0x08005d4c
 8005b18:	08006014 	.word	0x08006014
 8005b1c:	0800601e 	.word	0x0800601e
 8005b20:	080035b1 	.word	0x080035b1
 8005b24:	080058a7 	.word	0x080058a7
 8005b28:	0800601a 	.word	0x0800601a

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_read_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fd f89e 	bl	8002c7c <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200003f4 	.word	0x200003f4

08005b50 <abort>:
 8005b50:	b508      	push	{r3, lr}
 8005b52:	2006      	movs	r0, #6
 8005b54:	f000 f860 	bl	8005c18 <raise>
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f000 f88f 	bl	8005c7c <_exit>
	...

08005b60 <_fstat_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_fstat_r+0x20>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	602b      	str	r3, [r5, #0]
 8005b6e:	f7fd f96a 	bl	8002e46 <_fstat>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d102      	bne.n	8005b7c <_fstat_r+0x1c>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	b103      	cbz	r3, 8005b7c <_fstat_r+0x1c>
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	bd38      	pop	{r3, r4, r5, pc}
 8005b7e:	bf00      	nop
 8005b80:	200003f4 	.word	0x200003f4

08005b84 <_isatty_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d06      	ldr	r5, [pc, #24]	; (8005ba0 <_isatty_r+0x1c>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	f7fd fabe 	bl	8003110 <_isatty>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_isatty_r+0x1a>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_isatty_r+0x1a>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	200003f4 	.word	0x200003f4

08005ba4 <__ascii_mbtowc>:
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	b901      	cbnz	r1, 8005baa <__ascii_mbtowc+0x6>
 8005ba8:	a901      	add	r1, sp, #4
 8005baa:	b142      	cbz	r2, 8005bbe <__ascii_mbtowc+0x1a>
 8005bac:	b14b      	cbz	r3, 8005bc2 <__ascii_mbtowc+0x1e>
 8005bae:	7813      	ldrb	r3, [r2, #0]
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	1e10      	subs	r0, r2, #0
 8005bb6:	bf18      	it	ne
 8005bb8:	2001      	movne	r0, #1
 8005bba:	b002      	add	sp, #8
 8005bbc:	4770      	bx	lr
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	e7fb      	b.n	8005bba <__ascii_mbtowc+0x16>
 8005bc2:	f06f 0001 	mvn.w	r0, #1
 8005bc6:	e7f8      	b.n	8005bba <__ascii_mbtowc+0x16>

08005bc8 <_raise_r>:
 8005bc8:	291f      	cmp	r1, #31
 8005bca:	b538      	push	{r3, r4, r5, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	d904      	bls.n	8005bdc <_raise_r+0x14>
 8005bd2:	2316      	movs	r3, #22
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bde:	b112      	cbz	r2, 8005be6 <_raise_r+0x1e>
 8005be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005be4:	b94b      	cbnz	r3, 8005bfa <_raise_r+0x32>
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 f830 	bl	8005c4c <_getpid_r>
 8005bec:	462a      	mov	r2, r5
 8005bee:	4601      	mov	r1, r0
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bf6:	f000 b817 	b.w	8005c28 <_kill_r>
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d00a      	beq.n	8005c14 <_raise_r+0x4c>
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	d103      	bne.n	8005c0a <_raise_r+0x42>
 8005c02:	2316      	movs	r3, #22
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7e7      	b.n	8005bda <_raise_r+0x12>
 8005c0a:	2400      	movs	r4, #0
 8005c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c10:	4628      	mov	r0, r5
 8005c12:	4798      	blx	r3
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7e0      	b.n	8005bda <_raise_r+0x12>

08005c18 <raise>:
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <raise+0xc>)
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f7ff bfd3 	b.w	8005bc8 <_raise_r>
 8005c22:	bf00      	nop
 8005c24:	20000060 	.word	0x20000060

08005c28 <_kill_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d07      	ldr	r5, [pc, #28]	; (8005c48 <_kill_r+0x20>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	f000 f819 	bl	8005c6c <_kill>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d102      	bne.n	8005c44 <_kill_r+0x1c>
 8005c3e:	682b      	ldr	r3, [r5, #0]
 8005c40:	b103      	cbz	r3, 8005c44 <_kill_r+0x1c>
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	bd38      	pop	{r3, r4, r5, pc}
 8005c46:	bf00      	nop
 8005c48:	200003f4 	.word	0x200003f4

08005c4c <_getpid_r>:
 8005c4c:	f7fd b8d8 	b.w	8002e00 <_getpid>

08005c50 <__ascii_wctomb>:
 8005c50:	b149      	cbz	r1, 8005c66 <__ascii_wctomb+0x16>
 8005c52:	2aff      	cmp	r2, #255	; 0xff
 8005c54:	bf85      	ittet	hi
 8005c56:	238a      	movhi	r3, #138	; 0x8a
 8005c58:	6003      	strhi	r3, [r0, #0]
 8005c5a:	700a      	strbls	r2, [r1, #0]
 8005c5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005c60:	bf98      	it	ls
 8005c62:	2001      	movls	r0, #1
 8005c64:	4770      	bx	lr
 8005c66:	4608      	mov	r0, r1
 8005c68:	4770      	bx	lr
	...

08005c6c <_kill>:
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <_kill+0xc>)
 8005c6e:	2258      	movs	r2, #88	; 0x58
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c76:	4770      	bx	lr
 8005c78:	200003f4 	.word	0x200003f4

08005c7c <_exit>:
 8005c7c:	e7fe      	b.n	8005c7c <_exit>
	...

08005c80 <_init>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr

08005c8c <_fini>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr
